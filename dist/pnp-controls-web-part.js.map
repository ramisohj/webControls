{"version":3,"sources":["webpack:///../webpack/bootstrap 239999f147f0e5c8d72e","webpack:///.././node_modules/tslib/tslib.es6.js","webpack:///../../../../../packages/logging/src/logger.ts","webpack:///../../../../../packages/logging/src/listeners.ts","webpack:///../external \"react\"","webpack:///../(webpack)/buildin/global.js","webpack:///../../../../../packages/common/src/blobutil.ts","webpack:///../../../../../packages/common/src/collections.ts","webpack:///../../../../../packages/common/src/decorators.ts","webpack:///../../../../../packages/common/src/exceptions.ts","webpack:///../../../../../packages/common/src/libconfig.ts","webpack:///../../../../../packages/common/src/util.ts","webpack:///../../../../../packages/common/src/netutil.ts","webpack:///../../../../../packages/common/src/storage.ts","webpack:///../../../../src/webparts/pnpControls/PnPControlsWebPart.ts","webpack:///../external \"react-dom\"","webpack:///../external \"@microsoft/sp-webpart-base\"","webpack:///../external \"PnPControlsWebPartStrings\"","webpack:///../../../../../src/webparts/pnpControls/components/PnPControls.tsx","webpack:///../../../../../packages/sp/src/utils/extractweburl.ts","webpack:///../../../../../packages/sp/src/exceptions.ts","webpack:///../../../../../packages/sp/src/odata.ts","webpack:///../../../../../packages/sp/src/config/splibconfig.ts","webpack:///../../../../../packages/sp/src/net/digestcache.ts","webpack:///../../../../../packages/sp/src/net/sphttpclient.ts","webpack:///../../../../../packages/sp/src/utils/toabsoluteurl.ts","webpack:///../../../../../packages/sp/src/sharepointqueryable.ts","webpack:///../../../../../packages/sp/src/siteusers.ts","webpack:///../../../../../packages/sp/src/sitegroups.ts","webpack:///../../../../../packages/sp/src/roles.ts","webpack:///../../../../../packages/sp/src/types.ts","webpack:///../../../../../packages/sp/src/sharepointqueryablesecurable.ts","webpack:///../../../../../packages/sp/src/sharepointqueryableshareable.ts","webpack:///../../../../../packages/sp/src/webparts.ts","webpack:///../../../../../packages/sp/src/folders.ts","webpack:///../../../../../packages/sp/src/contenttypes.ts","webpack:///../../../../../packages/sp/src/attachmentfiles.ts","webpack:///../../../../../packages/sp/src/views.ts","webpack:///../../../../../packages/sp/src/fields.ts","webpack:///../../../../../packages/sp/src/forms.ts","webpack:///../../../../../packages/sp/src/subscriptions.ts","webpack:///../../../../../packages/sp/src/usercustomactions.ts","webpack:///../../../../../packages/sp/src/lists.ts","webpack:///../../../../../packages/sp/src/items.ts","webpack:///../../../../../packages/sp/src/files.ts","webpack:///../../../../../packages/sp/src/appcatalog.ts","webpack:///../../../../../packages/sp/src/clientsidepages.ts","webpack:///../../../../../packages/sp/src/navigation.ts","webpack:///../../../../../packages/sp/src/regionalsettings.ts","webpack:///../../../../../packages/sp/src/search.ts","webpack:///../../../../../packages/sp/src/searchsuggest.ts","webpack:///../../../../../packages/sp/src/batch.ts","webpack:///../../../../../packages/sp/src/features.ts","webpack:///../../../../../packages/sp/src/relateditems.ts","webpack:///../../../../../packages/sp/src/webs.ts","webpack:///../../../../../packages/sp/src/site.ts","webpack:///../../../../../packages/sp/src/userprofiles.ts","webpack:///../../../../../packages/sp/src/social.ts","webpack:///../../../../../packages/sp/src/utilities.ts","webpack:///../../../../../packages/sp/src/rest.ts","webpack:///../../../../../packages/odata/src/caching.ts","webpack:///../../../../../packages/odata/src/core.ts","webpack:///../../../../../packages/odata/src/parsers.ts","webpack:///../../../../../packages/odata/src/pipeline.ts","webpack:///../../../../../packages/odata/src/queryable.ts","webpack:///../../../../../packages/odata/src/odatabatch.ts"],"names":["tslib_1.__extends","PrincipalType","_setup","tslib_1.__decorate"],"mappings":"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","file":"pnp-controls-web-part.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 5);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 239999f147f0e5c8d72e","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/tslib/tslib.es6.js\n// module id = 0\n// module chunks = 0","import { LogLevel } from \"./loglevel\";\nimport { LogListener } from \"./listeners\";\nimport { LogEntry } from \"./logentry\";\n\n/**\n * Class used to subscribe ILogListener and log messages throughout an application\n *\n */\nexport class Logger {\n\n    private static _instance: LoggerImpl;\n\n    /**\n     * Gets or sets the active log level to apply for log filtering\n     */\n    public static get activeLogLevel(): LogLevel {\n        return Logger.instance.activeLogLevel;\n    }\n\n    public static set activeLogLevel(value: LogLevel) {\n        Logger.instance.activeLogLevel = value;\n    }\n\n    private static get instance(): LoggerImpl {\n        if (typeof Logger._instance === \"undefined\" || Logger._instance === null) {\n            Logger._instance = new LoggerImpl();\n        }\n        return Logger._instance;\n    }\n\n    /**\n     * Adds ILogListener instances to the set of subscribed listeners\n     *\n     * @param listeners One or more listeners to subscribe to this log\n     */\n    public static subscribe(...listeners: LogListener[]): void {\n        listeners.map(listener => Logger.instance.subscribe(listener));\n    }\n\n    /**\n     * Clears the subscribers collection, returning the collection before modifiction\n     */\n    public static clearSubscribers(): LogListener[] {\n        return Logger.instance.clearSubscribers();\n    }\n\n    /**\n     * Gets the current subscriber count\n     */\n    public static get count(): number {\n        return Logger.instance.count;\n    }\n\n    /**\n     * Writes the supplied string to the subscribed listeners\n     *\n     * @param message The message to write\n     * @param level [Optional] if supplied will be used as the level of the entry (Default: LogLevel.Verbose)\n     */\n    public static write(message: string, level: LogLevel = LogLevel.Verbose) {\n        Logger.instance.log({ level: level, message: message });\n    }\n\n    /**\n     * Writes the supplied string to the subscribed listeners\n     *\n     * @param json The json object to stringify and write\n     * @param level [Optional] if supplied will be used as the level of the entry (Default: LogLevel.Verbose)\n     */\n    public static writeJSON(json: any, level: LogLevel = LogLevel.Verbose) {\n        Logger.instance.log({ level: level, message: JSON.stringify(json) });\n    }\n\n    /**\n     * Logs the supplied entry to the subscribed listeners\n     *\n     * @param entry The message to log\n     */\n    public static log(entry: LogEntry) {\n        Logger.instance.log(entry);\n    }\n\n    /**\n     * Logs an error object to the subscribed listeners\n     * \n     * @param err The error object\n     */\n    public static error(err: Error) {\n        Logger.instance.log({ data: err, level: LogLevel.Error, message: err.message });\n    }\n}\n\nclass LoggerImpl {\n\n    constructor(public activeLogLevel: LogLevel = LogLevel.Warning, private subscribers: LogListener[] = []) { }\n\n    public subscribe(listener: LogListener): void {\n        this.subscribers.push(listener);\n    }\n\n    public clearSubscribers(): LogListener[] {\n        const s = this.subscribers.slice(0);\n        this.subscribers.length = 0;\n        return s;\n    }\n\n    public get count(): number {\n        return this.subscribers.length;\n    }\n\n    public write(message: string, level: LogLevel = LogLevel.Verbose) {\n        this.log({ level: level, message: message });\n    }\n\n    public log(entry: LogEntry) {\n        if (typeof entry !== \"undefined\" && this.activeLogLevel <= entry.level) {\n            this.subscribers.map(subscriber => subscriber.log(entry));\n        }\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ../../../../packages/logging/src/logger.ts","import { LogEntry } from \"./logentry\";\nimport { LogLevel } from \"./loglevel\";\n\n/**\n * Interface that defines a log listner\n *\n */\nexport interface LogListener {\n    /**\n     * Any associated data that a given logging listener may choose to log or ignore\n     *\n     * @param entry The information to be logged\n     */\n    log(entry: LogEntry): void;\n}\n\n/**\n * Implementation of LogListener which logs to the console\n *\n */\nexport class ConsoleListener implements LogListener {\n\n    /**\n     * Any associated data that a given logging listener may choose to log or ignore\n     *\n     * @param entry The information to be logged\n     */\n    public log(entry: LogEntry): void {\n\n        const msg = this.format(entry);\n\n        switch (entry.level) {\n            case LogLevel.Verbose:\n            case LogLevel.Info:\n                console.log(msg);\n                break;\n            case LogLevel.Warning:\n                console.warn(msg);\n                break;\n            case LogLevel.Error:\n                console.error(msg);\n                break;\n        }\n    }\n\n    /**\n     * Formats the message\n     *\n     * @param entry The information to format into a string\n     */\n    private format(entry: LogEntry): string {\n        const msg = [];\n        msg.push(\"Message: \" + entry.message);\n        if (typeof entry.data !== \"undefined\") {\n            msg.push(\" Data: \" + JSON.stringify(entry.data));\n        }\n\n        return msg.join(\"\");\n    }\n}\n\n/**\n * Implementation of LogListener which logs to the supplied function\n *\n */\nexport class FunctionListener implements LogListener {\n\n    /**\n     * Creates a new instance of the FunctionListener class\n     *\n     * @constructor\n     * @param  method The method to which any logging data will be passed\n     */\n    constructor(private method: (entry: LogEntry) => void) { }\n\n    /**\n     * Any associated data that a given logging listener may choose to log or ignore\n     *\n     * @param entry The information to be logged\n     */\n    public log(entry: LogEntry): void {\n        this.method(entry);\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ../../../../packages/logging/src/listeners.ts","module.exports = __WEBPACK_EXTERNAL_MODULE_2__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"react\"\n// module id = 2\n// module chunks = 0","var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === \"object\")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// (webpack)/buildin/global.js\n// module id = 3\n// module chunks = 0","/**\n * Reads a blob as text\n *\n * @param blob The data to read\n */\nexport function readBlobAsText(blob: Blob): Promise<string> {\n    return readBlobAs<string>(blob, \"string\");\n}\n\n/**\n * Reads a blob into an array buffer\n *\n * @param blob The data to read\n */\nexport function readBlobAsArrayBuffer(blob: Blob): Promise<ArrayBuffer> {\n    return readBlobAs<ArrayBuffer>(blob, \"buffer\");\n}\n\n/**\n * Generic method to read blob's content\n *\n * @param blob The data to read\n * @param mode The read mode\n */\nfunction readBlobAs<T>(blob: Blob, mode: \"string\" | \"buffer\"): Promise<T> {\n\n    return new Promise<T>((resolve, reject) => {\n\n        try {\n\n            const reader = new FileReader();\n            reader.onload = (e: any) => {\n                resolve(e.target.result);\n            };\n\n            switch (mode) {\n                case \"string\":\n                    reader.readAsText(blob);\n                    break;\n                case \"buffer\":\n                    reader.readAsArrayBuffer(blob);\n                    break;\n            }\n        } catch (e) {\n            reject(e);\n        }\n    });\n}\n\n\n\n// WEBPACK FOOTER //\n// ../../../../packages/common/src/blobutil.ts","/**\n * Interface defining an object with a known property type\n */\nexport interface TypedHash<T> {\n    [key: string]: T;\n}\n\n/**\n * Generic dictionary\n */\nexport class Dictionary<T> {\n\n    /**\n     * Creates a new instance of the Dictionary<T> class\n     *\n     * @constructor\n     */\n    constructor(private keys: string[] = [], private values: T[] = []) {\n    }\n\n    /**\n     * Gets a value from the collection using the specified key\n     *\n     * @param key The key whose value we want to return, returns null if the key does not exist\n     */\n    public get(key: string): T | null {\n        const index = this.keys.indexOf(key);\n        if (index < 0) {\n            return null;\n        }\n        return this.values[index];\n    }\n\n    /**\n     * Adds the supplied key and value to the dictionary\n     *\n     * @param key The key to add\n     * @param o The value to add\n     */\n    public add(key: string, o: T | null): void {\n        const index = this.keys.indexOf(key);\n        if (index > -1) {\n            if (o === null) {\n                this.remove(key);\n            } else {\n                this.values[index] = o;\n            }\n        } else {\n            if (o !== null) {\n                this.keys.push(key);\n                this.values.push(o);\n            }\n        }\n    }\n\n    /**\n     * Merges the supplied typed hash into this dictionary instance. Existing values are updated and new ones are created as appropriate.\n     */\n    public merge(source: TypedHash<T> | Dictionary<T>): void {\n        if (\"getKeys\" in source) {\n            const sourceAsDictionary = source as Dictionary<T>;\n            sourceAsDictionary.getKeys().map(key => {\n                this.add(key, sourceAsDictionary.get(key));\n            });\n        } else {\n            const sourceAsHash = source as TypedHash<T>;\n            for (const key in sourceAsHash) {\n                if (sourceAsHash.hasOwnProperty(key)) {\n                    this.add(key, sourceAsHash[key]);\n                }\n            }\n        }\n    }\n\n    /**\n     * Removes a value from the dictionary\n     *\n     * @param key The key of the key/value pair to remove. Returns null if the key was not found.\n     */\n    public remove(key: string): T | null {\n        const index = this.keys.indexOf(key);\n        if (index < 0) {\n            return null;\n        }\n        const val = this.values[index];\n        this.keys.splice(index, 1);\n        this.values.splice(index, 1);\n        return val;\n    }\n\n    /**\n     * Returns all the keys currently in the dictionary as an array\n     */\n    public getKeys(): string[] {\n        return this.keys;\n    }\n\n    /**\n     * Returns all the values currently in the dictionary as an array\n     */\n    public getValues(): T[] {\n        return this.values;\n    }\n\n    /**\n     * Clears the current dictionary\n     */\n    public clear(): void {\n        this.keys = [];\n        this.values = [];\n    }\n\n    /**\n     * Gets a count of the items currently in the dictionary\n     */\n    public get count(): number {\n        return this.keys.length;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ../../../../packages/common/src/collections.ts","import { Logger, LogLevel } from \"@pnp/logging\";\n\nexport function deprecated(deprecationVersion: string, message: string) {\n\n    return function (target: any, propertyKey: string, descriptor: PropertyDescriptor) {\n\n        const method = descriptor.value;\n\n        descriptor.value = function (this: any, ...args: any[]) {\n            Logger.log({\n                data: {\n                    descriptor: descriptor,\n                    propertyKey: propertyKey,\n                    target: target,\n                },\n                level: LogLevel.Warning,\n                message: `(${deprecationVersion}) ${message}`,\n            });\n\n            return method.apply(this, args);\n        };\n    };\n}\n\nexport function beta(message = \"This feature is flagged as beta and is subject to change.\") {\n\n    return function (target: any, propertyKey: string, descriptor: PropertyDescriptor) {\n\n        const method = descriptor.value;\n\n        descriptor.value = function (this: any, ...args: any[]) {\n            Logger.log({\n                data: {\n                    descriptor: descriptor,\n                    propertyKey: propertyKey,\n                    target: target,\n                },\n                level: LogLevel.Warning,\n                message: message,\n            });\n\n            return method.apply(this, args);\n        };\n    };\n}\n\n\n\n// WEBPACK FOOTER //\n// ../../../../packages/common/src/decorators.ts","import { Logger, LogLevel } from \"@pnp/logging\";\n\nexport class UrlException extends Error {\n\n    constructor(msg: string) {\n        super(msg);\n        this.name = \"UrlException\";\n        Logger.log({ data: {}, level: LogLevel.Error, message: `[${this.name}]::${this.message}` });\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ../../../../packages/common/src/exceptions.ts","import { TypedHash, Dictionary } from \"./collections\";\nimport { ISPFXContext } from \"./spfxContextInterface\";\n\nexport interface LibraryConfiguration {\n\n    /**\n     * Allows caching to be global disabled, default: false\n     */\n    globalCacheDisable?: boolean;\n\n    /**\n     * Defines the default store used by the usingCaching method, default: session\n     */\n    defaultCachingStore?: \"session\" | \"local\";\n\n    /**\n     * Defines the default timeout in seconds used by the usingCaching method, default 30\n     */\n    defaultCachingTimeoutSeconds?: number;\n\n    /**\n     * If true a timeout expired items will be removed from the cache in intervals determined by cacheTimeoutInterval\n     */\n    enableCacheExpiration?: boolean;\n\n    /**\n     * Determines the interval in milliseconds at which the cache is checked to see if items have expired (min: 100)\n     */\n    cacheExpirationIntervalMilliseconds?: number;\n\n    /**\n     * Used to supply the current context from an SPFx webpart to the library\n     */\n    spfxContext?: any;\n}\n\nexport function setup(config: LibraryConfiguration): void {\n    RuntimeConfig.extend(config);\n}\n\nexport class RuntimeConfigImpl {\n\n    private _v: Dictionary<any>;\n\n    constructor() {\n\n        this._v = new Dictionary();\n\n        // setup defaults\n        this._v.add(\"defaultCachingStore\", \"session\");\n        this._v.add(\"defaultCachingTimeoutSeconds\", 60);\n        this._v.add(\"globalCacheDisable\", false);\n        this._v.add(\"enableCacheExpiration\", false);\n        this._v.add(\"cacheExpirationIntervalMilliseconds\", 750);\n        this._v.add(\"spfxContext\", null);\n    }\n\n    /**\n     * \n     * @param config The set of properties to add to the globa configuration instance\n     */\n    public extend(config: TypedHash<any>): void {\n\n        Object.keys(config).forEach((key: string) => {\n            this._v.add(key, config[key]);\n        });\n    }\n\n    public get(key: string): any {\n        return this._v.get(key);\n    }\n\n    public get defaultCachingStore(): \"session\" | \"local\" {\n        return this.get(\"defaultCachingStore\");\n    }\n\n    public get defaultCachingTimeoutSeconds(): number {\n        return this.get(\"defaultCachingTimeoutSeconds\");\n    }\n\n    public get globalCacheDisable(): boolean {\n        return this.get(\"globalCacheDisable\");\n    }\n\n    public get enableCacheExpiration(): boolean {\n        return this.get(\"enableCacheExpiration\");\n    }\n\n    public get cacheExpirationIntervalMilliseconds(): number {\n        return this.get(\"cacheExpirationIntervalMilliseconds\");\n    }\n\n    public get spfxContext(): ISPFXContext {\n        return this.get(\"spfxContext\");\n    }\n}\n\nconst _runtimeConfig = new RuntimeConfigImpl();\n\nexport let RuntimeConfig = _runtimeConfig;\n\n\n\n// WEBPACK FOOTER //\n// ../../../../packages/common/src/libconfig.ts","/**\n * Gets a callback function which will maintain context across async calls.\n * Allows for the calling pattern getCtxCallback(thisobj, method, methodarg1, methodarg2, ...)\n *\n * @param context The object that will be the 'this' value in the callback\n * @param method The method to which we will apply the context and parameters\n * @param params Optional, additional arguments to supply to the wrapped method when it is invoked\n */\nexport function getCtxCallback(context: any, method: Function, ...params: any[]): Function {\n    return function () {\n        method.apply(context, params);\n    };\n}\n\n/**\n * Adds a value to a date\n *\n * @param date The date to which we will add units, done in local time\n * @param interval The name of the interval to add, one of: ['year', 'quarter', 'month', 'week', 'day', 'hour', 'minute', 'second']\n * @param units The amount to add to date of the given interval\n *\n * http://stackoverflow.com/questions/1197928/how-to-add-30-minutes-to-a-javascript-date-object\n */\nexport function dateAdd(date: Date, interval: string, units: number): Date | undefined {\n    let ret: Date | undefined = new Date(date); // don't change original date\n    switch (interval.toLowerCase()) {\n        case \"year\": ret.setFullYear(ret.getFullYear() + units); break;\n        case \"quarter\": ret.setMonth(ret.getMonth() + 3 * units); break;\n        case \"month\": ret.setMonth(ret.getMonth() + units); break;\n        case \"week\": ret.setDate(ret.getDate() + 7 * units); break;\n        case \"day\": ret.setDate(ret.getDate() + units); break;\n        case \"hour\": ret.setTime(ret.getTime() + units * 3600000); break;\n        case \"minute\": ret.setTime(ret.getTime() + units * 60000); break;\n        case \"second\": ret.setTime(ret.getTime() + units * 1000); break;\n        default: ret = undefined; break;\n    }\n    return ret;\n}\n\n/**\n * Combines an arbitrary set of paths ensuring and normalizes the slashes\n *\n * @param paths 0 to n path parts to combine\n */\nexport function combinePaths(...paths: string[]): string {\n\n    return paths\n        .filter(path => !Util.stringIsNullOrEmpty(path))\n        .map(path => path.replace(/^[\\\\|\\/]/, \"\").replace(/[\\\\|\\/]$/, \"\"))\n        .join(\"/\")\n        .replace(/\\\\/g, \"/\");\n}\n\n/**\n * Gets a random string of chars length\n * \n * https://stackoverflow.com/questions/1349404/generate-random-string-characters-in-javascript\n *\n * @param chars The length of the random string to generate\n */\nexport function getRandomString(chars: number): string {\n    const text = new Array(chars);\n    const possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n    for (let i = 0; i < chars; i++) {\n        text[i] = possible.charAt(Math.floor(Math.random() * possible.length));\n    }\n    return text.join(\"\");\n}\n\n/**\n * Gets a random GUID value\n *\n * http://stackoverflow.com/questions/105034/create-guid-uuid-in-javascript\n */\n/* tslint:disable no-bitwise */\nexport function getGUID(): string {\n    let d = new Date().getTime();\n    const guid = \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, function (c) {\n        const r = (d + Math.random() * 16) % 16 | 0;\n        d = Math.floor(d / 16);\n        return (c === \"x\" ? r : (r & 0x3 | 0x8)).toString(16);\n    });\n    return guid;\n}\n/* tslint:enable */\n\n/**\n * Determines if a given value is a function\n *\n * @param cf The thing to test for functionness\n */\nexport function isFunc(cf: any): boolean {\n    return typeof cf === \"function\";\n}\n\n/**\n * Determines if an object is both defined and not null\n * @param obj Object to test\n */\nexport function objectDefinedNotNull(obj: any): boolean {\n    return typeof obj !== \"undefined\" && obj !== null;\n}\n\n/**\n * @returns whether the provided parameter is a JavaScript Array or not.\n*/\nexport function isArray(array: any): boolean {\n\n    if (Array.isArray) {\n        return Array.isArray(array);\n    }\n\n    return array && typeof array.length === \"number\" && array.constructor === Array;\n}\n\n/**\n * Provides functionality to extend the given object by doing a shallow copy\n *\n * @param target The object to which properties will be copied\n * @param source The source object from which properties will be copied\n * @param noOverwrite If true existing properties on the target are not overwritten from the source\n *\n */\nexport function extend(target: any, source: any, noOverwrite = false): any {\n\n    if (!Util.objectDefinedNotNull(source)) {\n        return target;\n    }\n\n    // ensure we don't overwrite things we don't want overwritten\n    const check: (o: any, i: string) => Boolean = noOverwrite ? (o, i) => !(i in o) : () => true;\n\n    return Object.getOwnPropertyNames(source)\n        .filter((v: string) => check(target, v))\n        .reduce((t: any, v: string) => {\n            t[v] = source[v];\n            return t;\n        }, target);\n}\n\n/**\n * Determines if a given url is absolute\n *\n * @param url The url to check to see if it is absolute\n */\nexport function isUrlAbsolute(url: string): boolean {\n    return /^https?:\\/\\/|^\\/\\//i.test(url);\n}\n\n/**\n * Determines if a string is null or empty or undefined\n *\n * @param s The string to test\n */\nexport function stringIsNullOrEmpty(s: string): boolean {\n    return typeof s === \"undefined\" || s === null || s.length < 1;\n}\n\nexport class Util {\n\n    /**\n     * Gets a callback function which will maintain context across async calls.\n     * Allows for the calling pattern getCtxCallback(thisobj, method, methodarg1, methodarg2, ...)\n     *\n     * @param context The object that will be the 'this' value in the callback\n     * @param method The method to which we will apply the context and parameters\n     * @param params Optional, additional arguments to supply to the wrapped method when it is invoked\n     */\n    public static getCtxCallback = getCtxCallback;\n\n\n    /**\n     * Adds a value to a date\n     *\n     * @param date The date to which we will add units, done in local time\n     * @param interval The name of the interval to add, one of: ['year', 'quarter', 'month', 'week', 'day', 'hour', 'minute', 'second']\n     * @param units The amount to add to date of the given interval\n     *\n     * http://stackoverflow.com/questions/1197928/how-to-add-30-minutes-to-a-javascript-date-object\n     */\n    public static dateAdd = dateAdd;\n\n    /**\n     * Combines an arbitrary set of paths ensuring and normalizes the slashes\n     *\n     * @param paths 0 to n path parts to combine\n     */\n    public static combinePaths = combinePaths;\n\n    /**\n     * Gets a random string of chars length\n     *\n     * @param chars The length of the random string to generate\n     */\n    public static getRandomString = getRandomString;\n\n    /**\n     * Gets a random GUID value\n     *\n     * http://stackoverflow.com/questions/105034/create-guid-uuid-in-javascript\n     */\n    public static getGUID = getGUID;\n\n    /**\n     * Determines if a given value is a function\n     *\n     * @param cf The thing to test for functionness\n     */\n    public static isFunc = isFunc;\n\n    /**\n     * Determines if an object is both defined and not null\n     * @param obj Object to test\n     */\n    public static objectDefinedNotNull = objectDefinedNotNull;\n\n    /**\n     * @returns whether the provided parameter is a JavaScript Array or not.\n    */\n    public static isArray = isArray;\n\n    /**\n     * Provides functionality to extend the given object by doing a shallow copy\n     *\n     * @param target The object to which properties will be copied\n     * @param source The source object from which properties will be copied\n     * @param noOverwrite If true existing properties on the target are not overwritten from the source\n     *\n     */\n    public static extend = extend;\n\n    /**\n     * Determines if a given url is absolute\n     *\n     * @param url The url to check to see if it is absolute\n     */\n    public static isUrlAbsolute = isUrlAbsolute;\n\n    /**\n     * Determines if a string is null or empty or undefined\n     *\n     * @param s The string to test\n     */\n    public static stringIsNullOrEmpty = stringIsNullOrEmpty;\n}\n\n\n\n// WEBPACK FOOTER //\n// ../../../../packages/common/src/util.ts","import { Util } from \"./util\";\n\ndeclare var global: { fetch(url: string, options: any): Promise<Response> };\n\nexport interface ConfigOptions {\n    headers?: string[][] | { [key: string]: string } | Headers;\n    mode?: \"navigate\" | \"same-origin\" | \"no-cors\" | \"cors\";\n    credentials?: \"omit\" | \"same-origin\" | \"include\";\n    cache?: \"default\" | \"no-store\" | \"reload\" | \"no-cache\" | \"force-cache\" | \"only-if-cached\";\n}\n\nexport interface FetchOptions extends ConfigOptions {\n    method?: string;\n    body?: any;\n}\n\nexport interface HttpClientImpl {\n    fetch(url: string, options: FetchOptions): Promise<Response>;\n}\n\nexport interface RequestClient {\n    fetch(url: string, options?: FetchOptions): Promise<Response>;\n    fetchRaw(url: string, options?: FetchOptions): Promise<Response>;\n    get(url: string, options?: FetchOptions): Promise<Response>;\n    post(url: string, options?: FetchOptions): Promise<Response>;\n    patch(url: string, options?: FetchOptions): Promise<Response>;\n    delete(url: string, options?: FetchOptions): Promise<Response>;\n}\n\nexport function mergeHeaders(target: Headers, source: any): void {\n    if (typeof source !== \"undefined\" && source !== null) {\n        const temp = <any>new Request(\"\", { headers: source });\n        temp.headers.forEach((value: string, name: string) => {\n            target.append(name, value);\n        });\n    }\n}\n\nexport function mergeOptions(target: ConfigOptions, source: ConfigOptions): void {\n\n    if (Util.objectDefinedNotNull(source)) {\n        const headers = Util.extend(target.headers || {}, source.headers);\n        target = Util.extend(target, source);\n        target.headers = headers;\n    }\n}\n\n/**\n * Makes requests using the global/window fetch API\n */\nexport class FetchClient implements HttpClientImpl {\n    public fetch(url: string, options: FetchOptions): Promise<Response> {\n        return global.fetch(url, options);\n    }\n}\n\n/**\n * Makes requests using the fetch API adding the supplied token to the Authorization header\n */\nexport class BearerTokenFetchClient extends FetchClient {\n\n    constructor(private _token: string) {\n        super();\n    }\n\n    public fetch(url: string, options: FetchOptions = {}): Promise<Response> {\n\n        const headers = new Headers();\n\n        mergeHeaders(headers, options.headers);\n\n        headers.set(\"Authorization\", `Bearer ${this._token}`);\n\n        options.headers = headers;\n\n        return super.fetch(url, options);\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ../../../../packages/common/src/netutil.ts","import { Util } from \"./util\";\nimport { Dictionary } from \"./collections\";\nimport { RuntimeConfig } from \"./libconfig\";\nimport { Logger, LogLevel } from \"@pnp/logging\";\n\n/**\n * A wrapper class to provide a consistent interface to browser based storage\n *\n */\nexport class PnPClientStorageWrapper implements PnPClientStore {\n\n    /**\n     * True if the wrapped storage is available; otherwise, false\n     */\n    public enabled: boolean;\n\n    /**\n     * Creates a new instance of the PnPClientStorageWrapper class\n     *\n     * @constructor\n     */\n    constructor(private store: Storage, public defaultTimeoutMinutes = -1) {\n        this.enabled = this.test();\n        // if the cache timeout is enabled call the handler\n        // this will clear any expired items and set the timeout function\n        if (RuntimeConfig.enableCacheExpiration) {\n            Logger.write(`Enabling cache expiration.`, LogLevel.Info);\n            this.cacheExpirationHandler();\n        }\n    }\n\n    /**\n     * Get a value from storage, or null if that value does not exist\n     *\n     * @param key The key whose value we want to retrieve\n     */\n    public get<T>(key: string): T | null {\n\n        if (!this.enabled) {\n            return null;\n        }\n\n        const o = this.store.getItem(key);\n\n        if (o == null) {\n            return null;\n        }\n\n        const persistable = JSON.parse(o);\n\n        if (new Date(persistable.expiration) <= new Date()) {\n\n            Logger.write(`Removing item with key '${key}' from cache due to expiration.`, LogLevel.Info);\n            this.delete(key);\n            return null;\n\n        } else {\n\n            return persistable.value as T;\n        }\n    }\n\n    /**\n     * Adds a value to the underlying storage\n     *\n     * @param key The key to use when storing the provided value\n     * @param o The value to store\n     * @param expire Optional, if provided the expiration of the item, otherwise the default is used\n     */\n    public put(key: string, o: any, expire?: Date): void {\n        if (this.enabled) {\n            this.store.setItem(key, this.createPersistable(o, expire));\n        }\n    }\n\n    /**\n     * Deletes a value from the underlying storage\n     *\n     * @param key The key of the pair we want to remove from storage\n     */\n    public delete(key: string): void {\n        if (this.enabled) {\n            this.store.removeItem(key);\n        }\n    }\n\n    /**\n     * Gets an item from the underlying storage, or adds it if it does not exist using the supplied getter function\n     *\n     * @param key The key to use when storing the provided value\n     * @param getter A function which will upon execution provide the desired value\n     * @param expire Optional, if provided the expiration of the item, otherwise the default is used\n     */\n    public getOrPut<T>(key: string, getter: () => Promise<T>, expire?: Date): Promise<T> {\n        if (!this.enabled) {\n            return getter();\n        }\n\n        return new Promise((resolve) => {\n\n            const o = this.get<T>(key);\n\n            if (o == null) {\n                getter().then((d) => {\n                    this.put(key, d, expire);\n                    resolve(d);\n                });\n            } else {\n                resolve(o);\n            }\n        });\n    }\n\n    /**\n     * Deletes any expired items placed in the store by the pnp library, leaves other items untouched\n     */\n    public deleteExpired(): Promise<void> {\n\n        return new Promise<void>((resolve, reject) => {\n\n            if (!this.enabled) {\n                resolve();\n            }\n\n            try {\n\n                for (let i = 0; i < this.store.length; i++) {\n                    const key = this.store.key(i);\n                    if (key !== null) {\n                        // test the stored item to see if we stored it\n                        if (/[\"|']?pnp[\"|']? ?: ?1/i.test(<string>this.store.getItem(key))) {\n                            // get those items as get will delete from cache if they are expired\n                            this.get(key);\n                        }\n                    }\n                }\n\n                resolve();\n\n            } catch (e) { reject(e); }\n        });\n    }\n\n    /**\n     * Used to determine if the wrapped storage is available currently\n     */\n    private test(): boolean {\n        const str = \"test\";\n        try {\n            this.store.setItem(str, str);\n            this.store.removeItem(str);\n            return true;\n        } catch (e) {\n            return false;\n        }\n    }\n\n    /**\n     * Creates the persistable to store\n     */\n    private createPersistable(o: any, expire?: Date): string {\n        if (typeof expire === \"undefined\") {\n\n            // ensure we are by default inline with the global library setting\n            let defaultTimeout = RuntimeConfig.defaultCachingTimeoutSeconds;\n            if (this.defaultTimeoutMinutes > 0) {\n                defaultTimeout = this.defaultTimeoutMinutes * 60;\n            }\n            expire = Util.dateAdd(new Date(), \"second\", defaultTimeout);\n        }\n\n        return JSON.stringify({ pnp: 1, expiration: expire, value: o });\n    }\n\n    /**\n     * Deletes expired items added by this library in this.store and sets a timeout to call itself\n     */\n    private cacheExpirationHandler(): void {\n\n        Logger.write(\"Called cache expiration handler.\", LogLevel.Verbose);\n        this.deleteExpired().then(_ => {\n\n            // call ourself in the future\n            setTimeout(Util.getCtxCallback(this, this.cacheExpirationHandler), RuntimeConfig.cacheExpirationIntervalMilliseconds);\n        }).catch(e => {\n\n            // we've got some error - so just stop the loop and report the error\n            Logger.log({\n                data: e,\n                level: LogLevel.Error,\n                message: \"Error deleting expired cache entries, see data for details. Timeout not reset.\",\n            });\n        });\n    }\n}\n\n/**\n * Interface which defines the operations provided by a client storage object\n */\nexport interface PnPClientStore {\n    /**\n     * True if the wrapped storage is available; otherwise, false\n     */\n    enabled: boolean;\n\n    /**\n     * Get a value from storage, or null if that value does not exist\n     *\n     * @param key The key whose value we want to retrieve\n     */\n    get(key: string): any;\n\n    /**\n     * Adds a value to the underlying storage\n     *\n     * @param key The key to use when storing the provided value\n     * @param o The value to store\n     * @param expire Optional, if provided the expiration of the item, otherwise the default is used\n     */\n    put(key: string, o: any, expire?: Date): void;\n\n    /**\n     * Deletes a value from the underlying storage\n     *\n     * @param key The key of the pair we want to remove from storage\n     */\n    delete(key: string): void;\n\n    /**\n     * Gets an item from the underlying storage, or adds it if it does not exist using the supplied getter function\n     *\n     * @param key The key to use when storing the provided value\n     * @param getter A function which will upon execution provide the desired value\n     * @param expire Optional, if provided the expiration of the item, otherwise the default is used\n     */\n    getOrPut(key: string, getter: Function, expire?: Date): any;\n\n    /**\n     * Removes any expired items placed in the store by the pnp library, leaves other items untouched\n     */\n    deleteExpired(): Promise<void>;\n}\n\n/**\n * A thin implementation of in-memory storage for use in nodejs\n */\nclass MemoryStorage {\n\n    constructor(private _store = new Dictionary<string>()) { }\n\n    public get length(): number {\n        return this._store.count;\n    }\n\n    public clear(): void {\n        this._store.clear();\n    }\n\n    public getItem(key: string): any {\n        return this._store.get(key);\n    }\n\n    public key(index: number): string {\n        return this._store.getKeys()[index];\n    }\n\n    public removeItem(key: string): void {\n        this._store.remove(key);\n    }\n\n    public setItem(key: string, data: string): void {\n        this._store.add(key, data);\n    }\n\n    [key: string]: any;\n    [index: number]: string;\n}\n\n/**\n * A class that will establish wrappers for both local and session storage\n */\nexport class PnPClientStorage {\n\n    /**\n     * Creates a new instance of the PnPClientStorage class\n     *\n     * @constructor\n     */\n    constructor(private _local: PnPClientStore | null = null, private _session: PnPClientStore | null = null) { }\n\n    /**\n     * Provides access to the local storage of the browser\n     */\n    public get local(): PnPClientStore {\n\n        if (this._local === null) {\n            this._local = typeof localStorage !== \"undefined\" ? new PnPClientStorageWrapper(localStorage) : new PnPClientStorageWrapper(new MemoryStorage());\n        }\n\n        return this._local;\n    }\n\n    /**\n     * Provides access to the session storage of the browser\n     */\n    public get session(): PnPClientStore {\n\n        if (this._session === null) {\n            this._session = typeof sessionStorage !== \"undefined\" ? new PnPClientStorageWrapper(sessionStorage) : new PnPClientStorageWrapper(new MemoryStorage());\n        }\n\n        return this._session;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ../../../../packages/common/src/storage.ts","import * as React from 'react';\nimport * as ReactDom from 'react-dom';\nimport {\n  BaseClientSideWebPart,\n  IPropertyPaneConfiguration,\n  PropertyPaneTextField\n} from '@microsoft/sp-webpart-base';\n\nimport * as strings from 'PnPControlsWebPartStrings';\nimport PnPControls from './components/PnPControls';\nimport { IPnPControlsProps } from './components/IPnPControlsProps';\n\nexport interface IPnPControlsWebPartProps {\n  description: string;\n}\n\nexport default class PnPControlsWebPart extends BaseClientSideWebPart<IPnPControlsWebPartProps> {\n\n  public render(): void {\n    const element: React.ReactElement<IPnPControlsProps> = React.createElement(\n      PnPControls,\n      {\n        context: this.context,\n        description: this.properties.description\n      }\n    );\n\n    ReactDom.render(element, this.domElement);\n  }\n\n  protected getPropertyPaneConfiguration(): IPropertyPaneConfiguration {\n    return {\n      pages: [\n        {\n          header: {\n            description: strings.PropertyPaneDescription\n          },\n          groups: [\n            {\n              groupName: strings.BasicGroupName,\n              groupFields: [\n                PropertyPaneTextField('description', {\n                  label: strings.DescriptionFieldLabel\n                })\n              ]\n            }\n          ]\n        }\n      ]\n    };\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ../../../src/webparts/pnpControls/PnPControlsWebPart.ts","module.exports = __WEBPACK_EXTERNAL_MODULE_6__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"react-dom\"\n// module id = 6\n// module chunks = 0","module.exports = __WEBPACK_EXTERNAL_MODULE_7__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"@microsoft/sp-webpart-base\"\n// module id = 7\n// module chunks = 0","module.exports = __WEBPACK_EXTERNAL_MODULE_8__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"PnPControlsWebPartStrings\"\n// module id = 8\n// module chunks = 0","import * as React from 'react';\nimport { IPnPControlsProps, IPnpControlsState } from './IPnPControlsProps';\nimport { SPHttpClient } from '@microsoft/sp-http';\n\nimport { ClientSideWebpart } from \"@pnp/sp\";\nimport { \n  sp,\n  ClientSidePage,\n} from \"@pnp/sp\";\n\nexport default class PnPControls extends React.Component<IPnPControlsProps, IPnpControlsState> {\n\n  /**\n   * Constructor\n   * @param props\n   */\n  constructor(props: IPnPControlsProps) {\n    super(props);\n\n    this.state = {\n      webParts: [], //WebPart List\n      components: [], //Component List\n      urlPage: this._getLinkPage(),  //  --> \"http://ws19-sp19-sql17:1000/sites/modern/SitePages/Home.aspx\"\n      titlePage: this._getTitlePage(), // --> \"modern\"\n      idera: false, \n      siteHome: '/sites/'+this._getTitlePage()+'/SitePages/Home.aspx' // --> \"/sites/modern/SitePages/Home.aspx\"\n    }\n  }\n\n  /**\n   * componentDidMount lifecycle hook\n   */\n  public componentDidMount() {\n      this._main();\n  }\n   \n  /**\n   * main method\n   */\n  private async _main(){\n    await this._deepControlSearch();\n    await this._idera();\n  }\n\n  /**\n   * get full url page\n   */\n  private _getLinkPage(){\n    let linkPage = this.props.context.pageContext.web.absoluteUrl;\n    return linkPage+'/SitePages/Home.aspx';\n  }\n\n  /**\n   * get title page\n   */\n  private  _getTitlePage(){\n    return this.props.context.pageContext.web.title;\n  }\n  \n  /**\n   * getting the 'idera' parameter from the url link 'http://ws19-sp19-sql17:1000/sites/modern/SitePages/Home.aspx?idera=true'\n   * if idera=true then show the list \n   * if idera=false  show nothing.\n   */\n  private _idera(){\n    var completeURL = new URLSearchParams(location.search);\n    let hasIdera = completeURL.has('idera');\n    if (hasIdera){\n      let valueIdera = completeURL.get('idera');\n      if(valueIdera === 'true'){\n        this.setState({\n          idera: true\n        });\n      }\n    }\n  }\n\n  /**\n   * method in order to search all the controllers in the page, saving them one by one.\n   * so far there are two types of components saved (webparts and webcomponents)\n   */\n  private async _deepControlSearch(){   \n\n    const file = sp.web.getFileByServerRelativePath(this.state.siteHome); //ASPX FILE\n    const page = await ClientSidePage.fromFile(file); //CLIENT SIDE PAGE\n    let partDefs = await sp.web.getClientSideWebParts();//CLIENT SIDE PAGE COMPONENT []  \n\n    page.sections.forEach(section => {//SECTIONS\n      let canvasColumn = section.columns;//COLUMNS\n      canvasColumn.forEach(column => {\n        let controls = column.controls;//CONTROLS        \n        controls.forEach(control => {      \n          let webPart = control as ClientSideWebpart;//EACH  CONTROL IS A WEB-PART \n          this.setState({ \n            webParts: [...this.state.webParts, webPart] \n          });\n        });\n       });\n    });\n\n    partDefs.forEach(webPart => {//Searching component by component\n      this.setState({\n        components: [...this.state.components, webPart]\n      });\n    });\n  }  \n\n  /**\n   * method in order to show all the controllers founded in the page.{webparts and webcomponents}\n   */\n  public loadingControllers(){\n    const webParts = this.state.webParts.map(wp => \n      <div key={wp.id}> \n        <h3> {wp.title} </h3> \n        <p> WebPartID: {wp.webPartId} </p>\n        <p> Description: {wp.description} </p>\n      </div>\n    );\n\n    const components = this.state.components.map(cp =>\n      <div key={cp.id}> \n        <h3> {cp.Name} </h3> \n        <p> Id: {cp.Id} </p>\n        <p> Status: {cp.Status} </p>\n      </div> \n    );\n\n    if(this.state.idera){\n      return (\n        <div>\n          <h2> WEB PARTS </h2>\n            <h3>number # {webParts.length} [webParts]</h3>\n            {webParts}\n          <h2> COMPONENTS </h2>\n            <h3>number # {components.length} [components]</h3>\n            {components}\n        </div>\n      )\n    }\n  }\n\n  /**\n   * React render method\n   */\n  public render(): React.ReactElement<IPnPControlsProps> {\n    return(\n      <div>\n        <h2>TITLE: {this.state.titlePage}</h2>\n        <h2>URL : {this.state.urlPage}</h2>\n        { this.loadingControllers() }\n      </div>\n    );\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ../../../../src/webparts/pnpControls/components/PnPControls.tsx","export function extractWebUrl(candidateUrl: string) {\n\n    if (candidateUrl === null) {\n        return \"\";\n    }\n\n    const index = candidateUrl.indexOf(\"_api/\");\n\n    if (index > -1) {\n        return candidateUrl.substr(0, index);\n    }\n\n    // if all else fails just give them what they gave us back\n    return candidateUrl;\n}\n\n\n\n// WEBPACK FOOTER //\n// ../../../../packages/sp/src/utils/extractweburl.ts","import { Logger } from \"@pnp/logging\";\n\nexport class SPBatchParseException extends Error {\n\n    constructor(msg: string) {\n        super(msg);\n        this.name = \"BatchParseException\";\n        Logger.error(this);\n    }\n}\n\nexport class SPODataIdException extends Error {\n\n    constructor(public readonly data: any, msg = \"Could not extract odata id in object, you may be using nometadata. Object data logged to logger.\") {\n        super(msg);\n        this.name = \"ODataIdException\";\n        Logger.error(this);\n    }\n}\n\nexport class MaxCommentLengthException extends Error {\n\n    constructor(msg = \"The maximum comment length is 1023 characters.\") {\n        super(msg);\n        this.name = \"MaxCommentLengthException\";\n        Logger.error(this);\n    }\n}\n\nexport class NotSupportedInBatchException extends Error {\n\n    constructor(operation = \"This operation\") {\n        super(`${operation} is not supported as part of a batch.`);\n        this.name = \"NotSupportedInBatchException\";\n        Logger.error(this);\n    }\n}\n\nexport class APIUrlException extends Error {\n\n    constructor(msg = \"Unable to determine API url.\") {\n        super(msg);\n        this.name = \"APIUrlException\";\n        Logger.error(this);\n    }\n}\n\n\n\n\n// WEBPACK FOOTER //\n// ../../../../packages/sp/src/exceptions.ts","import { SharePointQueryableConstructor } from \"./sharepointqueryable\";\nimport { extractWebUrl } from \"./utils/extractweburl\";\nimport { Util } from \"@pnp/common\";\nimport { Logger, LogLevel } from \"@pnp/logging\";\nimport { SPODataIdException } from \"./exceptions\";\nimport { ODataParser, ODataParserBase } from \"@pnp/odata\";\n\nexport function spExtractODataId(candidate: any): string {\n\n    if (candidate.hasOwnProperty(\"odata.id\")) {\n        return candidate[\"odata.id\"];\n    } else if (candidate.hasOwnProperty(\"__metadata\") && candidate.__metadata.hasOwnProperty(\"id\")) {\n        return candidate.__metadata.id;\n    } else {\n        throw new SPODataIdException(candidate);\n    }\n}\n\nclass SPODataEntityParserImpl<T> extends ODataParserBase<T> {\n\n    constructor(protected factory: SharePointQueryableConstructor<T>) {\n        super();\n    }\n\n    public hydrate = (d: any) => {\n        const o = <T>new this.factory(spGetEntityUrl(d), null);\n        return Util.extend(o, d);\n    }\n\n    public parse(r: Response): Promise<T> {\n        return super.parse(r).then((d: any) => {\n            const o = <T>new this.factory(spGetEntityUrl(d), null);\n            return Util.extend(o, d);\n        });\n    }\n}\n\nclass SPODataEntityArrayParserImpl<T> extends ODataParserBase<T[]> {\n\n    constructor(protected factory: SharePointQueryableConstructor<T>) {\n        super();\n    }\n\n    public hydrate = (d: any[]) => {\n        return d.map(v => {\n            const o = <T>new this.factory(spGetEntityUrl(v), null);\n            return Util.extend(o, v);\n        });\n    }\n\n    public parse(r: Response): Promise<T[]> {\n        return super.parse(r).then((d: any[]) => {\n            return d.map(v => {\n                const o = <T>new this.factory(spGetEntityUrl(v), null);\n                return Util.extend(o, v);\n            });\n        });\n    }\n}\n\nexport function spGetEntityUrl(entity: any): string {\n\n    if (entity.hasOwnProperty(\"odata.metadata\") && entity.hasOwnProperty(\"odata.editLink\")) {\n        // we are dealign with minimal metadata (default)\n        return Util.combinePaths(extractWebUrl(entity[\"odata.metadata\"]), \"_api\", entity[\"odata.editLink\"]);\n    } else if (entity.hasOwnProperty(\"__metadata\")) {\n        // we are dealing with verbose, which has an absolute uri\n        return entity.__metadata.uri;\n    } else {\n        // we are likely dealing with nometadata, so don't error but we won't be able to\n        // chain off these objects\n        Logger.write(\"No uri information found in ODataEntity parsing, chaining will fail for this object.\", LogLevel.Warning);\n        return \"\";\n    }\n}\n\nexport function spODataEntity<T>(factory: SharePointQueryableConstructor<T>): ODataParser<T> {\n    return new SPODataEntityParserImpl(factory);\n}\n\nexport function spODataEntityArray<T>(factory: SharePointQueryableConstructor<T>): ODataParser<T[]> {\n    return new SPODataEntityArrayParserImpl(factory);\n}\n\n\n\n// WEBPACK FOOTER //\n// ../../../../packages/sp/src/odata.ts","import {\n    LibraryConfiguration,\n    TypedHash,\n    RuntimeConfig,\n    HttpClientImpl,\n    FetchClient,\n} from \"@pnp/common\";\n\nexport interface SPConfigurationPart {\n    sp?: {\n        /**\n         * Any headers to apply to all requests\n         */\n        headers?: TypedHash<string>;\n\n        /**\n         * The base url used for all requests\n         */\n        baseUrl?: string;\n\n        /**\n         * Defines a factory method used to create fetch clients\n         */\n        fetchClientFactory?: () => HttpClientImpl;\n    };\n}\n\nexport interface SPConfiguration extends LibraryConfiguration, SPConfigurationPart { }\n\nexport function setup(config: SPConfiguration): void {\n    RuntimeConfig.extend(config);\n}\n\nexport class SPRuntimeConfigImpl {\n\n    public get headers(): TypedHash<string> {\n\n        const spPart = RuntimeConfig.get(\"sp\");\n        if (spPart !== null && typeof spPart !== \"undefined\" && typeof spPart.headers !== \"undefined\") {\n            return spPart.headers;\n        }\n\n        return {};\n    }\n\n    public get baseUrl(): string | null {\n\n        const spPart = RuntimeConfig.get(\"sp\");\n        if (spPart !== null && typeof spPart.baseUrl !== \"undefined\") {\n            return spPart.baseUrl;\n        }\n\n        if (RuntimeConfig.spfxContext !== null) {\n            return RuntimeConfig.spfxContext.pageContext.web.absoluteUrl;\n        }\n\n        return null;\n    }\n\n    public get fetchClientFactory(): () => HttpClientImpl {\n\n        const spPart = RuntimeConfig.get(\"sp\");\n        // use a configured factory firt\n        if (spPart !== null && typeof spPart.fetchClientFactory !== \"undefined\") {\n            return spPart.fetchClientFactory;\n        } else {\n            return () => new FetchClient();\n        }\n    }\n}\n\nexport let SPRuntimeConfig = new SPRuntimeConfigImpl();\n\n\n\n// WEBPACK FOOTER //\n// ../../../../packages/sp/src/config/splibconfig.ts","import { SPHttpClient } from \"./sphttpclient\";\nimport { Util, Dictionary } from \"@pnp/common\";\nimport { ODataDefaultParser } from \"@pnp/odata\";\nimport { SPRuntimeConfig } from \"../config/splibconfig\";\n\nexport class CachedDigest {\n    public expiration: Date;\n    public value: string;\n}\n\n// allows for the caching of digests across all HttpClient's which each have their own DigestCache wrapper.\nconst digests = new Dictionary<CachedDigest>();\n\nexport class DigestCache {\n\n    constructor(private _httpClient: SPHttpClient, private _digests: Dictionary<CachedDigest> = digests) { }\n\n    public getDigest(webUrl: string): Promise<string> {\n\n        const cachedDigest: CachedDigest = this._digests.get(webUrl);\n        if (cachedDigest !== null) {\n            const now = new Date();\n            if (now < cachedDigest.expiration) {\n                return Promise.resolve(cachedDigest.value);\n            }\n        }\n\n        const url = Util.combinePaths(webUrl, \"/_api/contextinfo\");\n\n        const headers = {\n            \"Accept\": \"application/json;odata=verbose\",\n            \"Content-Type\": \"application/json;odata=verbose;charset=utf-8\",\n        };\n\n        return this._httpClient.fetchRaw(url, {\n            cache: \"no-cache\",\n            credentials: \"same-origin\",\n            headers: Util.extend(headers, SPRuntimeConfig.headers, true),\n            method: \"POST\",\n        }).then((response) => {\n            const parser = new ODataDefaultParser();\n            return parser.parse(response).then((d: any) => d.GetContextWebInformation);\n        }).then((data: any) => {\n            const newCachedDigest = new CachedDigest();\n            newCachedDigest.value = data.FormDigestValue;\n            const seconds = data.FormDigestTimeoutSeconds;\n            const expiration = new Date();\n            expiration.setTime(expiration.getTime() + 1000 * seconds);\n            newCachedDigest.expiration = expiration;\n            this._digests.add(webUrl, newCachedDigest);\n            return newCachedDigest.value;\n        });\n    }\n\n    public clear() {\n        this._digests.clear();\n    }\n}\n\n\n\n\n// WEBPACK FOOTER //\n// ../../../../packages/sp/src/net/digestcache.ts","import { DigestCache } from \"./digestcache\";\nimport {\n    Util,\n    mergeHeaders,\n    FetchOptions,\n    RequestClient,\n    HttpClientImpl,\n} from \"@pnp/common\";\nimport { SPRuntimeConfig } from \"../config/splibconfig\";\nimport { APIUrlException } from \"../exceptions\";\n\nexport class SPHttpClient implements RequestClient  {\n\n    private _digestCache: DigestCache;\n    private _impl: HttpClientImpl;\n\n    constructor() {\n        this._impl = SPRuntimeConfig.fetchClientFactory();\n        this._digestCache = new DigestCache(this);\n    }\n\n    public fetch(url: string, options: FetchOptions = {}): Promise<Response> {\n\n        let opts = Util.extend(options, { cache: \"no-cache\", credentials: \"same-origin\" }, true);\n\n        const headers = new Headers();\n\n        // first we add the global headers so they can be overwritten by any passed in locally to this call\n        mergeHeaders(headers, SPRuntimeConfig.headers);\n\n        // second we add the local options so we can overwrite the globals\n        mergeHeaders(headers, options.headers);\n\n        // lastly we apply any default headers we need that may not exist\n        if (!headers.has(\"Accept\")) {\n            headers.append(\"Accept\", \"application/json\");\n        }\n\n        if (!headers.has(\"Content-Type\")) {\n            headers.append(\"Content-Type\", \"application/json;odata=verbose;charset=utf-8\");\n        }\n\n        if (!headers.has(\"X-ClientService-ClientTag\")) {\n            headers.append(\"X-ClientService-ClientTag\", \"PnPCoreJS:@pnp-$$Version$$\");\n        }\n\n        if (!headers.has(\"User-Agent\")) {\n            // this marks the requests for understanding by the service\n            headers.append(\"User-Agent\", \"NONISV|SharePointPnP|PnPCoreJS/$$Version$$\");\n        }\n\n        opts = Util.extend(opts, { headers: headers });\n\n        if (opts.method && opts.method.toUpperCase() !== \"GET\") {\n\n            // if we have either a request digest or an authorization header we don't need a digest\n            if (!headers.has(\"X-RequestDigest\") && !headers.has(\"Authorization\")) {\n                const index = url.indexOf(\"_api/\");\n                if (index < 0) {\n                    throw new APIUrlException();\n                }\n                const webUrl = url.substr(0, index);\n                return this._digestCache.getDigest(webUrl)\n                    .then((digest) => {\n                        headers.append(\"X-RequestDigest\", digest);\n                        return this.fetchRaw(url, opts);\n                    });\n            }\n        }\n\n        return this.fetchRaw(url, opts);\n    }\n\n    public fetchRaw(url: string, options: FetchOptions = {}): Promise<Response> {\n\n        // here we need to normalize the headers\n        const rawHeaders = new Headers();\n        mergeHeaders(rawHeaders, options.headers);\n        options = Util.extend(options, { headers: rawHeaders });\n\n        const retry = (ctx: RetryContext): void => {\n\n            this._impl.fetch(url, options).then((response) => ctx.resolve(response)).catch((response) => {\n\n                // Check if request was throttled - http status code 429\n                // Check if request failed due to server unavailable - http status code 503\n                if (response.status !== 429 && response.status !== 503) {\n                    ctx.reject(response);\n                }\n\n                // grab our current delay\n                const delay = ctx.delay;\n\n                // Increment our counters.\n                ctx.delay *= 2;\n                ctx.attempts++;\n\n                // If we have exceeded the retry count, reject.\n                if (ctx.retryCount <= ctx.attempts) {\n                    ctx.reject(response);\n                }\n\n                // Set our retry timeout for {delay} milliseconds.\n                setTimeout(Util.getCtxCallback(this, retry, ctx), delay);\n            });\n        };\n\n        return new Promise((resolve, reject) => {\n\n            const retryContext: RetryContext = {\n                attempts: 0,\n                delay: 100,\n                reject: reject,\n                resolve: resolve,\n                retryCount: 7,\n            };\n\n            retry.call(this, retryContext);\n        });\n    }\n\n    public get(url: string, options: FetchOptions = {}): Promise<Response> {\n        const opts = Util.extend(options, { method: \"GET\" });\n        return this.fetch(url, opts);\n    }\n\n    public post(url: string, options: FetchOptions = {}): Promise<Response> {\n        const opts = Util.extend(options, { method: \"POST\" });\n        return this.fetch(url, opts);\n    }\n\n    public patch(url: string, options: FetchOptions = {}): Promise<Response> {\n        const opts = Util.extend(options, { method: \"PATCH\" });\n        return this.fetch(url, opts);\n    }\n\n    public delete(url: string, options: FetchOptions = {}): Promise<Response> {\n        const opts = Util.extend(options, { method: \"DELETE\" });\n        return this.fetch(url, opts);\n    }\n}\n\ninterface RetryContext {\n    attempts: number;\n    delay: number;\n    reject: (reason?: any) => void;\n    resolve: (value?: Response | PromiseLike<Response>) => void;\n    retryCount: number;\n}\n\n\n\n// WEBPACK FOOTER //\n// ../../../../packages/sp/src/net/sphttpclient.ts","declare var global: { location: string, _spPageContextInfo?: { webAbsoluteUrl?: string, webServerRelativeUrl?: string } };\nimport { Util } from \"@pnp/common\";\nimport { SPRuntimeConfig } from \"../config/splibconfig\";\n\n/**\n * Ensures that a given url is absolute for the current web based on context\n *\n * @param candidateUrl The url to make absolute\n *\n */\nexport function toAbsoluteUrl(candidateUrl: string): Promise<string> {\n\n    return new Promise((resolve) => {\n\n        if (Util.isUrlAbsolute(candidateUrl)) {\n            // if we are already absolute, then just return the url\n            return resolve(candidateUrl);\n        }\n\n        if (SPRuntimeConfig.baseUrl !== null) {\n            // base url specified either with baseUrl of spfxContext config property\n            return resolve(Util.combinePaths(SPRuntimeConfig.baseUrl, candidateUrl));\n        }\n\n        if (typeof global._spPageContextInfo !== \"undefined\") {\n\n            // operating in classic pages\n            if (global._spPageContextInfo.hasOwnProperty(\"webAbsoluteUrl\")) {\n                return resolve(Util.combinePaths(global._spPageContextInfo.webAbsoluteUrl, candidateUrl));\n            } else if (global._spPageContextInfo.hasOwnProperty(\"webServerRelativeUrl\")) {\n                return resolve(Util.combinePaths(global._spPageContextInfo.webServerRelativeUrl, candidateUrl));\n            }\n        }\n\n        // does window.location exist and have a certain path part in it?\n        if (typeof global.location !== \"undefined\") {\n            const baseUrl = global.location.toString().toLowerCase();\n            [\"/_layouts/\", \"/siteassets/\"].forEach((s: string) => {\n                const index = baseUrl.indexOf(s);\n                if (index > 0) {\n                    return resolve(Util.combinePaths(baseUrl.substr(0, index), candidateUrl));\n                }\n            });\n        }\n\n        return resolve(candidateUrl);\n    });\n}\n\n\n\n// WEBPACK FOOTER //\n// ../../../../packages/sp/src/utils/toabsoluteurl.ts","import {\n    Util,\n    Dictionary,\n    FetchOptions,\n    mergeOptions,\n} from \"@pnp/common\";\nimport {\n    ODataParser,\n    ODataQueryable,\n    RequestContext,\n} from \"@pnp/odata\";\nimport { Logger, LogLevel } from \"@pnp/logging\";\nimport { SPBatch } from \"./batch\";\nimport { SPHttpClient } from \"./net/sphttpclient\";\nimport { toAbsoluteUrl } from \"./utils/toabsoluteurl\";\n\nexport interface SharePointQueryableConstructor<T> {\n    new(baseUrl: string | SharePointQueryable, path?: string): T;\n}\n\n/**\n * SharePointQueryable Base Class\n *\n */\nexport class SharePointQueryable<GetType = any> extends ODataQueryable<SPBatch, GetType> {\n\n    /**\n     * Creates a new instance of the SharePointQueryable class\n     *\n     * @constructor\n     * @param baseUrl A string or SharePointQueryable that should form the base part of the url\n     *\n     */\n    constructor(baseUrl: string | SharePointQueryable, path?: string) {\n        super();\n\n        if (typeof baseUrl === \"string\") {\n            // we need to do some extra parsing to get the parent url correct if we are\n            // being created from just a string.\n\n            const urlStr = baseUrl as string;\n            if (Util.isUrlAbsolute(urlStr) || urlStr.lastIndexOf(\"/\") < 0) {\n                this._parentUrl = urlStr;\n                this._url = Util.combinePaths(urlStr, path);\n            } else if (urlStr.lastIndexOf(\"/\") > urlStr.lastIndexOf(\"(\")) {\n                // .../items(19)/fields\n                const index = urlStr.lastIndexOf(\"/\");\n                this._parentUrl = urlStr.slice(0, index);\n                path = Util.combinePaths(urlStr.slice(index), path);\n                this._url = Util.combinePaths(this._parentUrl, path);\n            } else {\n                // .../items(19)\n                const index = urlStr.lastIndexOf(\"(\");\n                this._parentUrl = urlStr.slice(0, index);\n                this._url = Util.combinePaths(urlStr, path);\n            }\n        } else {\n            const q = baseUrl as SharePointQueryable;\n            this._parentUrl = q._url;\n            this._options = q._options;\n            const target = q._query.get(\"@target\");\n            if (target !== null) {\n                this._query.add(\"@target\", target);\n            }\n            this._url = Util.combinePaths(this._parentUrl, path);\n        }\n    }\n\n    /**\n     * Creates a new instance of the supplied factory and extends this into that new instance\n     *\n     * @param factory constructor for the new SharePointQueryable\n     */\n    public as<T>(factory: SharePointQueryableConstructor<T>): T {\n        const o = <T>new factory(this._url, null);\n        return Util.extend(o, this, true);\n    }\n\n    /**\n     * Gets the full url with query information\n     *\n     */\n    public toUrlAndQuery(): string {\n\n        const aliasedParams = new Dictionary<string>();\n\n        let url = this.toUrl().replace(/'!(@.*?)::(.*?)'/ig, (match, labelName, value) => {\n            Logger.write(`Rewriting aliased parameter from match ${match} to label: ${labelName} value: ${value}`, LogLevel.Verbose);\n            aliasedParams.add(labelName, `'${value}'`);\n            return labelName;\n        });\n\n        // inlude our explicitly set query string params\n        aliasedParams.merge(this._query);\n\n        if (aliasedParams.count > 0) {\n            url += `?${aliasedParams.getKeys().map(key => `${key}=${aliasedParams.get(key)}`).join(\"&\")}`;\n        }\n\n        return url;\n    }\n\n    /**\n     * Gets a parent for this instance as specified\n     *\n     * @param factory The contructor for the class to create\n     */\n    protected getParent<T extends SharePointQueryable>(\n        factory: SharePointQueryableConstructor<T>,\n        baseUrl: string | SharePointQueryable = this.parentUrl,\n        path?: string,\n        batch?: SPBatch): T {\n\n        let parent = new factory(baseUrl, path);\n        parent.configure(this._options);\n\n        const target = this.query.get(\"@target\");\n        if (target !== null) {\n            parent.query.add(\"@target\", target);\n        }\n        if (typeof batch !== \"undefined\") {\n            parent = parent.inBatch(batch);\n        }\n        return parent;\n    }\n\n    /**\n     * Clones this SharePointQueryable into a new SharePointQueryable instance of T\n     * @param factory Constructor used to create the new instance\n     * @param additionalPath Any additional path to include in the clone\n     * @param includeBatch If true this instance's batch will be added to the cloned instance\n     */\n    protected clone<T extends SharePointQueryable>(factory: SharePointQueryableConstructor<T>, additionalPath?: string, includeBatch = true): T {\n        let clone = new factory(this, additionalPath);\n        clone.configure(this._options);\n        const target = this.query.get(\"@target\");\n        if (target !== null) {\n            clone.query.add(\"@target\", target);\n        }\n        if (includeBatch && this.hasBatch) {\n            clone = clone.inBatch(this.batch);\n        }\n        return clone;\n    }\n\n    /**\n     * Converts the current instance to a request context\n     *\n     * @param verb The request verb\n     * @param options The set of supplied request options\n     * @param parser The supplied ODataParser instance\n     * @param pipeline Optional request processing pipeline\n     */\n    protected toRequestContext<T>(\n        verb: string,\n        options: FetchOptions = {},\n        parser: ODataParser<T>,\n        pipeline: Array<(c: RequestContext<T>) => Promise<RequestContext<T>>>): Promise<RequestContext<T>> {\n\n        const dependencyDispose = this.hasBatch ? this.addBatchDependency() : () => { return; };\n\n        return toAbsoluteUrl(this.toUrlAndQuery()).then(url => {\n\n            mergeOptions(options, this._options);\n\n            // build our request context\n            const context: RequestContext<T> = {\n                batch: this.batch,\n                batchDependency: dependencyDispose,\n                cachingOptions: this._cachingOptions,\n                clientFactory: () => new SPHttpClient(),\n                isBatched: this.hasBatch,\n                isCached: this._useCaching,\n                options: options,\n                parser: parser,\n                pipeline: pipeline,\n                requestAbsoluteUrl: url,\n                requestId: Util.getGUID(),\n                verb: verb,\n            };\n\n            return context;\n        });\n    }\n}\n\n/**\n * Represents a REST collection which can be filtered, paged, and selected\n *\n */\nexport class SharePointQueryableCollection<GetType = any[]> extends SharePointQueryable<GetType> {\n\n    /**\n     * Filters the returned collection (https://msdn.microsoft.com/en-us/library/office/fp142385.aspx#bk_supported)\n     *\n     * @param filter The string representing the filter query\n     */\n    public filter(filter: string): this {\n        this._query.add(\"$filter\", filter);\n        return this;\n    }\n\n    /**\n     * Choose which fields to return\n     *\n     * @param selects One or more fields to return\n     */\n    public select(...selects: string[]): this {\n        if (selects.length > 0) {\n            this._query.add(\"$select\", selects.join(\",\"));\n        }\n        return this;\n    }\n\n    /**\n     * Expands fields such as lookups to get additional data\n     *\n     * @param expands The Fields for which to expand the values\n     */\n    public expand(...expands: string[]): this {\n        if (expands.length > 0) {\n            this._query.add(\"$expand\", expands.join(\",\"));\n        }\n        return this;\n    }\n\n    /**\n     * Orders based on the supplied fields\n     *\n     * @param orderby The name of the field on which to sort\n     * @param ascending If false DESC is appended, otherwise ASC (default)\n     */\n    public orderBy(orderBy: string, ascending = true): this {\n        const query = this._query.getKeys().filter(k => k === \"$orderby\").map(k => this._query.get(k));\n        query.push(`${orderBy} ${ascending ? \"asc\" : \"desc\"}`);\n        this._query.add(\"$orderby\", query.join(\",\"));\n        return this;\n    }\n\n    /**\n     * Skips the specified number of items\n     *\n     * @param skip The number of items to skip\n     */\n    public skip(skip: number): this {\n        this._query.add(\"$skip\", skip.toString());\n        return this;\n    }\n\n    /**\n     * Limits the query to only return the specified number of items\n     *\n     * @param top The query row limit\n     */\n    public top(top: number): this {\n        this._query.add(\"$top\", top.toString());\n        return this;\n    }\n}\n\n\n/**\n * Represents an instance that can be selected\n *\n */\nexport class SharePointQueryableInstance extends SharePointQueryable {\n\n    /**\n     * Choose which fields to return\n     *\n     * @param selects One or more fields to return\n     */\n    public select(...selects: string[]): this {\n        if (selects.length > 0) {\n            this._query.add(\"$select\", selects.join(\",\"));\n        }\n        return this;\n    }\n\n    /**\n     * Expands fields such as lookups to get additional data\n     *\n     * @param expands The Fields for which to expand the values\n     */\n    public expand(...expands: string[]): this {\n        if (expands.length > 0) {\n            this._query.add(\"$expand\", expands.join(\",\"));\n        }\n        return this;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ../../../../packages/sp/src/sharepointqueryable.ts","import { SharePointQueryable, SharePointQueryableInstance, SharePointQueryableCollection } from \"./sharepointqueryable\";\nimport { SiteGroups } from \"./sitegroups\";\nimport { Util, TypedHash } from \"@pnp/common\";\n\n/**\n * Properties that provide both a getter, and a setter.\n *\n */\nexport interface UserUpdateResult {\n    user: SiteUser;\n    data: any;\n}\n\n/**\n * Describes a collection of all site collection users\n *\n */\nexport class SiteUsers extends SharePointQueryableCollection {\n\n    /**\n     * Creates a new instance of the SiteUsers class\n     *\n     * @param baseUrl The url or SharePointQueryable which forms the parent of this user collection\n     */\n    constructor(baseUrl: string | SharePointQueryable, path = \"siteusers\") {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Gets a user from the collection by email\n     *\n     * @param email The email address of the user to retrieve\n     */\n    public getByEmail(email: string): SiteUser {\n        return new SiteUser(this, `getByEmail('${email}')`);\n    }\n\n    /**\n     * Gets a user from the collection by id\n     *\n     * @param id The id of the user to retrieve\n     */\n    public getById(id: number): SiteUser {\n        return new SiteUser(this, `getById(${id})`);\n    }\n\n    /**\n     * Gets a user from the collection by login name\n     *\n     * @param loginName The login name of the user to retrieve\n     */\n    public getByLoginName(loginName: string): SiteUser {\n        const su = new SiteUser(this);\n        su.concat(\"(@v)\");\n        su.query.add(\"@v\", `'${encodeURIComponent(loginName)}'`);\n        return su;\n    }\n\n    /**\n     * Removes a user from the collection by id\n     *\n     * @param id The id of the user to remove\n     */\n    public removeById(id: number | SharePointQueryable): Promise<any> {\n        return this.clone(SiteUsers, `removeById(${id})`).postCore();\n    }\n\n    /**\n     * Removes a user from the collection by login name\n     *\n     * @param loginName The login name of the user to remove\n     */\n    public removeByLoginName(loginName: string): Promise<any> {\n        const o = this.clone(SiteUsers, `removeByLoginName(@v)`);\n        o.query.add(\"@v\", `'${encodeURIComponent(loginName)}'`);\n        return o.postCore();\n    }\n\n    /**\n     * Adds a user to a group\n     *\n     * @param loginName The login name of the user to add to the group\n     *\n     */\n    public add(loginName: string): Promise<SiteUser> {\n        return this.clone(SiteUsers, null).postCore({\n            body: JSON.stringify({ \"__metadata\": { \"type\": \"SP.User\" }, LoginName: loginName }),\n        }).then(() => this.getByLoginName(loginName));\n    }\n}\n\n\n/**\n * Describes a single user\n *\n */\nexport class SiteUser extends SharePointQueryableInstance {\n\n    /**\n     * Gets the groups for this user\n     *\n     */\n    public get groups() {\n        return new SiteGroups(this, \"groups\");\n    }\n\n    /**\n    * Updates this user instance with the supplied properties\n    *\n    * @param properties A plain object of property names and values to update for the user\n    */\n    public update(properties: TypedHash<any>): Promise<UserUpdateResult> {\n\n        const postBody = Util.extend({ \"__metadata\": { \"type\": \"SP.User\" } }, properties);\n\n        return this.postCore({\n            body: JSON.stringify(postBody),\n            headers: {\n                \"X-HTTP-Method\": \"MERGE\",\n            },\n        }).then((data) => {\n            return {\n                data: data,\n                user: this,\n            };\n        });\n    }\n\n    /**\n     * Delete this user\n     *\n     */\n    public delete(): Promise<void> {\n        return this.postCore({\n            headers: {\n                \"X-HTTP-Method\": \"DELETE\",\n            },\n        });\n    }\n}\n\n/**\n * Represents the current user\n */\nexport class CurrentUser extends SharePointQueryableInstance {\n\n    constructor(baseUrl: string | SharePointQueryable, path = \"currentuser\") {\n        super(baseUrl, path);\n    }\n}\n\nexport interface SiteUserProps {\n    Email: string;\n    Id: number;\n    IsHiddenInUI: boolean;\n    IsShareByEmailGuestUser: boolean;\n    IsSiteAdmin: boolean;\n    LoginName: string;\n    PrincipalType: number;\n    Title: string;\n}\n\n\n\n// WEBPACK FOOTER //\n// ../../../../packages/sp/src/siteusers.ts","import { SharePointQueryable, SharePointQueryableInstance, SharePointQueryableCollection } from \"./sharepointqueryable\";\nimport { SiteUsers } from \"./siteusers\";\nimport { Util, TypedHash } from \"@pnp/common\";\n\n/**\n * Principal Type enum\n *\n */\nexport enum PrincipalType {\n    None = 0,\n    User = 1,\n    DistributionList = 2,\n    SecurityGroup = 4,\n    SharePointGroup = 8,\n    All = 15,\n}\n\n/**\n * Results from updating a group\n *\n */\nexport interface GroupUpdateResult {\n    group: SiteGroup;\n    data: any;\n}\n\n/**\n * Results from adding a group\n *\n */\nexport interface GroupAddResult {\n    group: SiteGroup;\n    data: any;\n}\n\n\n/**\n * Describes a collection of site groups\n *\n */\nexport class SiteGroups extends SharePointQueryableCollection {\n\n    /**\n     * Creates a new instance of the SiteGroups class\n     *\n     * @param baseUrl The url or SharePointQueryable which forms the parent of this group collection\n     */\n    constructor(baseUrl: string | SharePointQueryable, path = \"sitegroups\") {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Adds a new group to the site collection\n     *\n     * @param props The group properties object of property names and values to be set for the group\n     */\n    public add(properties: TypedHash<any>): Promise<GroupAddResult> {\n        const postBody = JSON.stringify(Util.extend(\n            { \"__metadata\": { \"type\": \"SP.Group\" } }, properties));\n\n        return this.postCore({ body: postBody }).then((data) => {\n            return {\n                data: data,\n                group: this.getById(data.Id),\n            };\n        });\n    }\n\n    /**\n     * Gets a group from the collection by name\n     *\n     * @param groupName The name of the group to retrieve\n     */\n    public getByName(groupName: string): SiteGroup {\n        return new SiteGroup(this, `getByName('${groupName}')`);\n    }\n\n    /**\n     * Gets a group from the collection by id\n     *\n     * @param id The id of the group to retrieve\n     */\n    public getById(id: number) {\n        const sg = new SiteGroup(this);\n        sg.concat(`(${id})`);\n        return sg;\n    }\n\n    /**\n     * Removes the group with the specified member id from the collection\n     *\n     * @param id The id of the group to remove\n     */\n    public removeById(id: number): Promise<void> {\n        return this.clone(SiteGroups, `removeById('${id}')`).postCore();\n    }\n\n    /**\n     * Removes the cross-site group with the specified name from the collection\n     *\n     * @param loginName The name of the group to remove\n     */\n    public removeByLoginName(loginName: string): Promise<any> {\n        return this.clone(SiteGroups, `removeByLoginName('${loginName}')`).postCore();\n    }\n}\n\n/**\n * Describes a single group\n *\n */\nexport class SiteGroup extends SharePointQueryableInstance {\n\n    /**\n     * Gets the users for this group\n     *\n     */\n    public get users(): SiteUsers {\n        return new SiteUsers(this, \"users\");\n    }\n\n    /**\n    * Updates this group instance with the supplied properties\n    *\n    * @param properties A GroupWriteableProperties object of property names and values to update for the group\n    */\n    /* tslint:disable no-string-literal */\n    public update(properties: TypedHash<any>): Promise<GroupUpdateResult> {\n\n        const postBody = Util.extend({ \"__metadata\": { \"type\": \"SP.Group\" } }, properties);\n\n        return this.postCore({\n            body: JSON.stringify(postBody),\n            headers: {\n                \"X-HTTP-Method\": \"MERGE\",\n            },\n        }).then((data) => {\n\n            let retGroup: SiteGroup = this;\n\n            if (properties.hasOwnProperty(\"Title\")) {\n                retGroup = this.getParent(SiteGroup, this.parentUrl, `getByName('${properties[\"Title\"]}')`);\n            }\n\n            return {\n                data: data,\n                group: retGroup,\n            };\n        });\n    }\n    /* tslint:enable */\n}\n\nexport interface SiteGroupAddResult {\n    group: SiteGroup;\n    data: any;\n}\n\n\n\n// WEBPACK FOOTER //\n// ../../../../packages/sp/src/sitegroups.ts","import { SharePointQueryable, SharePointQueryableInstance, SharePointQueryableCollection } from \"./sharepointqueryable\";\nimport { SiteGroups } from \"./sitegroups\";\nimport { BasePermissions } from \"./types\";\nimport { Util, TypedHash } from \"@pnp/common\";\n\n/**\n * Describes a set of role assignments for the current scope\n *\n */\nexport class RoleAssignments extends SharePointQueryableCollection {\n\n    /**\n     * Creates a new instance of the RoleAssignments class\n     *\n     * @param baseUrl The url or SharePointQueryable which forms the parent of this role assignments collection\n     */\n    constructor(baseUrl: string | SharePointQueryable, path = \"roleassignments\") {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Adds a new role assignment with the specified principal and role definitions to the collection\n     *\n     * @param principalId The id of the user or group to assign permissions to\n     * @param roleDefId The id of the role definition that defines the permissions to assign\n     *\n     */\n    public add(principalId: number, roleDefId: number): Promise<void> {\n        return this.clone(RoleAssignments, `addroleassignment(principalid=${principalId}, roledefid=${roleDefId})`).postCore();\n    }\n\n    /**\n     * Removes the role assignment with the specified principal and role definition from the collection\n     *\n     * @param principalId The id of the user or group in the role assignment\n     * @param roleDefId The id of the role definition in the role assignment\n     *\n     */\n    public remove(principalId: number, roleDefId: number): Promise<void> {\n        return this.clone(RoleAssignments, `removeroleassignment(principalid=${principalId}, roledefid=${roleDefId})`).postCore();\n    }\n\n    /**\n     * Gets the role assignment associated with the specified principal id from the collection.\n     *\n     * @param id The id of the role assignment\n     */\n    public getById(id: number) {\n        const ra = new RoleAssignment(this);\n        ra.concat(`(${id})`);\n        return ra;\n    }\n}\n\n/**\n * Describes a role assignment\n *\n */\nexport class RoleAssignment extends SharePointQueryableInstance {\n\n    /**\n     * Gets the groups that directly belong to the access control list (ACL) for this securable object\n     *\n     */\n    public get groups(): SiteGroups {\n        return new SiteGroups(this, \"groups\");\n    }\n\n    /**\n     * Gets the role definition bindings for this role assignment\n     *\n     */\n    public get bindings(): RoleDefinitionBindings {\n        return new RoleDefinitionBindings(this);\n    }\n\n    /**\n     * Deletes this role assignment\n     *\n     */\n    public delete(): Promise<void> {\n        return this.postCore({\n            headers: {\n                \"X-HTTP-Method\": \"DELETE\",\n            },\n        });\n    }\n}\n\n/**\n * Describes a collection of role definitions\n *\n */\nexport class RoleDefinitions extends SharePointQueryableCollection {\n\n    /**\n     * Creates a new instance of the RoleDefinitions class\n     *\n     * @param baseUrl The url or SharePointQueryable which forms the parent of this role definitions collection\n     *\n     */\n    constructor(baseUrl: string | SharePointQueryable, path = \"roledefinitions\") {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Gets the role definition with the specified id from the collection\n     *\n     * @param id The id of the role definition\n     *\n     */\n    public getById(id: number): RoleDefinition {\n        return new RoleDefinition(this, `getById(${id})`);\n    }\n\n    /**\n     * Gets the role definition with the specified name\n     *\n     * @param name The name of the role definition\n     *\n     */\n    public getByName(name: string): RoleDefinition {\n        return new RoleDefinition(this, `getbyname('${name}')`);\n    }\n\n    /**\n     * Gets the role definition with the specified role type\n     *\n     * @param roleTypeKind The roletypekind of the role definition (None=0, Guest=1, Reader=2, Contributor=3, WebDesigner=4, Administrator=5, Editor=6, System=7)\n     *\n     */\n    public getByType(roleTypeKind: number): RoleDefinition {\n        return new RoleDefinition(this, `getbytype(${roleTypeKind})`);\n    }\n\n    /**\n     * Creates a role definition\n     *\n     * @param name The new role definition's name\n     * @param description The new role definition's description\n     * @param order The order in which the role definition appears\n     * @param basePermissions The permissions mask for this role definition\n     *\n     */\n    public add(name: string, description: string, order: number, basePermissions: BasePermissions): Promise<RoleDefinitionAddResult> {\n\n        const postBody = JSON.stringify({\n            BasePermissions: Util.extend({ __metadata: { type: \"SP.BasePermissions\" } }, basePermissions),\n            Description: description,\n            Name: name,\n            Order: order,\n            __metadata: { \"type\": \"SP.RoleDefinition\" },\n        });\n\n        return this.postCore({ body: postBody }).then((data) => {\n            return {\n                data: data,\n                definition: this.getById(data.Id),\n            };\n        });\n    }\n}\n\n/**\n * Describes a role definition\n *\n */\nexport class RoleDefinition extends SharePointQueryableInstance {\n\n    /**\n     * Updates this role definition with the supplied properties\n     *\n     * @param properties A plain object hash of values to update for the role definition\n     */\n    /* tslint:disable no-string-literal */\n    public update(properties: TypedHash<any>): Promise<RoleDefinitionUpdateResult> {\n\n        if (typeof properties.hasOwnProperty(\"BasePermissions\") !== \"undefined\") {\n            properties[\"BasePermissions\"] = Util.extend({ __metadata: { type: \"SP.BasePermissions\" } }, properties[\"BasePermissions\"]);\n        }\n\n        const postBody = JSON.stringify(Util.extend({\n            \"__metadata\": { \"type\": \"SP.RoleDefinition\" },\n        }, properties));\n\n        return this.postCore({\n            body: postBody,\n            headers: {\n                \"X-HTTP-Method\": \"MERGE\",\n            },\n        }).then((data) => {\n\n            let retDef: RoleDefinition = this;\n\n            if (properties.hasOwnProperty(\"Name\")) {\n                const parent = this.getParent(RoleDefinitions, this.parentUrl, \"\");\n                retDef = parent.getByName(<string>properties[\"Name\"]);\n            }\n\n            return {\n                data: data,\n                definition: retDef,\n            };\n        });\n    }\n    /* tslint:enable */\n\n    /**\n     * Deletes this role definition\n     *\n     */\n    public delete(): Promise<void> {\n        return this.postCore({\n            headers: {\n                \"X-HTTP-Method\": \"DELETE\",\n            },\n        });\n    }\n}\n\n/**\n * Result from updating a role definition\n *\n */\nexport interface RoleDefinitionUpdateResult {\n    definition: RoleDefinition;\n    data: any;\n}\n\n/**\n * Result from adding a role definition\n *\n */\nexport interface RoleDefinitionAddResult {\n    definition: RoleDefinition;\n    data: any;\n}\n\n/**\n * Describes the role definitons bound to a role assignment object\n *\n */\nexport class RoleDefinitionBindings extends SharePointQueryableCollection {\n\n    /**\n     * Creates a new instance of the RoleDefinitionBindings class\n     *\n     * @param baseUrl The url or SharePointQueryable which forms the parent of this role definition bindings collection\n     */\n    constructor(baseUrl: string | SharePointQueryable, path = \"roledefinitionbindings\") {\n        super(baseUrl, path);\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ../../../../packages/sp/src/roles.ts","// reference: https://msdn.microsoft.com/en-us/library/office/dn600183.aspx\nimport { TypedHash } from \"@pnp/common\";\n\n/**\n * Represents the unique sequential location of a change within the change log.\n */\nexport interface ChangeToken {\n    /**\n     * Gets or sets a string value that contains the serialized representation of the change token generated by the protocol server.\n     */\n    StringValue: string;\n}\n\n/**\n * Defines a query that is performed against the change log.\n */\nexport interface ChangeQuery {\n    /**\n     * Gets or sets a value that specifies whether add changes are included in the query.\n     */\n    Add?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether changes to alerts are included in the query.\n     */\n    Alert?: boolean;\n\n    /**\n     * Gets or sets a value that specifies the end date and end time for changes that are returned through the query.\n     */\n    ChangeTokenEnd?: ChangeToken;\n\n    /**\n     * Gets or sets a value that specifies the start date and start time for changes that are returned through the query.\n     */\n    ChangeTokenStart?: ChangeToken;\n\n    /**\n     * Gets or sets a value that specifies whether changes to content types are included in the query.\n     */\n    ContentType?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether deleted objects are included in the query.\n     */\n    DeleteObject?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether changes to fields are included in the query.\n     */\n    Field?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether changes to files are included in the query.\n     */\n    File?: boolean;\n\n    /**\n     * Gets or sets value that specifies whether changes to folders are included in the query.\n     */\n    Folder?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether changes to groups are included in the query.\n     */\n    Group?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether adding users to groups is included in the query.\n     */\n    GroupMembershipAdd?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether deleting users from the groups is included in the query.\n     */\n    GroupMembershipDelete?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether general changes to list items are included in the query.\n     */\n    Item?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether changes to lists are included in the query.\n     */\n    List?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether move changes are included in the query.\n     */\n    Move?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether changes to the navigation structure of a site collection are included in the query.\n     */\n    Navigation?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether renaming changes are included in the query.\n     */\n    Rename?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether restoring items from the recycle bin or from backups is included in the query.\n     */\n    Restore?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether adding role assignments is included in the query.\n     */\n    RoleAssignmentAdd?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether adding role assignments is included in the query.\n     */\n    RoleAssignmentDelete?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether adding role assignments is included in the query.\n     */\n    RoleDefinitionAdd?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether adding role assignments is included in the query.\n     */\n    RoleDefinitionDelete?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether adding role assignments is included in the query.\n     */\n    RoleDefinitionUpdate?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether modifications to security policies are included in the query.\n     */\n    SecurityPolicy?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether changes to site collections are included in the query.\n     */\n    Site?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether updates made using the item SystemUpdate method are included in the query.\n     */\n    SystemUpdate?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether update changes are included in the query.\n     */\n    Update?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether changes to users are included in the query.\n     */\n    User?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether changes to views are included in the query.\n     */\n    View?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether changes to Web sites are included in the query.\n     */\n    Web?: boolean;\n}\n\n/**\n * Specifies a Collaborative Application Markup Language (CAML) query on a list or joined lists.\n */\nexport interface CamlQuery {\n\n    /**\n     * Gets or sets a value that indicates whether the query returns dates in Coordinated Universal Time (UTC) format.\n     */\n    DatesInUtc?: boolean;\n\n    /**\n     * Gets or sets a value that specifies the server relative URL of a list folder from which results will be returned.\n     */\n    FolderServerRelativeUrl?: string;\n\n    /**\n     * Gets or sets a value that specifies the information required to get the next page of data for the list view.\n     */\n    ListItemCollectionPosition?: ListItemCollectionPosition;\n\n    /**\n     * Gets or sets value that specifies the XML schema that defines the list view.\n     */\n    ViewXml?: string;\n}\n\n/**\n * Specifies the information required to get the next page of data for a list view.\n */\nexport interface ListItemCollectionPosition {\n    /**\n     * Gets or sets a value that specifies information, as name-value pairs, required to get the next page of data for a list view.\n     */\n    PagingInfo: string;\n}\n\n/**\n * Represents the input parameter of the GetListItemChangesSinceToken method.\n */\nexport interface ChangeLogitemQuery {\n    /**\n     * The change token for the request.\n     */\n    ChangeToken?: string;\n\n    /**\n     * The XML element that defines custom filtering for the query.\n     */\n    Contains?: string;\n\n    /**\n     * The records from the list to return and their return order.\n     */\n    Query?: string;\n\n    /**\n     * The options for modifying the query.\n     */\n    QueryOptions?: string;\n\n    /**\n     * RowLimit\n     */\n    RowLimit?: string;\n\n    /**\n     * The names of the fields to include in the query result.\n     */\n    ViewFields?: string;\n\n    /**\n     * The GUID of the view.\n     */\n    ViewName?: string;\n}\n\n/**\n * Determines the display mode of the given control or view\n */\nexport enum ControlMode {\n    Display = 1,\n    Edit = 2,\n    New = 3,\n}\n\n/**\n * Represents properties of a list item field and its value.\n */\nexport interface ListItemFormUpdateValue {\n\n    /**\n     * The error message result after validating the value for the field.\n     */\n    ErrorMessage?: string;\n\n    /**\n     * The internal name of the field.\n     */\n    FieldName?: string;\n\n    /**\n     * The value of the field, in string format.\n     */\n    FieldValue?: string;\n\n    /**\n     * Indicates whether there was an error result after validating the value for the field.\n     */\n    HasException?: boolean;\n}\n\n/**\n * Specifies the type of the field.\n */\nexport enum FieldTypes {\n    Invalid = 0,\n    Integer = 1,\n    Text = 2,\n    Note = 3,\n    DateTime = 4,\n    Counter = 5,\n    Choice = 6,\n    Lookup = 7,\n    Boolean = 8,\n    Number = 9,\n    Currency = 10,\n    URL = 11,\n    Computed = 12,\n    Threading = 13,\n    Guid = 14,\n    MultiChoice = 15,\n    GridChoice = 16,\n    Calculated = 17,\n    File = 18,\n    Attachments = 19,\n    User = 20,\n    Recurrence = 21,\n    CrossProjectLink = 22,\n    ModStat = 23,\n    Error = 24,\n    ContentTypeId = 25,\n    PageSeparator = 26,\n    ThreadIndex = 27,\n    WorkflowStatus = 28,\n    AllDayEvent = 29,\n    WorkflowEventType = 30,\n}\n\nexport enum DateTimeFieldFormatType {\n    DateOnly = 0,\n    DateTime = 1,\n}\n\n/**\n * Specifies the control settings while adding a field.\n */\nexport enum AddFieldOptions {\n    /**\n     *  Specify that a new field added to the list must also be added to the default content type in the site collection\n     */\n    DefaultValue = 0,\n    /**\n     * Specify that a new field added to the list must also be added to the default content type in the site collection.\n     */\n    AddToDefaultContentType = 1,\n    /**\n     * Specify that a new field must not be added to any other content type\n     */\n    AddToNoContentType = 2,\n    /**\n     *  Specify that a new field that is added to the specified list must also be added to all content types in the site collection\n     */\n    AddToAllContentTypes = 4,\n    /**\n     * Specify adding an internal field name hint for the purpose of avoiding possible database locking or field renaming operations\n     */\n    AddFieldInternalNameHint = 8,\n    /**\n     * Specify that a new field that is added to the specified list must also be added to the default list view\n     */\n    AddFieldToDefaultView = 16,\n    /**\n     * Specify to confirm that no other field has the same display name\n     */\n    AddFieldCheckDisplayName = 32,\n}\n\nexport interface XmlSchemaFieldCreationInformation {\n    Options?: AddFieldOptions;\n    SchemaXml: string;\n}\n\nexport enum CalendarType {\n    Gregorian = 1,\n    Japan = 3,\n    Taiwan = 4,\n    Korea = 5,\n    Hijri = 6,\n    Thai = 7,\n    Hebrew = 8,\n    GregorianMEFrench = 9,\n    GregorianArabic = 10,\n    GregorianXLITEnglish = 11,\n    GregorianXLITFrench = 12,\n    KoreaJapanLunar = 14,\n    ChineseLunar = 15,\n    SakaEra = 16,\n    UmAlQura = 23,\n}\n\nexport enum UrlFieldFormatType {\n    Hyperlink = 0,\n    Image = 1,\n}\n\nexport interface BasePermissions {\n    Low: number;\n    High: number;\n}\n\nexport enum PermissionKind {\n\n    /**\n     * Has no permissions on the Site. Not available through the user interface.\n     */\n    EmptyMask = 0,\n\n    /**\n     * View items in lists, documents in document libraries, and Web discussion comments.\n     */\n    ViewListItems = 1,\n\n    /**\n     * Add items to lists, documents to document libraries, and Web discussion comments.\n     */\n    AddListItems = 2,\n\n    /**\n     * Edit items in lists, edit documents in document libraries, edit Web discussion comments\n     * in documents, and customize Web Part Pages in document libraries.\n     */\n    EditListItems = 3,\n\n    /**\n     * Delete items from a list, documents from a document library, and Web discussion\n     * comments in documents.\n     */\n    DeleteListItems = 4,\n\n    /**\n     * Approve a minor version of a list item or document.\n     */\n    ApproveItems = 5,\n\n    /**\n     * View the source of documents with server-side file handlers.\n     */\n    OpenItems = 6,\n\n    /**\n     * View past versions of a list item or document.\n     */\n    ViewVersions = 7,\n\n    /**\n     * Delete past versions of a list item or document.\n     */\n    DeleteVersions = 8,\n\n    /**\n     * Discard or check in a document which is checked out to another user.\n     */\n    CancelCheckout = 9,\n\n    /**\n     * Create, change, and delete personal views of lists.\n     */\n    ManagePersonalViews = 10,\n\n    /**\n     * Create and delete lists, add or remove columns in a list, and add or remove public views of a list.\n     */\n    ManageLists = 12,\n\n    /**\n     * View forms, views, and application pages, and enumerate lists.\n     */\n    ViewFormPages = 13,\n\n    /**\n     * Make content of a list or document library retrieveable for anonymous users through SharePoint search.\n     * The list permissions in the site do not change.\n     */\n    AnonymousSearchAccessList = 14,\n\n    /**\n     * Allow users to open a Site, list, or folder to access items inside that container.\n     */\n    Open = 17,\n\n    /**\n     * View pages in a Site.\n     */\n    ViewPages = 18,\n\n    /**\n     * Add, change, or delete HTML pages or Web Part Pages, and edit the Site using\n     * a Windows SharePoint Services compatible editor.\n     */\n    AddAndCustomizePages = 19,\n\n    /**\n     * Apply a theme or borders to the entire Site.\n     */\n    ApplyThemeAndBorder = 20,\n\n    /**\n     * Apply a style sheet (.css file) to the Site.\n     */\n    ApplyStyleSheets = 21,\n\n    /**\n     * View reports on Site usage.\n     */\n    ViewUsageData = 22,\n\n    /**\n     * Create a Site using Self-Service Site Creation.\n     */\n    CreateSSCSite = 23,\n\n    /**\n     * Create subsites such as team sites, Meeting Workspace sites, and Document Workspace sites.\n     */\n    ManageSubwebs = 24,\n\n    /**\n     * Create a group of users that can be used anywhere within the site collection.\n     */\n    CreateGroups = 25,\n\n    /**\n     * Create and change permission levels on the Site and assign permissions to users\n     * and groups.\n     */\n    ManagePermissions = 26,\n\n    /**\n     * Enumerate files and folders in a Site using Microsoft Office SharePoint Designer\n     * and WebDAV interfaces.\n     */\n    BrowseDirectories = 27,\n\n    /**\n     * View information about users of the Site.\n     */\n    BrowseUserInfo = 28,\n\n    /**\n     * Add or remove personal Web Parts on a Web Part Page.\n     */\n    AddDelPrivateWebParts = 29,\n\n    /**\n     * Update Web Parts to display personalized information.\n     */\n    UpdatePersonalWebParts = 30,\n\n    /**\n     * Grant the ability to perform all administration tasks for the Site as well as\n     * manage content, activate, deactivate, or edit properties of Site scoped Features\n     * through the object model or through the user interface (UI). When granted on the\n     * root Site of a Site Collection, activate, deactivate, or edit properties of\n     * site collection scoped Features through the object model. To browse to the Site\n     * Collection Features page and activate or deactivate Site Collection scoped Features\n     * through the UI, you must be a Site Collection administrator.\n     */\n    ManageWeb = 31,\n\n    /**\n     * Content of lists and document libraries in the Web site will be retrieveable for anonymous users through\n     * SharePoint search if the list or document library has AnonymousSearchAccessList set.\n     */\n    AnonymousSearchAccessWebLists = 32,\n\n    /**\n     * Use features that launch client applications. Otherwise, users must work on documents\n     * locally and upload changes.\n     */\n    UseClientIntegration = 37,\n\n    /**\n     * Use SOAP, WebDAV, or Microsoft Office SharePoint Designer interfaces to access the Site.\n     */\n    UseRemoteAPIs = 38,\n\n    /**\n     * Manage alerts for all users of the Site.\n     */\n    ManageAlerts = 39,\n\n    /**\n     * Create e-mail alerts.\n     */\n    CreateAlerts = 40,\n\n    /**\n     * Allows a user to change his or her user information, such as adding a picture.\n     */\n    EditMyUserInfo = 41,\n\n    /**\n     * Enumerate permissions on Site, list, folder, document, or list item.\n     */\n    EnumeratePermissions = 63,\n\n    /**\n     * Has all permissions on the Site. Not available through the user interface.\n     */\n    FullMask = 65,\n}\n\nexport interface FollowedContent {\n    FollowedDocumentsUrl: string;\n    FollowedSitesUrl: string;\n}\n\nexport interface UserProfile {\n    /**\n     * An object containing the user's FollowedDocumentsUrl and FollowedSitesUrl.\n     */\n    FollowedContent?: FollowedContent;\n    /**\n     * The account name of the user. (SharePoint Online only)\n     */\n    AccountName?: string;\n    /**\n     * The display name of the user. (SharePoint Online only)\n     */\n    DisplayName?: string;\n    /**\n     * The FirstRun flag of the user. (SharePoint Online only)\n     */\n    O15FirstRunExperience?: number;\n    /**\n     * The personal site of the user.\n     */\n    PersonalSite?: string;\n    /**\n     * The capabilities of the user's personal site. Represents a bitwise PersonalSiteCapabilities value:\n     * None = 0; Profile Value = 1; Social Value = 2; Storage Value = 4; MyTasksDashboard Value = 8; Education Value = 16; Guest Value = 32.\n     */\n    PersonalSiteCapabilities?: number;\n    /**\n     * The error thrown when the user's personal site was first created, if any. (SharePoint Online only)\n     */\n    PersonalSiteFirstCreationError?: string;\n    /**\n     * The date and time when the user's personal site was first created. (SharePoint Online only)\n     */\n    PersonalSiteFirstCreationTime?: Date;\n    /**\n     * The status for the state of the personal site instantiation\n     */\n    PersonalSiteInstantiationState?: number;\n    /**\n     * The date and time when the user's personal site was last created. (SharePoint Online only)\n     */\n    PersonalSiteLastCreationTime?: Date;\n    /**\n     * The number of attempts made to create the user's personal site. (SharePoint Online only)\n     */\n    PersonalSiteNumberOfRetries?: number;\n    /**\n     * Indicates whether the user's picture is imported from Exchange.\n     */\n    PictureImportEnabled?: boolean;\n    /**\n     * The public URL of the personal site of the current user. (SharePoint Online only)\n     */\n    PublicUrl?: string;\n    /**\n     * The URL used to create the user's personal site.\n     */\n    UrlToCreatePersonalSite?: string;\n}\n\nexport interface HashTag {\n    /**\n     * The hash tag's internal name.\n     */\n    Name?: string;\n    /**\n     * The number of times that the hash tag is used.\n     */\n    UseCount?: number;\n}\n\nexport interface HashTagCollection {\n    Items: HashTag[];\n}\n\nexport interface UserIdInfo {\n    NameId?: string;\n    NameIdIssuer?: string;\n}\n\nexport enum PrincipalType {\n    None = 0,\n    User = 1,\n    DistributionList = 2,\n    SecurityGroup = 4,\n    SharePointGroup = 8,\n    All = 15,\n}\n\nexport enum PrincipalSource {\n    None = 0,\n    UserInfoList = 1,\n    Windows = 2,\n    MembershipProvider = 4,\n    RoleProvider = 8,\n    All = 15,\n}\n\nexport enum RoleType {\n    None = 0,\n    Guest = 1,\n    Reader = 2,\n    Contributor = 3,\n    WebDesigner = 4,\n    Administrator = 5,\n}\n\nexport interface PrincipalInfo {\n    Department: string;\n    DisplayName: string;\n    Email: string;\n    JobTitle: string;\n    LoginName: string;\n    Mobile: string;\n    PrincipalId: number;\n    PrincipalType: PrincipalType;\n    SIPAddress: string;\n}\n\nexport interface DocumentLibraryInformation {\n    AbsoluteUrl?: string;\n    Modified?: Date;\n    ModifiedFriendlyDisplay?: string;\n    ServerRelativeUrl?: string;\n    Title?: string;\n}\n\nexport interface ContextInfo {\n    FormDigestTimeoutSeconds?: number;\n    FormDigestValue?: number;\n    LibraryVersion?: string;\n    SiteFullUrl?: string;\n    SupportedSchemaVersions?: string[];\n    WebFullUrl?: string;\n}\n\nexport interface RenderListData {\n    Row: any[];\n    FirstRow: number;\n    FolderPermissions: string;\n    LastRow: number;\n    FilterLink: string;\n    ForceNoHierarchy: string;\n    HierarchyHasIndention: string;\n}\n\nexport enum PageType {\n    Invalid = -1,\n    DefaultView,\n    NormalView,\n    DialogView,\n    View,\n    DisplayForm,\n    DisplayFormDialog,\n    EditForm,\n    EditFormDialog,\n    NewForm,\n    NewFormDialog,\n    SolutionForm,\n    PAGE_MAXITEMS,\n}\n\nexport interface ListFormData {\n    ContentType?: string;\n    Title?: string;\n    Author?: string;\n    Editor?: string;\n    Created?: Date;\n    Modified: Date;\n    Attachments?: any;\n    ListSchema?: any;\n    FormControlMode?: number;\n    FieldControlModes?: {\n        Title?: number,\n        Author?: number,\n        Editor?: number,\n        Created?: number,\n        Modified?: number,\n        Attachments?: number,\n    };\n    WebAttributes?: {\n        WebUrl?: string,\n        EffectivePresenceEnabled?: boolean,\n        AllowScriptableWebParts?: boolean,\n        PermissionCustomizePages?: boolean,\n        LCID?: number,\n        CurrentUserId?: number,\n    };\n    ItemAttributes?: {\n        Id?: number,\n        FsObjType?: number,\n        ExternalListItem?: boolean,\n        Url?: string,\n        EffectiveBasePermissionsLow?: number,\n        EffectiveBasePermissionsHigh?: number,\n    };\n    ListAttributes?: {\n        Id?: string,\n        BaseType?: number,\n        Direction?: string,\n        ListTemplateType?: number,\n        DefaultItemOpen?: number,\n        EnableVersioning?: boolean,\n    };\n    CSRCustomLayout?: boolean;\n    PostBackRequired?: boolean;\n    PreviousPostBackHandled?: boolean;\n    UploadMode?: boolean;\n    SubmitButtonID?: string;\n    ItemContentTypeName?: string;\n    ItemContentTypeId?: string;\n    JSLinks?: string;\n}\n\nexport enum SharingLinkKind {\n    /**\n     * Uninitialized link\n     */\n    Uninitialized = 0,\n    /**\n     * Direct link to the object being shared\n     */\n    Direct = 1,\n    /**\n     * Organization-shareable link to the object being shared with view permissions\n     */\n    OrganizationView = 2,\n    /**\n     * Organization-shareable link to the object being shared with edit permissions\n     */\n    OrganizationEdit = 3,\n    /**\n     * View only anonymous link\n     */\n    AnonymousView = 4,\n    /**\n     * Read/Write anonymous link\n     */\n    AnonymousEdit = 5,\n    /**\n     * Flexible sharing Link where properties can change without affecting link URL\n     */\n    Flexible = 6,\n}\n\nexport interface ShareObjectOptions {\n    url?: string;\n    loginNames?: string | string[];\n    role: SharingRole;\n    emailData?: SharingEmailData;\n    group?: RoleType;\n    propagateAcl?: boolean;\n    includeAnonymousLinkInEmail?: boolean;\n    useSimplifiedRoles?: boolean;\n}\n\n/**\n * Indicates the role of the sharing link\n */\nexport enum SharingRole {\n    None = 0,\n    View = 1,\n    Edit = 2,\n    Owner = 3,\n}\n\n/**\n * Represents email data.\n */\nexport interface SharingEmailData {\n\n    /**\n     * The e-mail subject.\n     */\n    subject?: string;\n\n    /**\n     * The e-mail body.\n     */\n    body: string;\n}\n\nexport interface ShareLinkSettings {\n    /**\n     * The optional unique identifier of an existing sharing link to be retrieved and updated if necessary.\n     */\n    shareId?: string;\n\n    /**\n     * The kind of the sharing link to be created.\n     */\n    linkKind: SharingLinkKind;\n\n    /**\n     * A date/time string for which the format conforms to the ISO 8601:2004(E) complete representation for calendar date and time of day and\n     * which represents the time and date of expiry for the anonymous link. Both the minutes and hour value must be specified for the\n     * difference between the local and UTC time. Midnight is represented as 00:00:00.\n     */\n    expiration?: string;\n\n    /**\n     * The role to be used for the sharing link. This is required for Flexible links, and ignored for legacy link kinds.\n     */\n    role?: SharingRole;\n\n    /**\n     * Indicates if the sharing link, should support anonymous access. This is required for Flexible links, and ignored for legacy link kinds.\n     */\n    allowAnonymousAccess?: boolean;\n}\n\nexport interface ShareLinkRequest {\n\n    /**\n     * A string of JSON representing users in people picker format. Only needed if an e-mail notification should be sent.\n     */\n    peoplePickerInput?: string;\n\n    /**\n     * Whether to create the link or not if it doesn't exist yet.\n     */\n    createLink: boolean;\n\n    /**\n     * The e-mail data. Only needed if an e-mail notification should be sent.\n     */\n    emailData?: SharingEmailData;\n\n    /**\n     * The settings for the sharing link to be created/updated\n     */\n    settings: ShareLinkSettings;\n}\n\n/**\n * Represents a response for sharing a link\n */\nexport interface ShareLinkResponse {\n    /**\n     * A SharingLinkInfo that represents the sharing link. Will be populated if sharing operation is returning a sharing link.\n     */\n    sharingLinkInfo: SharingLinkInfo;\n}\n\nexport interface SharingLinkInfo {\n\n    AllowsAnonymousAccess: boolean;\n    Created: string;\n    CreatedBy: PrincipalInfo;\n    Expiration: string;\n    IsActive: boolean;\n    IsEditLink: boolean;\n    IsFormsLink: boolean;\n    IsUnhealthy: boolean;\n    LastModified: string;\n    LastModifiedBy: PrincipalInfo;\n    LinkKind: SharingLinkKind;\n    ShareId: string;\n    Url: string;\n}\n\nexport enum SharingOperationStatusCode {\n    /**\n     * The share operation completed without errors.\n     */\n    CompletedSuccessfully = 0,\n    /**\n     * The share operation completed and generated requests for access.\n     */\n    AccessRequestsQueued = 1,\n    /**\n     * The share operation failed as there were no resolved users.\n     */\n    NoResolvedUsers = -1,\n    /**\n     * The share operation failed due to insufficient permissions.\n     */\n    AccessDenied = -2,\n    /**\n     * The share operation failed when attempting a cross site share, which is not supported.\n     */\n    CrossSiteRequestNotSupported = -3,\n    /**\n     * The sharing operation failed due to an unknown error.\n     */\n    UnknowError = -4,\n    /**\n     * The text you typed is too long. Please shorten it.\n     */\n    EmailBodyTooLong = -5,\n    /**\n     * The maximum number of unique scopes in the list has been exceeded.\n     */\n    ListUniqueScopesExceeded = -6,\n    /**\n     * The share operation failed because a sharing capability is disabled in the site.\n     */\n    CapabilityDisabled = -7,\n    /**\n     * The specified object for the share operation is not supported.\n     */\n    ObjectNotSupported = -8,\n    /**\n     * A SharePoint group cannot contain another SharePoint group.\n     */\n    NestedGroupsNotSupported = -9,\n}\n\nexport interface SharingResult {\n\n    /**\n     * The relative URL of a page which can be navigated to, to show permissions.\n     */\n    PermissionsPageRelativeUrl?: string;\n\n    /**\n     * A collection of users which have new pending access requests as a result of sharing.\n     */\n    UsersWithAccessRequests?: any[]; // SPSharingUserCollection\n\n    /**\n     * An enumeration which summarizes the result of the sharing operation.\n     */\n    StatusCode?: SharingOperationStatusCode;\n\n    /**\n     * An error message about the failure if sharing was unsuccessful.\n     */\n    ErrorMessage?: string;\n\n    /**\n     * A list of UserSharingResults from attempting to share a securable with unique permissions.\n     */\n    UniquelyPermissionedUsers?: UserSharingResult[];\n    /**\n     * Groups which were granted permissions.\n     */\n    GroupsSharedWith?: any[]; // SPGroupCollection\n\n    /**\n     * The SharePoint group users were added to, if any were added to a group.\n     */\n    GroupUsersAddedTo?: any; // SPGroup\n\n    /**\n     * A list of users being added to a SharePoint permissions goup\n     */\n    UsersAddedToGroup?: UserSharingResult[];\n\n    /**\n     * A list of SPInvitationCreationResult for external users being invited to have access.\n     */\n    InvitedUsers?: SPInvitationCreationResult[];\n\n    /**\n     * The name of the securable being shared.\n     */\n    Name?: string;\n\n    /**\n     * The url of the securable being shared.\n     */\n    Url?: string;\n\n    /**\n     * IconUrl\n     */\n    IconUrl?: string;\n}\n\nexport interface UserSharingResult {\n    IsUserKnown?: boolean;\n    Status?: boolean;\n    Message?: string;\n    User?: string;\n    DisplayName?: string;\n    Email?: string;\n    CurrentRole?: SharingRole;\n    AllowedRoles?: SharingRole[];\n    InvitationLink?: string;\n}\n\nexport interface SPInvitationCreationResult {\n    Succeeded?: boolean;\n    Email?: string;\n    InvitationLink?: string;\n}\n\nexport interface SharingRecipient {\n    email?: string;\n    alias?: string;\n}\n\nexport interface SharingEntityPermission {\n    /**\n     * The Input Entity provided to the Call.\n     */\n    inputEntity: string;\n    /**\n     * The Resolved Entity after resolving using PeoplePicker API.\n     */\n    resolvedEntity: string;\n    /**\n     * Does the Entity have Access to the Securable Object\n     */\n    hasAccess: boolean;\n    /**\n     * Role of the Entity on ListItem\n     */\n    role: SharingRole;\n}\n\nexport interface SharingInformationRequest {\n    /**\n     * Max Principal's to return.\n     */\n    maxPrincipalsToReturn: number;\n    /**\n     * Supported Features (For future use by Office Client).\n     */\n    clientSupportedFeatures: string;\n}\n\nexport interface ObjectSharingSettings {\n    /**\n     * The URL pointing to the containing SPWeb object\n     */\n    WebUrl: string;\n    /**\n     * The unique ID of the parent list (if applicable)\n     */\n    ListId?: string;\n    /**\n     * The list item ID (if applicable)\n     */\n    ItemId?: string;\n    /**\n     * The object title\n     */\n    ItemName: string;\n    /**\n     * The server relative object URL\n     */\n    ItemUrl: string;\n    /**\n     * Contains information about the sharing state of a shareable object\n     */\n    ObjectSharingInformation: any; // SPObjectSharingInformation\n    /**\n     * Boolean indicating whether the sharing context operates under the access request mode\n     */\n    AccessRequestMode: boolean;\n    /**\n     * Boolean indicating whether the sharing context operates under the permissions only mode\n     * (i.e. adding to a group or hiding the groups dropdown in the SharePoint UI)\n     */\n    PermissionsOnlyMode: boolean;\n    /**\n     * URL of the site from which the shared object inherits permissions\n     */\n    InheritingWebLink: string;\n    /**\n     * Boolean flag denoting if guest users are enabled for the site collection\n     */\n    ShareByEmailEnabled: boolean;\n    /**\n     * Boolean indicating whether the current user is a guest user\n     */\n    IsGuestUser: boolean;\n    /**\n     * Boolean indicating whether the site has the standard \"Editor\" role\n     */\n    HasEditRole: boolean;\n    /**\n     * Boolean indicating whether the site has the standard \"Reader\" role\n     */\n    HasReadRole: boolean;\n    /**\n     * Boolean indicating whether the object to share is a picture library\n     */\n    IsPictureLibrary: boolean;\n    /**\n     * Boolean indicating whether the folder object can be shared\n     */\n    CanShareFolder: boolean;\n    /**\n     * Boolean indicating whether email invitations can be sent\n     */\n    CanSendEmail: boolean;\n    /**\n     * Default share link type\n     */\n    DefaultShareLinkType: SharingLinkKind;\n    /**\n     * Boolean indicating whether the object to share supports ACL propagation\n     */\n    SupportsAclPropagation: boolean;\n    /**\n     * Boolean indicating whether the current user can only share within the tenancy\n     */\n    CanCurrentUserShareInternally: boolean;\n    /**\n     * Boolean indicating whether the current user can share outside the tenancy, by inviting external users\n     */\n    CanCurrentUserShareExternally: boolean;\n    /**\n     * Boolean indicating whether the current user can retrieve an anonymous View link, if one has already been created\n     * If one has not been created, the user cannot create one\n     */\n    CanCurrentUserRetrieveReadonlyLink: boolean;\n    /**\n     * Boolean indicating whether the current user can create or disable an anonymous Edit link\n     */\n    CanCurrentUserManageReadonlyLink: boolean;\n    /**\n     * Boolean indicating whether the current user can retrieve an anonymous Edit link, if one has already been created\n     * If one has not been created, the user cannot create one\n     */\n    CanCurrentUserRetrieveReadWriteLink: boolean;\n    /**\n     * Boolean indicating whether the current user can create or disable an anonymous Edit link\n     */\n    CanCurrentUserManageReadWriteLink: boolean;\n    /**\n     * Boolean indicating whether the current user can retrieve an organization View link, if one has already been created\n     * If one has not been created, the user cannot create one\n     */\n    CanCurrentUserRetrieveOrganizationReadonlyLink: boolean;\n    /**\n     * Boolean indicating whether the current user can create or disable an organization Edit link\n     */\n    CanCurrentUserManageOrganizationReadonlyLink: boolean;\n    /**\n     * Boolean indicating whether the current user can retrieve an organization Edit link, if one has already been created\n     * If one has not been created, the user cannot create one\n     */\n    CanCurrentUserRetrieveOrganizationReadWriteLink: boolean;\n    /**\n     * Boolean indicating whether the current user can create or disable an organization Edit link\n     */\n    CanCurrentUserManageOrganizationReadWriteLink: boolean;\n    /**\n     * Boolean indicating whether the current user can make use of Share-By-Link\n     */\n    CanSendLink: boolean;\n    /**\n     * Boolean indicating whether the client logic should warn the user\n     * that they are about to share with external email addresses.\n     */\n    ShowExternalSharingWarning: boolean;\n    /**\n     * A list of SharingPermissionInformation objects that can be used to share\n     */\n    SharingPermissions: any[]; // SPSharingPermissionInformationCollection\n    /**\n     * A dictionary object that lists the display name and the id of\n     * the SharePoint simplified roles (edit, view)\n     */\n    SimplifiedRoles: { [key: string]: string };\n    /**\n     * A dictionary object that lists the display name and the id of the SharePoint groups\n     */\n    GroupsList: { [key: string]: string };\n    /**\n     * A dictionary object that lists the display name and the id of the SharePoint regular roles\n     */\n    Roles: { [key: string]: string };\n    /**\n     * An object containing the SharePoint UI specific sharing settings.\n     */\n    SharePointSettings: any; // SharePointSharingSettings\n    /**\n     * Boolean indicating whether the current user is a site collection administrator\n     */\n    IsUserSiteAdmin: boolean;\n    /**\n     * A value that indicates number of days an anonymous link can be valid before it expires\n     */\n    RequiredAnonymousLinkExpirationInDays: number;\n}\n\nexport interface SharingInformation {\n    /**\n     * External Sharing.\n     */\n    canAddExternalPrincipal?: boolean;\n    /**\n     * Internal Sharing.\n     */\n    canAddInternalPrincipal?: boolean;\n    /**\n     * Can Send Email.\n     */\n    canSendEmail?: boolean;\n    /**\n     * Can Use Simplified Roles present in Roles Enum.\n     */\n    canUseSimplifiedRoles?: boolean;\n    /**\n     * Has Unique Permissions.\n     */\n    hasUniquePermissions?: boolean;\n    /**\n     * Current Users Role on the Item.\n     */\n    currentRole?: SharingRole;\n    /**\n     * Does the User+Item require Approval from Admin for Sharing.\n     */\n    requiresAccessApproval?: boolean;\n    /**\n     * (Owners only)Whether there are pending access requests for the securable object.\n     */\n    hasPendingAccessRequests?: boolean;\n    /**\n     * (Owners only)The link to the access requests page for the securable object, or an empty string if the link is not available.\n     */\n    pendingAccessRequestsLink?: string;\n    /**\n     * sharedObjectType\n     */\n    sharedObjectType?: SPSharedObjectType;\n    /**\n     * Url for the Securable Object (Encoded).\n     */\n    directUrl?: string;\n    /**\n     * Parent Web Url for the Securable Object (Encoded).\n     */\n    webUrl?: string;\n    /**\n     * Default SharingLinkKind.\n     */\n    defaultLinkKind?: SharingLinkKind;\n    /**\n     * Tenant's SharingDomainRestrictionMode.\n     */\n    domainRestrictionMode?: SharingDomainRestrictionMode;\n    /**\n     * Tenant's RestrictedDomains.\n     */\n    RestrictedDomains?: string;\n    /**\n     * Tenant's Anonymous Link Expiration Restriction in Days.\n     */\n    anonymousLinkExpirationRestrictionDays?: number;\n    /**\n     * The PermissionCollection that are on the Securable Object (Princpals & Links)\n     */\n    permissionsInformation?: any; // PermissionCollection\n    /**\n     * PickerSettings used by the PeoplePicker Control.\n     */\n    pickerSettings?: any; // PickerSettings\n}\n\nexport enum SPSharedObjectType {\n    Unknown = 0,\n    File = 1,\n    Folder = 2,\n    Item = 3,\n    List = 4,\n    Web = 5,\n    Max = 6,\n}\n\nexport enum SharingDomainRestrictionMode {\n    None = 0,\n    AllowList = 1,\n    BlockList = 2,\n}\n\nexport interface EmailProperties {\n\n    To: string[];\n    CC?: string[];\n    BCC?: string[];\n    Subject: string;\n    Body: string;\n    AdditionalHeaders?: TypedHash<string>;\n    From?: string;\n}\n\nexport interface WikiPageCreationInformation {\n    /**\n     * The server-relative-url of the wiki page to be created.\n     */\n    ServerRelativeUrl: string;\n\n\n    /**\n     * The wiki content to be set in the wiki page.\n     */\n    WikiHtmlContent: string;\n}\n\nexport enum RenderListDataOptions {\n    None = 0,\n    ContextInfo = 1,\n    ListData = 2,\n    ListSchema = 4,\n    MenuView = 8,\n    ListContentType = 16,\n    FileSystemItemId = 32,\n    ClientFormSchema = 64,\n    QuickLaunch = 128,\n    Spotlight = 256,\n    Visualization = 512,\n    ViewMetadata = 1024,\n    DisableAutoHyperlink = 2048,\n    EnableMediaTAUrls = 4096,\n    ParentInfo = 8192,\n    PageContextInfo = 16384,\n    ClientSideComponentManifest = 32768,\n}\n\nexport interface RenderListDataParameters {\n    AllowMultipleValueFilterForTaxonomyFields?: boolean;\n    DatesInUtc?: boolean;\n    ExpandGroups?: boolean;\n    FirstGroupOnly?: boolean;\n    FolderServerRelativeUrl?: string;\n    ImageFieldsToTryRewriteToCdnUrls?: string;\n    OverrideViewXml?: string;\n    Paging?: string;\n    RenderOptions?: RenderListDataOptions;\n    ReplaceGroup?: boolean;\n    ViewXml?: string;\n}\n\nexport interface MenuNode {\n    CustomProperties: any[];\n    FriendlyUrlSegment: string;\n    IsDeleted: boolean;\n    IsHidden: boolean;\n    Key: string;\n    Nodes: MenuNode[];\n    NodeType: number;\n    SimpleUrl: string;\n    Title: string;\n}\n\nexport interface MenuNodeCollection {\n    FriendlyUrlPrefix: string;\n    Nodes: MenuNode[];\n    SimpleUrl: string;\n    SPSitePrefix: string;\n    SPWebPrefix: string;\n    StartingNodeKey: string;\n    StartingNodeTitle: string;\n    Version: Date;\n}\n\nexport enum FieldUserSelectionMode {\n    PeopleAndGroups = 1,\n    PeopleOnly = 0,\n}\n\nexport interface FieldCreationProperties extends TypedHash<string | number | boolean> {\n    DefaultFormula?: string;\n    Description?: string;\n    EnforceUniqueValues?: boolean;\n    FieldTypeKind?: number;\n    Group?: string;\n    Hidden?: boolean;\n    Indexed?: boolean;\n    Required?: boolean;\n    Title?: string;\n    ValidationFormula?: string;\n    ValidationMessage?: string;\n}\n\nexport enum ChoiceFieldFormatType {\n    Dropdown,\n    RadioButtons,\n}\n\n\n\n// WEBPACK FOOTER //\n// ../../../../packages/sp/src/types.ts","import { RoleAssignments } from \"./roles\";\nimport { BasePermissions, PermissionKind } from \"./types\";\nimport { SharePointQueryable, SharePointQueryableInstance } from \"./sharepointqueryable\";\n\nexport class SharePointQueryableSecurable extends SharePointQueryableInstance {\n\n    /**\n     * Gets the set of role assignments for this item\n     *\n     */\n    public get roleAssignments(): RoleAssignments {\n        return new RoleAssignments(this);\n    }\n\n    /**\n     * Gets the closest securable up the security hierarchy whose permissions are applied to this list item\n     *\n     */\n    public get firstUniqueAncestorSecurableObject(): SharePointQueryableInstance {\n        return new SharePointQueryableInstance(this, \"FirstUniqueAncestorSecurableObject\");\n    }\n\n    /**\n     * Gets the effective permissions for the user supplied\n     *\n     * @param loginName The claims username for the user (ex: i:0#.f|membership|user@domain.com)\n     */\n    public getUserEffectivePermissions(loginName: string): Promise<BasePermissions> {\n        const q = this.clone(SharePointQueryable, \"getUserEffectivePermissions(@user)\");\n        q.query.add(\"@user\", `'${encodeURIComponent(loginName)}'`);\n        return q.get().then(r => {\n            // handle verbose mode\n            return r.hasOwnProperty(\"GetUserEffectivePermissions\") ? r.GetUserEffectivePermissions : r;\n        });\n    }\n\n    /**\n     * Gets the effective permissions for the current user\n     */\n    public getCurrentUserEffectivePermissions(): Promise<BasePermissions> {\n\n        // remove need to reference Web here, which created a circular build issue\n        const w = new SharePointQueryableInstance(\"_api/web\", \"currentuser\");\n        return w.select(\"LoginName\").get<{ LoginName: string }>().then(user => {\n\n            return this.getUserEffectivePermissions(user.LoginName);\n        });\n    }\n\n    /**\n     * Breaks the security inheritance at this level optinally copying permissions and clearing subscopes\n     *\n     * @param copyRoleAssignments If true the permissions are copied from the current parent scope\n     * @param clearSubscopes Optional. true to make all child securable objects inherit role assignments from the current object\n     */\n    public breakRoleInheritance(copyRoleAssignments = false, clearSubscopes = false): Promise<any> {\n\n        return this.clone(SharePointQueryableSecurable, `breakroleinheritance(copyroleassignments=${copyRoleAssignments}, clearsubscopes=${clearSubscopes})`).postCore();\n    }\n\n    /**\n     * Removes the local role assignments so that it re-inherit role assignments from the parent object.\n     *\n     */\n    public resetRoleInheritance(): Promise<any> {\n\n        return this.clone(SharePointQueryableSecurable, \"resetroleinheritance\").postCore();\n    }\n\n    /**\n     * Determines if a given user has the appropriate permissions\n     *\n     * @param loginName The user to check\n     * @param permission The permission being checked\n     */\n    public userHasPermissions(loginName: string, permission: PermissionKind): Promise<boolean> {\n\n        return this.getUserEffectivePermissions(loginName).then(perms => {\n\n            return this.hasPermissions(perms, permission);\n        });\n    }\n\n    /**\n     * Determines if the current user has the requested permissions\n     *\n     * @param permission The permission we wish to check\n     */\n    public currentUserHasPermissions(permission: PermissionKind): Promise<boolean> {\n\n        return this.getCurrentUserEffectivePermissions().then(perms => {\n\n            return this.hasPermissions(perms, permission);\n        });\n    }\n\n    /**\n     * Taken from sp.js, checks the supplied permissions against the mask\n     *\n     * @param value The security principal's permissions on the given object\n     * @param perm The permission checked against the value\n     */\n    /* tslint:disable:no-bitwise */\n    public hasPermissions(value: BasePermissions, perm: PermissionKind): boolean {\n\n        if (!perm) {\n            return true;\n        }\n        if (perm === PermissionKind.FullMask) {\n            return (value.High & 32767) === 32767 && value.Low === 65535;\n        }\n\n        perm = perm - 1;\n        let num = 1;\n\n        if (perm >= 0 && perm < 32) {\n            num = num << perm;\n            return 0 !== (value.Low & num);\n        } else if (perm >= 32 && perm < 64) {\n            num = num << perm - 32;\n            return 0 !== (value.High & num);\n        }\n        return false;\n    }\n    /* tslint:enable */\n}\n\n\n\n// WEBPACK FOOTER //\n// ../../../../packages/sp/src/sharepointqueryablesecurable.ts","import { Util } from \"@pnp/common\";\nimport { spGetEntityUrl } from \"./odata\";\nimport {\n    SharePointQueryable,\n    SharePointQueryableInstance,\n    SharePointQueryableCollection,\n} from \"./sharepointqueryable\";\nimport { SharePointQueryableSecurable } from \"./sharepointqueryablesecurable\";\nimport {\n    RoleType,\n    SharingLinkKind,\n    ShareLinkResponse,\n    SharingRole,\n    SharingEmailData,\n    SharingResult,\n    SharingRecipient,\n    SharingEntityPermission,\n    SharingInformationRequest,\n    ObjectSharingSettings,\n    SharingInformation,\n    ShareObjectOptions,\n} from \"./types\";\nimport { extractWebUrl } from \"./utils/extractweburl\";\n\n/**\n * Internal helper class used to augment classes to include sharing functionality\n */\nexport class SharePointQueryableShareable extends SharePointQueryable {\n\n    /**\n     * Gets a sharing link for the supplied\n     *\n     * @param kind The kind of link to share\n     * @param expiration The optional expiration for this link\n     */\n    public getShareLink(kind: SharingLinkKind, expiration: Date = null): Promise<ShareLinkResponse> {\n\n        // date needs to be an ISO string or null\n        const expString = expiration !== null ? expiration.toISOString() : null;\n\n        // clone using the factory and send the request\n        return this.clone(SharePointQueryableShareable, \"shareLink\").postCore<ShareLinkResponse>({\n            body: JSON.stringify({\n                request: {\n                    createLink: true,\n                    emailData: null,\n                    settings: {\n                        expiration: expString,\n                        linkKind: kind,\n                    },\n                },\n            }),\n        });\n    }\n\n    /**\n     * Shares this instance with the supplied users\n     *\n     * @param loginNames Resolved login names to share\n     * @param role The role\n     * @param requireSignin True to require the user is authenticated, otherwise false\n     * @param propagateAcl True to apply this share to all children\n     * @param emailData If supplied an email will be sent with the indicated properties\n     */\n    public shareWith(loginNames: string | string[], role: SharingRole, requireSignin = false, propagateAcl = false, emailData?: SharingEmailData): Promise<SharingResult> {\n\n        // handle the multiple input types\n        if (!Array.isArray(loginNames)) {\n            loginNames = [loginNames];\n        }\n\n        const userStr = JSON.stringify(loginNames.map(login => { return { Key: login }; }));\n        const roleFilter = role === SharingRole.Edit ? RoleType.Contributor : RoleType.Reader;\n\n        // start by looking up the role definition id we need to set the roleValue\n        // remove need to reference Web here, which created a circular build issue\n        const w = new SharePointQueryableCollection(\"_api/web\", \"roledefinitions\");\n        return w.select(\"Id\").filter(`RoleTypeKind eq ${roleFilter}`).get().then((def: { Id: number }[]) => {\n\n            if (!Array.isArray(def) || def.length < 1) {\n                throw new Error(`Could not locate a role defintion with RoleTypeKind ${roleFilter}`);\n            }\n\n            let postBody = {\n                includeAnonymousLinkInEmail: requireSignin,\n                peoplePickerInput: userStr,\n                propagateAcl: propagateAcl,\n                roleValue: `role:${def[0].Id}`,\n                useSimplifiedRoles: true,\n            };\n\n            if (typeof emailData !== \"undefined\") {\n\n                postBody = Util.extend(postBody, {\n                    emailBody: emailData.body,\n                    emailSubject: typeof emailData.subject !== \"undefined\" ? emailData.subject : \"\",\n                    sendEmail: true,\n                });\n            }\n\n            return this.clone(SharePointQueryableShareable, \"shareObject\").postCore<SharingResult>({\n                body: JSON.stringify(postBody),\n            });\n        });\n    }\n\n    /**\n     * Shares an object based on the supplied options\n     *\n     * @param options The set of options to send to the ShareObject method\n     * @param bypass If true any processing is skipped and the options are sent directly to the ShareObject method\n     */\n    public shareObject(options: ShareObjectOptions, bypass = false): Promise<SharingResult> {\n\n        if (bypass) {\n\n            // if the bypass flag is set send the supplied parameters directly to the service\n            return this.sendShareObjectRequest(options);\n        }\n\n        // extend our options with some defaults\n        options = Util.extend(options, {\n            group: null,\n            includeAnonymousLinkInEmail: false,\n            propagateAcl: false,\n            useSimplifiedRoles: true,\n        }, true);\n\n        return this.getRoleValue(options.role, options.group).then(roleValue => {\n\n            // handle the multiple input types\n            if (!Array.isArray(options.loginNames)) {\n                options.loginNames = [options.loginNames];\n            }\n\n            const userStr = JSON.stringify(options.loginNames.map(login => { return { Key: login }; }));\n\n            let postBody = {\n                peoplePickerInput: userStr,\n                roleValue: roleValue,\n                url: options.url,\n            };\n\n            if (typeof options.emailData !== \"undefined\" && options.emailData !== null) {\n\n                postBody = Util.extend(postBody, {\n                    emailBody: options.emailData.body,\n                    emailSubject: typeof options.emailData.subject !== \"undefined\" ? options.emailData.subject : \"Shared with you.\",\n                    sendEmail: true,\n                });\n            }\n\n            return this.sendShareObjectRequest(postBody);\n        });\n    }\n\n    /**\n     * Calls the web's UnshareObject method\n     *\n     * @param url The url of the object to unshare\n     */\n    public unshareObjectWeb(url: string): Promise<SharingResult> {\n\n        return this.clone(SharePointQueryableShareable, \"unshareObject\").postCore<SharingResult>({\n            body: JSON.stringify({\n                url: url,\n            }),\n        });\n    }\n\n    /**\n     * Checks Permissions on the list of Users and returns back role the users have on the Item.\n     *\n     * @param recipients The array of Entities for which Permissions need to be checked.\n     */\n    public checkPermissions(recipients: SharingRecipient[]): Promise<SharingEntityPermission[]> {\n\n        return this.clone(SharePointQueryableShareable, \"checkPermissions\").postCore<SharingEntityPermission[]>({\n            body: JSON.stringify({\n                recipients: recipients,\n            }),\n        });\n    }\n\n    /**\n     * Get Sharing Information.\n     *\n     * @param request The SharingInformationRequest Object.\n     */\n    public getSharingInformation(request: SharingInformationRequest = null): Promise<SharingInformation> {\n\n        return this.clone(SharePointQueryableShareable, \"getSharingInformation\").postCore<SharingInformation>({\n            body: JSON.stringify({\n                request: request,\n            }),\n        });\n    }\n\n    /**\n     * Gets the sharing settings of an item.\n     *\n     * @param useSimplifiedRoles Determines whether to use simplified roles.\n     */\n    public getObjectSharingSettings(useSimplifiedRoles = true): Promise<ObjectSharingSettings> {\n\n        return this.clone(SharePointQueryableShareable, \"getObjectSharingSettings\").postCore<ObjectSharingSettings>({\n            body: JSON.stringify({\n                useSimplifiedRoles: useSimplifiedRoles,\n            }),\n        });\n    }\n\n    /**\n     * Unshares this object\n     */\n    public unshareObject(): Promise<SharingResult> {\n\n        return this.clone(SharePointQueryableShareable, \"unshareObject\").postCore<SharingResult>();\n    }\n\n    /**\n     * Deletes a link by type\n     *\n     * @param kind Deletes a sharing link by the kind of link\n     */\n    public deleteLinkByKind(kind: SharingLinkKind): Promise<void> {\n\n        return this.clone(SharePointQueryableShareable, \"deleteLinkByKind\").postCore({\n            body: JSON.stringify({ linkKind: kind }),\n        });\n    }\n\n    /**\n     * Removes the specified link to the item.\n     *\n     * @param kind The kind of link to be deleted.\n     * @param shareId\n     */\n    public unshareLink(kind: SharingLinkKind, shareId = \"00000000-0000-0000-0000-000000000000\"): Promise<void> {\n\n        return this.clone(SharePointQueryableShareable, \"unshareLink\").postCore({\n            body: JSON.stringify({ linkKind: kind, shareId: shareId }),\n        });\n    }\n\n    /**\n     * Calculates the roleValue string used in the sharing query\n     *\n     * @param role The Sharing Role\n     * @param group The Group type\n     */\n    protected getRoleValue(role: SharingRole, group: RoleType): Promise<string> {\n\n        // we will give group precedence, because we had to make a choice\n        if (typeof group !== \"undefined\" && group !== null) {\n\n\n\n            switch (group) {\n                case RoleType.Contributor:\n                    // remove need to reference Web here, which created a circular build issue\n                    const memberGroup = new SharePointQueryableInstance(\"_api/web\", \"associatedmembergroup\");\n                    return memberGroup.select(\"Id\").get<{ Id: number }>().then(g => `group: ${g.Id}`);\n                case RoleType.Reader:\n                case RoleType.Guest:\n                    // remove need to reference Web here, which created a circular build issue\n                    const visitorGroup = new SharePointQueryableInstance(\"_api/web\", \"associatedvisitorgroup\");\n                    return visitorGroup.select(\"Id\").get<{ Id: number }>().then(g => `group: ${g.Id}`);\n                default:\n                    throw new Error(\"Could not determine role value for supplied value. Contributor, Reader, and Guest are supported\");\n            }\n        } else {\n\n            const roleFilter = role === SharingRole.Edit ? RoleType.Contributor : RoleType.Reader;\n            // remove need to reference Web here, which created a circular build issue\n            const roleDefs = new SharePointQueryableCollection(\"_api/web\", \"roledefinitions\");\n            return roleDefs.select(\"Id\").top(1).filter(`RoleTypeKind eq ${roleFilter}`).get<{ Id: number }[]>().then(def => {\n                if (def.length < 1) {\n                    throw new Error(\"Could not locate associated role definition for supplied role. Edit and View are supported\");\n                }\n                return `role: ${def[0].Id}`;\n            });\n        }\n    }\n\n    private getShareObjectWeb(candidate: string): Promise<SharePointQueryableInstance> {\n        return Promise.resolve(new SharePointQueryableInstance(extractWebUrl(candidate), \"/_api/SP.Web.ShareObject\"));\n    }\n\n    private sendShareObjectRequest(options: any): Promise<SharingResult> {\n\n        return this.getShareObjectWeb(this.toUrl()).then(web => {\n\n            return web.expand(\"UsersWithAccessRequests\", \"GroupsSharedWith\").as(SharePointQueryableShareable).postCore({\n                body: JSON.stringify(options),\n            });\n        });\n    }\n}\n\nexport class SharePointQueryableShareableWeb extends SharePointQueryableSecurable {\n\n    /**\n     * Shares this web with the supplied users\n     * @param loginNames The resolved login names to share\n     * @param role The role to share this web\n     * @param emailData Optional email data\n     */\n    public shareWith(loginNames: string | string[], role: SharingRole = SharingRole.View, emailData?: SharingEmailData): Promise<SharingResult> {\n\n        const dependency = this.addBatchDependency();\n        // remove need to reference Web here, which created a circular build issue\n        const web = new SharePointQueryableInstance(extractWebUrl(this.toUrl()), \"/_api/web/url\");\n        return web.get().then((url: string) => {\n\n            dependency();\n\n            return this.shareObject(Util.combinePaths(url, \"/_layouts/15/aclinv.aspx?forSharing=1&mbypass=1\"), loginNames, role, emailData);\n        });\n    }\n\n    /**\n     * Provides direct access to the static web.ShareObject method\n     *\n     * @param url The url to share\n     * @param loginNames Resolved loginnames string[] of a single login name string\n     * @param roleValue Role value\n     * @param emailData Optional email data\n     * @param groupId Optional group id\n     * @param propagateAcl\n     * @param includeAnonymousLinkInEmail\n     * @param useSimplifiedRoles\n     */\n    public shareObject(url: string,\n        loginNames: string | string[],\n        role: SharingRole,\n        emailData?: SharingEmailData,\n        group?: RoleType,\n        propagateAcl = false,\n        includeAnonymousLinkInEmail = false,\n        useSimplifiedRoles = true): Promise<SharingResult> {\n\n        return this.clone(SharePointQueryableShareable, null).shareObject({\n            emailData: emailData,\n            group: group,\n            includeAnonymousLinkInEmail: includeAnonymousLinkInEmail,\n            loginNames: loginNames,\n            propagateAcl: propagateAcl,\n            role: role,\n            url: url,\n            useSimplifiedRoles: useSimplifiedRoles,\n        });\n    }\n\n    /**\n     * Supplies a method to pass any set of arguments to ShareObject\n     *\n     * @param options The set of options to send to ShareObject\n     */\n    public shareObjectRaw(options: any): Promise<SharingResult> {\n        return this.clone(SharePointQueryableShareable, null).shareObject(options, true);\n    }\n\n    /**\n     * Unshares the object\n     *\n     * @param url The url of the object to stop sharing\n     */\n    public unshareObject(url: string): Promise<SharingResult> {\n\n        return this.clone(SharePointQueryableShareable, null).unshareObjectWeb(url);\n    }\n}\n\nexport class SharePointQueryableShareableItem extends SharePointQueryableSecurable {\n\n    /**\n     * Gets a link suitable for sharing for this item\n     *\n     * @param kind The type of link to share\n     * @param expiration The optional expiration date\n     */\n    public getShareLink(kind: SharingLinkKind = SharingLinkKind.OrganizationView, expiration: Date = null): Promise<ShareLinkResponse> {\n        return this.clone(SharePointQueryableShareable, null).getShareLink(kind, expiration);\n    }\n\n    /**\n     * Shares this item with one or more users\n     *\n     * @param loginNames string or string[] of resolved login names to which this item will be shared\n     * @param role The role (View | Edit) applied to the share\n     * @param emailData Optional, if inlucded an email will be sent. Note subject currently has no effect.\n     */\n    public shareWith(loginNames: string | string[], role: SharingRole = SharingRole.View, requireSignin = false, emailData?: SharingEmailData): Promise<SharingResult> {\n\n        return this.clone(SharePointQueryableShareable, null).shareWith(loginNames, role, requireSignin, false, emailData);\n    }\n\n    /**\n     * Checks Permissions on the list of Users and returns back role the users have on the Item.\n     *\n     * @param recipients The array of Entities for which Permissions need to be checked.\n     */\n    public checkSharingPermissions(recipients: SharingRecipient[]): Promise<SharingEntityPermission[]> {\n\n        return this.clone(SharePointQueryableShareable, null).checkPermissions(recipients);\n    }\n\n    /**\n     * Get Sharing Information.\n     *\n     * @param request The SharingInformationRequest Object.\n     */\n    public getSharingInformation(request: SharingInformationRequest = null): Promise<SharingInformation> {\n\n        return this.clone(SharePointQueryableShareable, null).getSharingInformation(request);\n    }\n\n    /**\n     * Gets the sharing settings of an item.\n     *\n     * @param useSimplifiedRoles Determines whether to use simplified roles.\n     */\n    public getObjectSharingSettings(useSimplifiedRoles = true): Promise<ObjectSharingSettings> {\n\n        return this.clone(SharePointQueryableShareable, null).getObjectSharingSettings(useSimplifiedRoles);\n    }\n\n    /**\n     * Unshare this item\n     */\n    public unshare(): Promise<SharingResult> {\n        return this.clone(SharePointQueryableShareable, null).unshareObject();\n    }\n\n    /**\n     * Deletes a sharing link by kind\n     *\n     * @param kind Deletes a sharing link by the kind of link\n     */\n    public deleteSharingLinkByKind(kind: SharingLinkKind): Promise<void> {\n\n        return this.clone(SharePointQueryableShareable, null).deleteLinkByKind(kind);\n    }\n\n    /**\n     * Removes the specified link to the item.\n     *\n     * @param kind The kind of link to be deleted.\n     * @param shareId\n     */\n    public unshareLink(kind: SharingLinkKind, shareId?: string): Promise<void> {\n\n        return this.clone(SharePointQueryableShareable, null).unshareLink(kind, shareId);\n    }\n}\n\nexport class FileFolderShared extends SharePointQueryableInstance {\n    /**\n     * Gets a link suitable for sharing\n     *\n     * @param kind The kind of link to get\n     * @param expiration Optional, an expiration for this link\n     */\n    public getShareLink(kind: SharingLinkKind = SharingLinkKind.OrganizationView, expiration: Date = null): Promise<ShareLinkResponse> {\n\n        const dependency = this.addBatchDependency();\n\n        return this.getShareable().then(shareable => {\n            dependency();\n            return shareable.getShareLink(kind, expiration);\n        });\n    }\n\n    /**\n         * Checks Permissions on the list of Users and returns back role the users have on the Item.\n         *\n         * @param recipients The array of Entities for which Permissions need to be checked.\n         */\n    public checkSharingPermissions(recipients: SharingRecipient[]): Promise<SharingEntityPermission[]> {\n\n        const dependency = this.addBatchDependency();\n\n        return this.getShareable().then(shareable => {\n            dependency();\n            return shareable.checkPermissions(recipients);\n        });\n    }\n\n    /**\n     * Get Sharing Information.\n     *\n     * @param request The SharingInformationRequest Object.\n     */\n    public getSharingInformation(request: SharingInformationRequest = null): Promise<SharingInformation> {\n\n        const dependency = this.addBatchDependency();\n\n        return this.getShareable().then(shareable => {\n            dependency();\n            return shareable.getSharingInformation(request);\n        });\n    }\n\n    /**\n     * Gets the sharing settings of an item.\n     *\n     * @param useSimplifiedRoles Determines whether to use simplified roles.\n     */\n    public getObjectSharingSettings(useSimplifiedRoles = true): Promise<ObjectSharingSettings> {\n\n        const dependency = this.addBatchDependency();\n\n        return this.getShareable().then(shareable => {\n            dependency();\n            return shareable.getObjectSharingSettings(useSimplifiedRoles);\n        });\n    }\n\n    /**\n     * Unshare this item\n     */\n    public unshare(): Promise<SharingResult> {\n\n        const dependency = this.addBatchDependency();\n\n        return this.getShareable().then(shareable => {\n            dependency();\n            return shareable.unshareObject();\n        });\n    }\n\n    /**\n     * Deletes a sharing link by the kind of link\n     *\n     * @param kind The kind of link to be deleted.\n     */\n    public deleteSharingLinkByKind(kind: SharingLinkKind): Promise<void> {\n\n        const dependency = this.addBatchDependency();\n\n        return this.getShareable().then(shareable => {\n            dependency();\n            return shareable.deleteLinkByKind(kind);\n        });\n    }\n\n    /**\n     * Removes the specified link to the item.\n     *\n     * @param kind The kind of link to be deleted.\n     * @param shareId The share id to delete\n     */\n    public unshareLink(kind: SharingLinkKind, shareId?: string): Promise<void> {\n\n        const dependency = this.addBatchDependency();\n\n        return this.getShareable().then(shareable => {\n            dependency();\n            return shareable.unshareLink(kind, shareId);\n        });\n    }\n\n    /**\n     * For files and folders we need to use the associated item end point\n     */\n    protected getShareable(): Promise<SharePointQueryableShareable> {\n\n        // sharing only works on the item end point, not the file one - so we create a folder instance with the item url internally\n        return this.clone(SharePointQueryableShareableFile, \"listItemAllFields\", false).select(\"odata.editlink\").get().then(d => {\n\n            let shareable = new SharePointQueryableShareable(spGetEntityUrl(d));\n\n            // we need to handle batching\n            if (this.hasBatch) {\n                shareable = shareable.inBatch(this.batch);\n            }\n\n            return shareable;\n        });\n    }\n}\n\nexport class SharePointQueryableShareableFile extends FileFolderShared {\n\n    /**\n     * Shares this item with one or more users\n     *\n     * @param loginNames string or string[] of resolved login names to which this item will be shared\n     * @param role The role (View | Edit) applied to the share\n     * @param shareEverything Share everything in this folder, even items with unique permissions.\n     * @param requireSignin If true the user must signin to view link, otherwise anyone with the link can access the resource\n     * @param emailData Optional, if inlucded an email will be sent. Note subject currently has no effect.\n     */\n    public shareWith(loginNames: string | string[],\n        role: SharingRole = SharingRole.View,\n        requireSignin = false,\n        emailData?: SharingEmailData): Promise<SharingResult> {\n\n        const dependency = this.addBatchDependency();\n\n        return this.getShareable().then(shareable => {\n            dependency();\n            return shareable.shareWith(loginNames, role, requireSignin, false, emailData);\n        });\n    }\n}\n\nexport class SharePointQueryableShareableFolder extends FileFolderShared {\n\n    /**\n     * Shares this item with one or more users\n     *\n     * @param loginNames string or string[] of resolved login names to which this item will be shared\n     * @param role The role (View | Edit) applied to the share\n     * @param shareEverything Share everything in this folder, even items with unique permissions.\n     * @param requireSignin If true the user must signin to view link, otherwise anyone with the link can access the resource\n     * @param emailData Optional, if inlucded an email will be sent. Note subject currently has no effect.\n     */\n    public shareWith(loginNames: string | string[],\n        role: SharingRole = SharingRole.View,\n        requireSignin = false,\n        shareEverything = false,\n        emailData?: SharingEmailData): Promise<SharingResult> {\n\n        const dependency = this.addBatchDependency();\n\n        return this.getShareable().then(shareable => {\n            dependency();\n            return shareable.shareWith(loginNames, role, requireSignin, shareEverything, emailData);\n        });\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ../../../../packages/sp/src/sharepointqueryableshareable.ts","import { SharePointQueryable, SharePointQueryableInstance, SharePointQueryableCollection } from \"./sharepointqueryable\";\n\nexport class LimitedWebPartManager extends SharePointQueryable {\n\n    /**\n     * Gets the set of web part definitions contained by this web part manager\n     *\n     */\n    public get webparts(): WebPartDefinitions {\n\n        return new WebPartDefinitions(this, \"webparts\");\n    }\n\n    /**\n     * Exports a webpart definition\n     *\n     * @param id the GUID id of the definition to export\n     */\n    public export(id: string): Promise<string> {\n\n        return this.clone(LimitedWebPartManager, \"ExportWebPart\").postCore({\n            body: JSON.stringify({ webPartId: id }),\n        });\n    }\n\n    /**\n     * Imports a webpart\n     *\n     * @param xml webpart definition which must be valid XML in the .dwp or .webpart format\n     */\n    public import(xml: string): Promise<any> {\n\n        return this.clone(LimitedWebPartManager, \"ImportWebPart\").postCore({\n            body: JSON.stringify({ webPartXml: xml }),\n        });\n    }\n}\n\nexport class WebPartDefinitions extends SharePointQueryableCollection {\n\n    /**\n     * Gets a web part definition from the collection by id\n     *\n     * @param id The storage ID of the SPWebPartDefinition to retrieve\n     */\n    public getById(id: string): WebPartDefinition {\n\n        return new WebPartDefinition(this, `getbyid('${id}')`);\n    }\n\n    /**\n     * Gets a web part definition from the collection by storage id\n     *\n     * @param id The WebPart.ID of the SPWebPartDefinition to retrieve\n     */\n    public getByControlId(id: string): WebPartDefinition {\n\n        return new WebPartDefinition(this, `getByControlId('${id}')`);\n    }\n}\n\nexport class WebPartDefinition extends SharePointQueryableInstance {\n\n    /**\n     * Gets the webpart information associated with this definition\n     */\n    public get webpart(): WebPart {\n\n        return new WebPart(this);\n    }\n\n    /**\n     * Saves changes to the Web Part made using other properties and methods on the SPWebPartDefinition object\n     */\n    public saveChanges(): Promise<any> {\n\n        return this.clone(WebPartDefinition, \"SaveWebPartChanges\").postCore();\n    }\n\n    /**\n     * Moves the Web Part to a different location on a Web Part Page\n     *\n     * @param zoneId The ID of the Web Part Zone to which to move the Web Part\n     * @param zoneIndex A Web Part zone index that specifies the position at which the Web Part is to be moved within the destination Web Part zone\n     */\n    public moveTo(zoneId: string, zoneIndex: number): Promise<void> {\n\n        return this.clone(WebPartDefinition, `MoveWebPartTo(zoneID='${zoneId}', zoneIndex=${zoneIndex})`).postCore();\n    }\n\n    /**\n     * Closes the Web Part. If the Web Part is already closed, this method does nothing\n     */\n    public close(): Promise<void> {\n\n        return this.clone(WebPartDefinition, \"CloseWebPart\").postCore();\n    }\n\n    /**\n     * Opens the Web Part. If the Web Part is already closed, this method does nothing\n     */\n    public open(): Promise<void> {\n\n        return this.clone(WebPartDefinition, \"OpenWebPart\").postCore();\n\n    }\n\n    /**\n     * Removes a webpart from a page, all settings will be lost\n     */\n    public delete(): Promise<void> {\n\n        return this.clone(WebPartDefinition, \"DeleteWebPart\").postCore();\n    }\n}\n\nexport class WebPart extends SharePointQueryableInstance {\n\n    /**\n     * Creates a new instance of the WebPart class\n     *\n     * @param baseUrl The url or SharePointQueryable which forms the parent of this fields collection\n     * @param path Optional, if supplied will be appended to the supplied baseUrl\n     */\n    constructor(baseUrl: string | SharePointQueryable, path = \"webpart\") {\n        super(baseUrl, path);\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ../../../../packages/sp/src/webparts.ts","import { Util, TypedHash } from \"@pnp/common\";\nimport { SharePointQueryable, SharePointQueryableCollection, SharePointQueryableInstance } from \"./sharepointqueryable\";\nimport { SharePointQueryableShareableFolder } from \"./sharepointqueryableshareable\";\nimport { Files } from \"./files\";\nimport { spGetEntityUrl } from \"./odata\";\nimport { Item } from \"./items\";\n\n/**\n * Describes a collection of Folder objects\n *\n */\nexport class Folders extends SharePointQueryableCollection {\n\n    /**\n     * Creates a new instance of the Folders class\n     *\n     * @param baseUrl The url or SharePointQueryable which forms the parent of this fields collection\n     */\n    constructor(baseUrl: string | SharePointQueryable, path = \"folders\") {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Gets a folder by folder name\n     *\n     */\n    public getByName(name: string): Folder {\n        const f = new Folder(this);\n        f.concat(`('${name}')`);\n        return f;\n    }\n\n    /**\n     * Adds a new folder to the current folder (relative) or any folder (absolute)\n     *\n     * @param url The relative or absolute url where the new folder will be created. Urls starting with a forward slash are absolute.\n     * @returns The new Folder and the raw response.\n     */\n    public add(url: string): Promise<FolderAddResult> {\n\n        return this.clone(Folders, `add('${url}')`).postCore().then((response) => {\n            return {\n                data: response,\n                folder: this.getByName(url),\n            };\n        });\n    }\n}\n\n/**\n * Describes a single Folder instance\n *\n */\nexport class Folder extends SharePointQueryableShareableFolder {\n\n    /**\n     * Specifies the sequence in which content types are displayed.\n     *\n     */\n    public get contentTypeOrder(): SharePointQueryableCollection {\n        return new SharePointQueryableCollection(this, \"contentTypeOrder\");\n    }\n\n    /**\n     * Gets this folder's files\n     *\n     */\n    public get files(): Files {\n        return new Files(this);\n    }\n\n    /**\n     * Gets this folder's sub folders\n     *\n     */\n    public get folders(): Folders {\n        return new Folders(this);\n    }\n\n    /**\n     * Gets this folder's list item field values\n     *\n     */\n    public get listItemAllFields(): SharePointQueryableCollection {\n        return new SharePointQueryableCollection(this, \"listItemAllFields\");\n    }\n\n    /**\n     * Gets the parent folder, if available\n     *\n     */\n    public get parentFolder(): Folder {\n        return new Folder(this, \"parentFolder\");\n    }\n\n    /**\n     * Gets this folder's properties\n     *\n     */\n    public get properties(): SharePointQueryableInstance {\n        return new SharePointQueryableInstance(this, \"properties\");\n    }\n\n    /**\n     * Gets this folder's server relative url\n     *\n     */\n    public get serverRelativeUrl(): SharePointQueryable {\n        return new SharePointQueryable(this, \"serverRelativeUrl\");\n    }\n\n    /**\n     * Gets a value that specifies the content type order.\n     *\n     */\n    public get uniqueContentTypeOrder(): SharePointQueryableCollection {\n        return new SharePointQueryableCollection(this, \"uniqueContentTypeOrder\");\n    }\n\n    public update(properties: TypedHash<string | number | boolean>): Promise<FolderUpdateResult> {\n        const postBody: string = JSON.stringify(Util.extend({\n            \"__metadata\": { \"type\": \"SP.Folder\" },\n        }, properties));\n\n        return this.postCore({\n            body: postBody,\n            headers: {\n                \"X-HTTP-Method\": \"MERGE\",\n            },\n        }).then((data) => {\n            return {\n                data: data,\n                folder: this,\n            };\n        });\n    }\n\n    /**\n    * Delete this folder\n    *\n    * @param eTag Value used in the IF-Match header, by default \"*\"\n    */\n    public delete(eTag = \"*\"): Promise<void> {\n        return this.clone(Folder, null).postCore({\n            headers: {\n                \"IF-Match\": eTag,\n                \"X-HTTP-Method\": \"DELETE\",\n            },\n        });\n    }\n\n    /**\n     * Moves the folder to the Recycle Bin and returns the identifier of the new Recycle Bin item.\n     */\n    public recycle(): Promise<string> {\n        return this.clone(Folder, \"recycle\").postCore();\n    }\n\n    /**\n     * Gets the associated list item for this folder, loading the default properties\n     */\n    public getItem<T>(...selects: string[]): Promise<Item & T> {\n\n        const q = this.listItemAllFields;\n        return q.select.apply(q, selects).get().then((d: any) => {\n\n            return Util.extend(new Item(spGetEntityUrl(d)), d);\n        });\n    }\n}\n\nexport interface FolderAddResult {\n    folder: Folder;\n    data: any;\n}\n\nexport interface FolderUpdateResult {\n    folder: Folder;\n    data: any;\n}\n\n\n\n// WEBPACK FOOTER //\n// ../../../../packages/sp/src/folders.ts","import { Util, TypedHash } from \"@pnp/common\";\nimport { SharePointQueryable, SharePointQueryableCollection, SharePointQueryableInstance } from \"./sharepointqueryable\";\n\n/**\n * Describes a collection of content types\n *\n */\nexport class ContentTypes extends SharePointQueryableCollection {\n\n    /**\n     * Creates a new instance of the ContentTypes class\n     *\n     * @param baseUrl The url or SharePointQueryable which forms the parent of this content types collection\n     */\n    constructor(baseUrl: string | SharePointQueryable, path = \"contenttypes\") {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Gets a ContentType by content type id\n     */\n    public getById(id: string): ContentType {\n        const ct: ContentType = new ContentType(this);\n        ct.concat(`('${id}')`);\n        return ct;\n    }\n\n    /**\n     * Adds an existing contenttype to a content type collection\n     *\n     * @param contentTypeId in the following format, for example: 0x010102\n     */\n    public addAvailableContentType(contentTypeId: string): Promise<ContentTypeAddResult> {\n\n        const postBody: string = JSON.stringify({\n            \"contentTypeId\": contentTypeId,\n        });\n\n        return this.clone(ContentTypes, \"addAvailableContentType\").postCore<{ id: string }>({ body: postBody }).then((data) => {\n            return {\n                contentType: this.getById(data.id),\n                data: data,\n            };\n        });\n    }\n\n    /**\n     * Adds a new content type to the collection\n     *\n     * @param id The desired content type id for the new content type (also determines the parent content type)\n     * @param name The name of the content type\n     * @param description The description of the content type\n     * @param group The group in which to add the content type\n     * @param additionalSettings Any additional settings to provide when creating the content type\n     *\n     */\n    public add(\n        id: string,\n        name: string,\n        description = \"\",\n        group = \"Custom Content Types\",\n        additionalSettings: TypedHash<string | number | boolean> = {}): Promise<ContentTypeAddResult> {\n\n        const postBody = JSON.stringify(Util.extend({\n            \"Description\": description,\n            \"Group\": group,\n            \"Id\": { \"StringValue\": id },\n            \"Name\": name,\n            \"__metadata\": { \"type\": \"SP.ContentType\" },\n        }, additionalSettings));\n\n        return this.postCore({ body: postBody }).then((data) => {\n            return { contentType: this.getById(data.id), data: data };\n        });\n    }\n}\n\n/**\n * Describes a single ContentType instance\n *\n */\nexport class ContentType extends SharePointQueryableInstance {\n\n    /**\n     * Gets the column (also known as field) references in the content type.\n    */\n    public get fieldLinks(): FieldLinks {\n        return new FieldLinks(this);\n    }\n\n    /**\n     * Gets a value that specifies the collection of fields for the content type.\n     */\n    public get fields(): SharePointQueryableCollection {\n        return new SharePointQueryableCollection(this, \"fields\");\n    }\n\n    /**\n     * Gets the parent content type of the content type.\n     */\n    public get parent(): ContentType {\n        return new ContentType(this, \"parent\");\n    }\n\n    /**\n     * Gets a value that specifies the collection of workflow associations for the content type.\n     */\n    public get workflowAssociations(): SharePointQueryableCollection {\n        return new SharePointQueryableCollection(this, \"workflowAssociations\");\n    }\n\n    /**\n     * Delete this content type\n     */\n    public delete(): Promise<void> {\n        return this.postCore({\n            headers: {\n                \"X-HTTP-Method\": \"DELETE\",\n            },\n        });\n    }\n}\n\nexport interface ContentTypeAddResult {\n    contentType: ContentType;\n    data: any;\n}\n\n/**\n * Represents a collection of field link instances\n */\nexport class FieldLinks extends SharePointQueryableCollection {\n\n    /**\n     * Creates a new instance of the ContentType class\n     *\n     * @param baseUrl The url or SharePointQueryable which forms the parent of this content type instance\n     */\n    constructor(baseUrl: string | SharePointQueryable, path = \"fieldlinks\") {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Gets a FieldLink by GUID id\n     *\n     * @param id The GUID id of the field link\n     */\n    public getById(id: string) {\n        const fl = new FieldLink(this);\n        fl.concat(`(guid'${id}')`);\n        return fl;\n    }\n}\n\n/**\n * Represents a field link instance\n */\nexport class FieldLink extends SharePointQueryableInstance { }\n\n\n\n// WEBPACK FOOTER //\n// ../../../../packages/sp/src/contenttypes.ts","import { SharePointQueryable, SharePointQueryableInstance, SharePointQueryableCollection } from \"./sharepointqueryable\";\nimport { TextParser, BlobParser, JSONParser, BufferParser, ODataParser } from \"@pnp/odata\";\n\nexport interface AttachmentFileInfo {\n    name: string;\n    content: string | Blob | ArrayBuffer;\n}\n\n/**\n * Describes a collection of Item objects\n *\n */\nexport class AttachmentFiles extends SharePointQueryableCollection {\n\n    /**\n     * Creates a new instance of the AttachmentFiles class\n     *\n     * @param baseUrl The url or SharePointQueryable which forms the parent of this attachments collection\n     */\n    constructor(baseUrl: string | SharePointQueryable, path = \"AttachmentFiles\") {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Gets a Attachment File by filename\n     *\n     * @param name The name of the file, including extension.\n     */\n    public getByName(name: string): AttachmentFile {\n        const f = new AttachmentFile(this);\n        f.concat(`('${name}')`);\n        return f;\n    }\n\n    /**\n     * Adds a new attachment to the collection. Not supported for batching.\n     *\n     * @param name The name of the file, including extension.\n     * @param content The Base64 file content.\n     */\n    public add(name: string, content: string | Blob | ArrayBuffer): Promise<AttachmentFileAddResult> {\n        return this.clone(AttachmentFiles, `add(FileName='${name}')`, false).postCore({\n            body: content,\n        }).then((response) => {\n            return {\n                data: response,\n                file: this.getByName(name),\n            };\n        });\n    }\n\n    /**\n     * Adds multiple new attachment to the collection. Not supported for batching.\n     *\n     * @files name The collection of files to add\n     */\n    public addMultiple(files: AttachmentFileInfo[]): Promise<void> {\n\n        // add the files in series so we don't get update conflicts\n        return files.reduce((chain, file) => chain.then(() => this.clone(AttachmentFiles, `add(FileName='${file.name}')`, false).postCore({\n            body: file.content,\n        })), Promise.resolve());\n    }\n\n    /**\n     * Delete multiple attachments from the collection. Not supported for batching.\n     *\n     * @files name The collection of files to delete\n     */\n    public deleteMultiple(...files: string[]): Promise<void> {\n        return files.reduce((chain, file) => chain.then(() => this.getByName(file).delete()), Promise.resolve());\n    }\n}\n\n/**\n * Describes a single attachment file instance\n *\n */\nexport class AttachmentFile extends SharePointQueryableInstance {\n\n    /**\n     * Gets the contents of the file as text\n     *\n     */\n    public getText(): Promise<string> {\n        return this.getParsed(new TextParser());\n    }\n\n    /**\n     * Gets the contents of the file as a blob, does not work in Node.js\n     *\n     */\n    public getBlob(): Promise<Blob> {\n        return this.getParsed(new BlobParser());\n    }\n\n    /**\n     * Gets the contents of a file as an ArrayBuffer, works in Node.js\n     */\n    public getBuffer(): Promise<ArrayBuffer> {\n        return this.getParsed(new BufferParser());\n    }\n\n    /**\n     * Gets the contents of a file as an ArrayBuffer, works in Node.js\n     */\n    public getJSON(): Promise<any> {\n        return this.getParsed(new JSONParser());\n    }\n\n    /**\n     * Sets the content of a file. Not supported for batching\n     *\n     * @param content The value to set for the file contents\n     */\n    public setContent(content: string | ArrayBuffer | Blob): Promise<AttachmentFile> {\n\n        return this.clone(AttachmentFile, \"$value\", false).postCore({\n            body: content,\n            headers: {\n                \"X-HTTP-Method\": \"PUT\",\n            },\n        }).then(_ => new AttachmentFile(this));\n    }\n\n    /**\n     * Delete this attachment file\n     *\n     * @param eTag Value used in the IF-Match header, by default \"*\"\n     */\n    public delete(eTag = \"*\"): Promise<void> {\n        return this.postCore({\n            headers: {\n                \"IF-Match\": eTag,\n                \"X-HTTP-Method\": \"DELETE\",\n            },\n        });\n    }\n\n    private getParsed<T>(parser: ODataParser<T>): Promise<T> {\n        return this.clone(AttachmentFile, \"$value\", false).get(parser);\n    }\n}\n\nexport interface AttachmentFileAddResult {\n    file: AttachmentFile;\n    data: any;\n}\n\n\n\n// WEBPACK FOOTER //\n// ../../../../packages/sp/src/attachmentfiles.ts","import { SharePointQueryable, SharePointQueryableCollection, SharePointQueryableInstance } from \"./sharepointqueryable\";\nimport { Util, TypedHash } from \"@pnp/common\";\n\n/**\n * Describes the views available in the current context\n *\n */\nexport class Views extends SharePointQueryableCollection {\n\n    /**\n     * Creates a new instance of the Views class\n     *\n     * @param baseUrl The url or SharePointQueryable which forms the parent of this fields collection\n     */\n    constructor(baseUrl: string | SharePointQueryable, path = \"views\") {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Gets a view by guid id\n     *\n     * @param id The GUID id of the view\n     */\n    public getById(id: string): View {\n        const v = new View(this);\n        v.concat(`('${id}')`);\n        return v;\n    }\n\n    /**\n     * Gets a view by title (case-sensitive)\n     *\n     * @param title The case-sensitive title of the view\n     */\n    public getByTitle(title: string): View {\n        return new View(this, `getByTitle('${title}')`);\n    }\n\n    /**\n     * Adds a new view to the collection\n     *\n     * @param title The new views's title\n     * @param personalView True if this is a personal view, otherwise false, default = false\n     * @param additionalSettings Will be passed as part of the view creation body\n     */\n    public add(title: string, personalView = false, additionalSettings: TypedHash<any> = {}): Promise<ViewAddResult> {\n\n        const postBody = JSON.stringify(Util.extend({\n            \"PersonalView\": personalView,\n            \"Title\": title,\n            \"__metadata\": { \"type\": \"SP.View\" },\n        }, additionalSettings));\n\n        return this.clone(Views, null).postCore<{ Id: string }>({ body: postBody }).then((data) => {\n            return {\n                data: data,\n                view: this.getById(data.Id),\n            };\n        });\n    }\n}\n\n\n/**\n * Describes a single View instance\n *\n */\nexport class View extends SharePointQueryableInstance {\n\n    public get fields(): ViewFields {\n        return new ViewFields(this);\n    }\n\n    /**\n     * Updates this view intance with the supplied properties\n     *\n     * @param properties A plain object hash of values to update for the view\n     */\n    public update(properties: TypedHash<any>): Promise<ViewUpdateResult> {\n\n        const postBody = JSON.stringify(Util.extend({\n            \"__metadata\": { \"type\": \"SP.View\" },\n        }, properties));\n\n        return this.postCore({\n            body: postBody,\n            headers: {\n                \"X-HTTP-Method\": \"MERGE\",\n            },\n        }).then((data) => {\n            return {\n                data: data,\n                view: this,\n            };\n        });\n    }\n\n    /**\n     * Delete this view\n     *\n     */\n    public delete(): Promise<void> {\n        return this.postCore({\n            headers: {\n                \"X-HTTP-Method\": \"DELETE\",\n            },\n        });\n    }\n\n    /**\n     * Returns the list view as HTML.\n     *\n     */\n    public renderAsHtml(): Promise<string> {\n        return this.clone(SharePointQueryable, \"renderashtml\").get();\n    }\n}\n\nexport class ViewFields extends SharePointQueryableCollection {\n    constructor(baseUrl: string | SharePointQueryable, path = \"viewfields\") {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Gets a value that specifies the XML schema that represents the collection.\n     */\n    public getSchemaXml(): Promise<string> {\n        return this.clone(SharePointQueryable, \"schemaxml\").get();\n    }\n\n    /**\n     * Adds the field with the specified field internal name or display name to the collection.\n     *\n     * @param fieldTitleOrInternalName The case-sensitive internal name or display name of the field to add.\n     */\n    public add(fieldTitleOrInternalName: string): Promise<void> {\n        return this.clone(ViewFields, `addviewfield('${fieldTitleOrInternalName}')`).postCore();\n    }\n\n    /**\n     * Moves the field with the specified field internal name to the specified position in the collection.\n     *\n     * @param fieldInternalName The case-sensitive internal name of the field to move.\n     * @param index The zero-based index of the new position for the field.\n     */\n    public move(fieldInternalName: string, index: number): Promise<void> {\n        return this.clone(ViewFields, \"moveviewfieldto\").postCore({\n            body: JSON.stringify({ \"field\": fieldInternalName, \"index\": index }),\n        });\n    }\n\n    /**\n     * Removes all the fields from the collection.\n     */\n    public removeAll(): Promise<void> {\n        return this.clone(ViewFields, \"removeallviewfields\").postCore();\n    }\n\n    /**\n     * Removes the field with the specified field internal name from the collection.\n     *\n     * @param fieldInternalName The case-sensitive internal name of the field to remove from the view.\n     */\n    public remove(fieldInternalName: string): Promise<void> {\n        return this.clone(ViewFields, `removeviewfield('${fieldInternalName}')`).postCore();\n    }\n}\n\nexport interface ViewAddResult {\n    view: View;\n    data: any;\n}\n\nexport interface ViewUpdateResult {\n    view: View;\n    data: any;\n}\n\n\n\n\n// WEBPACK FOOTER //\n// ../../../../packages/sp/src/views.ts","import { SharePointQueryable, SharePointQueryableCollection, SharePointQueryableInstance } from \"./sharepointqueryable\";\nimport { Util, TypedHash } from \"@pnp/common\";\nimport {\n    XmlSchemaFieldCreationInformation,\n    DateTimeFieldFormatType,\n    FieldTypes,\n    CalendarType,\n    UrlFieldFormatType,\n    FieldUserSelectionMode,\n    FieldCreationProperties,\n    ChoiceFieldFormatType,\n} from \"./types\";\n\n/**\n * Describes a collection of Field objects\n *\n */\nexport class Fields extends SharePointQueryableCollection {\n\n    /**\n     * Creates a new instance of the Fields class\n     *\n     * @param baseUrl The url or SharePointQueryable which forms the parent of this fields collection\n     */\n    constructor(baseUrl: string | SharePointQueryable, path = \"fields\") {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Gets a field from the collection by title\n     *\n     * @param title The case-sensitive title of the field\n     */\n    public getByTitle(title: string): Field {\n        return new Field(this, `getByTitle('${title}')`);\n    }\n\n    /**\n     * Gets a field from the collection by using internal name or title\n     *\n     * @param name The case-sensitive internal name or title of the field\n     */\n    public getByInternalNameOrTitle(name: string): Field {\n        return new Field(this, `getByInternalNameOrTitle('${name}')`);\n    }\n\n    /**\n     * Gets a list from the collection by guid id\n     *\n     * @param title The Id of the list\n     */\n    public getById(id: string): Field {\n        const f: Field = new Field(this);\n        f.concat(`('${id}')`);\n        return f;\n    }\n\n    /**\n     * Creates a field based on the specified schema\n     */\n    public createFieldAsXml(xml: string | XmlSchemaFieldCreationInformation): Promise<FieldAddResult> {\n\n        let info: XmlSchemaFieldCreationInformation;\n        if (typeof xml === \"string\") {\n            info = { SchemaXml: xml };\n        } else {\n            info = xml as XmlSchemaFieldCreationInformation;\n        }\n\n        const postBody: string = JSON.stringify({\n            \"parameters\":\n                Util.extend({\n                    \"__metadata\":\n                        {\n                            \"type\": \"SP.XmlSchemaFieldCreationInformation\",\n                        },\n                }, info),\n        });\n\n        return this.clone(Fields, \"createfieldasxml\").postCore<{ Id: string }>({ body: postBody }).then((data) => {\n            return {\n                data: data,\n                field: this.getById(data.Id),\n            };\n        });\n    }\n\n    /**\n     * Adds a new field to the collection\n     *\n     * @param title The new field's title\n     * @param fieldType The new field's type (ex: SP.FieldText)\n     * @param properties Differ by type of field being created (see: https://msdn.microsoft.com/en-us/library/office/dn600182.aspx)\n     */\n    public add(title: string, fieldType: string, properties: FieldCreationProperties & { FieldTypeKind: number }): Promise<FieldAddResult> {\n\n        const postBody: string = JSON.stringify(Util.extend({\n            \"Title\": title,\n            \"__metadata\": { \"type\": fieldType },\n        }, properties));\n\n        return this.clone(Fields, null).postCore<{ Id: string }>({ body: postBody }).then((data) => {\n            return {\n                data: data,\n                field: this.getById(data.Id),\n            };\n        });\n    }\n\n    /**\n     * Adds a new SP.FieldText to the collection\n     *\n     * @param title The field title\n     * @param maxLength The maximum number of characters allowed in the value of the field.\n     * @param properties Differ by type of field being created (see: https://msdn.microsoft.com/en-us/library/office/dn600182.aspx)\n     */\n    public addText(title: string, maxLength = 255, properties?: FieldCreationProperties): Promise<FieldAddResult> {\n\n        const props: { FieldTypeKind: number, MaxLength: number } = {\n            FieldTypeKind: 2,\n            MaxLength: maxLength,\n        };\n\n        return this.add(title, \"SP.FieldText\", Util.extend(props, properties));\n    }\n\n    /**\n     * Adds a new SP.FieldCalculated to the collection\n     *\n     * @param title The field title.\n     * @param formula The formula for the field.\n     * @param dateFormat The date and time format that is displayed in the field.\n     * @param outputType Specifies the output format for the field. Represents a FieldType value.\n     * @param properties Differ by type of field being created (see: https://msdn.microsoft.com/en-us/library/office/dn600182.aspx)\n     */\n    public addCalculated(\n        title: string,\n        formula: string,\n        dateFormat: DateTimeFieldFormatType,\n        outputType: FieldTypes = FieldTypes.Text,\n        properties?: FieldCreationProperties): Promise<FieldAddResult> {\n\n        const props: {\n            DateFormat: DateTimeFieldFormatType;\n            FieldTypeKind: number;\n            Formula: string;\n            OutputType: FieldTypes;\n        } = {\n                DateFormat: dateFormat,\n                FieldTypeKind: 17,\n                Formula: formula,\n                OutputType: outputType,\n            };\n\n        return this.add(title, \"SP.FieldCalculated\", Util.extend(props, properties));\n    }\n\n    /**\n     * Adds a new SP.FieldDateTime to the collection\n     *\n     * @param title The field title\n     * @param displayFormat The format of the date and time that is displayed in the field.\n     * @param calendarType Specifies the calendar type of the field.\n     * @param properties Differ by type of field being created (see: https://msdn.microsoft.com/en-us/library/office/dn600182.aspx)\n     */\n    public addDateTime(\n        title: string,\n        displayFormat: DateTimeFieldFormatType = DateTimeFieldFormatType.DateOnly,\n        calendarType: CalendarType = CalendarType.Gregorian,\n        friendlyDisplayFormat = 0,\n        properties?: FieldCreationProperties): Promise<FieldAddResult> {\n\n        const props = {\n            DateTimeCalendarType: calendarType,\n            DisplayFormat: displayFormat,\n            FieldTypeKind: 4,\n            FriendlyDisplayFormat: friendlyDisplayFormat,\n        };\n\n        return this.add(title, \"SP.FieldDateTime\", Util.extend(props, properties));\n    }\n\n    /**\n     * Adds a new SP.FieldNumber to the collection\n     *\n     * @param title The field title\n     * @param minValue The field's minimum value\n     * @param maxValue The field's maximum value\n     * @param properties Differ by type of field being created (see: https://msdn.microsoft.com/en-us/library/office/dn600182.aspx)\n     */\n    public addNumber(\n        title: string,\n        minValue?: number,\n        maxValue?: number,\n        properties?: FieldCreationProperties): Promise<FieldAddResult> {\n\n        let props: { FieldTypeKind: number } = { FieldTypeKind: 9 };\n\n        if (typeof minValue !== \"undefined\") {\n            props = Util.extend({ MinimumValue: minValue }, props);\n        }\n\n        if (typeof maxValue !== \"undefined\") {\n            props = Util.extend({ MaximumValue: maxValue }, props);\n        }\n\n        return this.add(title, \"SP.FieldNumber\", Util.extend(props, properties));\n    }\n\n    /**\n     * Adds a new SP.FieldCurrency to the collection\n     *\n     * @param title The field title\n     * @param minValue The field's minimum value\n     * @param maxValue The field's maximum value\n     * @param currencyLocalId Specifies the language code identifier (LCID) used to format the value of the field\n     * @param properties Differ by type of field being created (see: https://msdn.microsoft.com/en-us/library/office/dn600182.aspx)\n     */\n    public addCurrency(\n        title: string,\n        minValue?: number,\n        maxValue?: number,\n        currencyLocalId = 1033,\n        properties?: FieldCreationProperties): Promise<FieldAddResult> {\n\n        let props: { CurrencyLocaleId: number; FieldTypeKind: number; } = {\n            CurrencyLocaleId: currencyLocalId,\n            FieldTypeKind: 10,\n        };\n\n        if (typeof minValue !== \"undefined\") {\n            props = Util.extend({ MinimumValue: minValue }, props);\n        }\n\n        if (typeof maxValue !== \"undefined\") {\n            props = Util.extend({ MaximumValue: maxValue }, props);\n        }\n\n        return this.add(title, \"SP.FieldCurrency\", Util.extend(props, properties));\n    }\n\n    /**\n     * Adds a new SP.FieldMultiLineText to the collection\n     *\n     * @param title The field title\n     * @param numberOfLines Specifies the number of lines of text to display for the field.\n     * @param richText Specifies whether the field supports rich formatting.\n     * @param restrictedMode Specifies whether the field supports a subset of rich formatting.\n     * @param appendOnly Specifies whether all changes to the value of the field are displayed in list forms.\n     * @param allowHyperlink Specifies whether a hyperlink is allowed as a value of the field.\n     * @param properties Differ by type of field being created (see: https://msdn.microsoft.com/en-us/library/office/dn600182.aspx)\n     *\n     */\n    public addMultilineText(\n        title: string,\n        numberOfLines = 6,\n        richText = true,\n        restrictedMode = false,\n        appendOnly = false,\n        allowHyperlink = true,\n        properties?: FieldCreationProperties): Promise<FieldAddResult> {\n\n        const props = {\n            AllowHyperlink: allowHyperlink,\n            AppendOnly: appendOnly,\n            FieldTypeKind: 3,\n            NumberOfLines: numberOfLines,\n            RestrictedMode: restrictedMode,\n            RichText: richText,\n        };\n\n        return this.add(title, \"SP.FieldMultiLineText\", Util.extend(props, properties));\n    }\n\n    /**\n     * Adds a new SP.FieldUrl to the collection\n     *\n     * @param title The field title\n     */\n    public addUrl(\n        title: string,\n        displayFormat: UrlFieldFormatType = UrlFieldFormatType.Hyperlink,\n        properties?: FieldCreationProperties): Promise<FieldAddResult> {\n\n        const props = {\n            DisplayFormat: displayFormat,\n            FieldTypeKind: 11,\n        };\n\n        return this.add(title, \"SP.FieldUrl\", Util.extend(props, properties));\n    }\n\n    /** Adds a user field to the colleciton\n    * \n    * @param title The new field's title\n    * @param selectionMode The selection mode of the field\n    * @param selectionGroup Value that specifies the identifier of the SharePoint group whose members can be selected as values of the field\n    * @param properties\n    */\n    public addUser(title: string,\n        selectionMode: FieldUserSelectionMode,\n        properties?: FieldCreationProperties): Promise<FieldAddResult> {\n\n        const props = {\n            FieldTypeKind: 20,\n            SelectionMode: selectionMode,\n        };\n\n        return this.add(title, \"SP.FieldUser\", Util.extend(props, properties));\n    }\n\n    /**\n     * Adds a SP.FieldLookup to the collection\n     *\n     * @param title The new field's title\n     * @param lookupListId The guid id of the list where the source of the lookup is found\n     * @param lookupFieldName The internal name of the field in the source list\n     * @param properties Set of additional properties to set on the new field\n     */\n    public addLookup(\n        title: string,\n        lookupListId: string,\n        lookupFieldName: string,\n        properties?: FieldCreationProperties): Promise<FieldAddResult> {\n\n        const postBody: string = JSON.stringify({\n            parameters: Util.extend({\n                FieldTypeKind: 7,\n                LookupFieldName: lookupFieldName,\n                LookupListId: lookupListId,\n                Title: title,\n                \"__metadata\": { \"type\": \"SP.FieldCreationInformation\" },\n            }, properties),\n        });\n\n        return this.clone(Fields, \"addfield\").postCore<{ Id: string }>({ body: postBody }).then((data) => {\n            return {\n                data: data,\n                field: this.getById(data.Id),\n            };\n        });\n    }\n\n    /**\n     * Adds a new SP.FieldChoice to the collection\n     *\n     * @param title The field title.\n     * @param choices The choices for the field.\n     * @param format The display format of the available options for the field.\n     * @param fillIn Specifies whether the field allows fill-in values.\n     * @param properties Differ by type of field being created (see: https://msdn.microsoft.com/en-us/library/office/dn600182.aspx)\n     */\n    public addChoice(\n        title: string,\n        choices: string[],\n        format: ChoiceFieldFormatType = ChoiceFieldFormatType.Dropdown,\n        fillIn?: boolean,\n        properties?: FieldCreationProperties): Promise<FieldAddResult> {\n\n        const props = {\n            Choices: {\n                results: choices,\n            },\n            EditFormat: format,\n            FieldTypeKind: 6,\n            FillInChoice: fillIn,\n        };\n\n        return this.add(title, \"SP.FieldChoice\", Util.extend(props, properties));\n    }\n\n    /**\n     * Adds a new SP.FieldMultiChoice to the collection\n     *\n     * @param title The field title.\n     * @param choices The choices for the field.\n     * @param fillIn Specifies whether the field allows fill-in values.\n     * @param properties Differ by type of field being created (see: https://msdn.microsoft.com/en-us/library/office/dn600182.aspx)\n     */\n    public addMultiChoice(\n        title: string,\n        choices: string[],\n        fillIn?: boolean,\n        properties?: FieldCreationProperties): Promise<FieldAddResult> {\n\n        const props = {\n            Choices: {\n                results: choices,\n            },\n            FieldTypeKind: 15,\n            FillInChoice: fillIn,\n        };\n\n        return this.add(title, \"SP.FieldMultiChoice\", Util.extend(props, properties));\n    }\n\n    /**\n     * Adds a new SP.FieldBoolean to the collection\n     *\n     * @param title The field title.\n     * @param properties Differ by type of field being created (see: https://msdn.microsoft.com/en-us/library/office/dn600182.aspx)\n     */\n    public addBoolean(\n        title: string,\n        properties?: FieldCreationProperties): Promise<FieldAddResult> {\n\n        const props = {\n            FieldTypeKind: 8,\n        };\n\n        return this.add(title, \"SP.Field\", Util.extend(props, properties));\n    }\n}\n\n/**\n * Describes a single of Field instance\n *\n */\nexport class Field extends SharePointQueryableInstance {\n\n    /**\n     * Updates this field intance with the supplied properties\n     *\n     * @param properties A plain object hash of values to update for the list\n     * @param fieldType The type value, required to update child field type properties\n     */\n    public update(properties: TypedHash<string | number | boolean>, fieldType = \"SP.Field\"): Promise<FieldUpdateResult> {\n\n        const postBody: string = JSON.stringify(Util.extend({\n            \"__metadata\": { \"type\": fieldType },\n        }, properties));\n\n        return this.postCore({\n            body: postBody,\n            headers: {\n                \"X-HTTP-Method\": \"MERGE\",\n            },\n        }).then((data) => {\n            return {\n                data: data,\n                field: this,\n            };\n        });\n    }\n\n    /**\n     * Delete this fields\n     *\n     */\n    public delete(): Promise<void> {\n        return this.postCore({\n            headers: {\n                \"X-HTTP-Method\": \"DELETE\",\n            },\n        });\n    }\n\n    /**\n     * Sets the value of the ShowInDisplayForm property for this field.\n     */\n    public setShowInDisplayForm(show: boolean): Promise<void> {\n        return this.clone(Field, `setshowindisplayform(${show})`).postCore();\n    }\n\n    /**\n     * Sets the value of the ShowInEditForm property for this field.\n     */\n    public setShowInEditForm(show: boolean): Promise<void> {\n        return this.clone(Field, `setshowineditform(${show})`).postCore();\n    }\n\n    /**\n     * Sets the value of the ShowInNewForm property for this field.\n     */\n    public setShowInNewForm(show: boolean): Promise<void> {\n        return this.clone(Field, `setshowinnewform(${show})`).postCore();\n    }\n}\n\n/**\n * This interface defines the result of adding a field\n */\nexport interface FieldAddResult {\n    data: any;\n    field: Field;\n}\n\nexport interface FieldUpdateResult {\n    data: any;\n    field: Field;\n}\n\n\n\n// WEBPACK FOOTER //\n// ../../../../packages/sp/src/fields.ts","import { SharePointQueryable, SharePointQueryableCollection, SharePointQueryableInstance } from \"./sharepointqueryable\";\n\n/**\n * Describes a collection of Field objects\n *\n */\nexport class Forms extends SharePointQueryableCollection {\n\n    /**\n     * Creates a new instance of the Fields class\n     *\n     * @param baseUrl The url or SharePointQueryable which forms the parent of this fields collection\n     */\n    constructor(baseUrl: string | SharePointQueryable, path = \"forms\") {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Gets a form by id\n     *\n     * @param id The guid id of the item to retrieve\n     */\n    public getById(id: string): Form {\n        const i = new Form(this);\n        i.concat(`('${id}')`);\n        return i;\n    }\n}\n\n/**\n * Describes a single of Form instance\n *\n */\nexport class Form extends SharePointQueryableInstance { }\n\n\n\n// WEBPACK FOOTER //\n// ../../../../packages/sp/src/forms.ts","import { SharePointQueryable, SharePointQueryableCollection, SharePointQueryableInstance } from \"./sharepointqueryable\";\n\n/**\n * Describes a collection of webhook subscriptions\n *\n */\nexport class Subscriptions extends SharePointQueryableCollection {\n\n    /**\n     * Creates a new instance of the Subscriptions class\n     *\n     * @param baseUrl - The url or SharePointQueryable which forms the parent of this webhook subscriptions collection\n     */\n    constructor(baseUrl: string | SharePointQueryable, path = \"subscriptions\") {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Returns all the webhook subscriptions or the specified webhook subscription\n     *\n     * @param subscriptionId The id of a specific webhook subscription to retrieve, omit to retrieve all the webhook subscriptions\n     */\n    public getById(subscriptionId: string): Subscription {\n        const subscription = new Subscription(this);\n        subscription.concat(`('${subscriptionId}')`);\n        return subscription;\n    }\n\n    /**\n     * Creates a new webhook subscription\n     *\n     * @param notificationUrl The url to receive the notifications\n     * @param expirationDate The date and time to expire the subscription in the form YYYY-MM-ddTHH:mm:ss+00:00 (maximum of 6 months)\n     * @param clientState A client specific string (defaults to pnp-js-core-subscription when omitted)\n     */\n    public add(notificationUrl: string, expirationDate: string, clientState?: string): Promise<SubscriptionAddResult> {\n\n        const postBody = JSON.stringify({\n            \"clientState\": clientState || \"pnp-js-core-subscription\",\n            \"expirationDateTime\": expirationDate,\n            \"notificationUrl\": notificationUrl,\n            \"resource\": this.toUrl(),\n        });\n\n        return this.postCore({ body: postBody, headers: { \"Content-Type\": \"application/json\" } }).then(result => {\n\n            return { data: result, subscription: this.getById(result.id) };\n        });\n    }\n}\n\n/**\n * Describes a single webhook subscription instance\n *\n */\nexport class Subscription extends SharePointQueryableInstance {\n\n    /**\n     * Renews this webhook subscription\n     *\n     * @param expirationDate The date and time to expire the subscription in the form YYYY-MM-ddTHH:mm:ss+00:00 (maximum of 6 months)\n     */\n    public update(expirationDate: string): Promise<SubscriptionUpdateResult> {\n\n        const postBody = JSON.stringify({\n            \"expirationDateTime\": expirationDate,\n        });\n\n        return this.patchCore({ body: postBody, headers: { \"Content-Type\": \"application/json\" } }).then(data => {\n            return { data: data, subscription: this };\n        });\n    }\n\n    /**\n     * Removes this webhook subscription\n     *\n     */\n    public delete(): Promise<void> {\n        return super.deleteCore();\n    }\n}\n\nexport interface SubscriptionAddResult {\n    subscription: Subscription;\n    data: any;\n}\n\nexport interface SubscriptionUpdateResult {\n    subscription: Subscription;\n    data: any;\n}\n\n\n\n// WEBPACK FOOTER //\n// ../../../../packages/sp/src/subscriptions.ts","import { SharePointQueryable, SharePointQueryableInstance, SharePointQueryableCollection } from \"./sharepointqueryable\";\nimport { Util, TypedHash } from \"@pnp/common\";\n\n/**\n * Describes a collection of user custom actions\n *\n */\nexport class UserCustomActions extends SharePointQueryableCollection {\n\n    /**\n     * Creates a new instance of the UserCustomActions class\n     *\n     * @param baseUrl The url or SharePointQueryable which forms the parent of this user custom actions collection\n     */\n    constructor(baseUrl: string | SharePointQueryable, path = \"usercustomactions\") {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Returns the user custom action with the specified id\n     *\n     * @param id The GUID id of the user custom action to retrieve\n     */\n    public getById(id: string): UserCustomAction {\n        const uca = new UserCustomAction(this);\n        uca.concat(`('${id}')`);\n        return uca;\n    }\n\n    /**\n     * Creates a user custom action\n     *\n     * @param properties The information object of property names and values which define the new user custom action\n     *\n     */\n    public add(properties: TypedHash<string | boolean | number>): Promise<UserCustomActionAddResult> {\n\n        const postBody = JSON.stringify(Util.extend({ __metadata: { \"type\": \"SP.UserCustomAction\" } }, properties));\n\n        return this.postCore({ body: postBody }).then((data) => {\n            return {\n                action: this.getById(data.Id),\n                data: data,\n            };\n        });\n    }\n\n    /**\n     * Deletes all user custom actions in the collection\n     *\n     */\n    public clear(): Promise<void> {\n        return this.clone(UserCustomActions, \"clear\").postCore();\n    }\n}\n\n/**\n * Describes a single user custom action\n *\n */\nexport class UserCustomAction extends SharePointQueryableInstance {\n\n    /**\n    * Updates this user custom action with the supplied properties\n    *\n    * @param properties An information object of property names and values to update for this user custom action\n    */\n    public update(properties: TypedHash<string | boolean | number>): Promise<UserCustomActionUpdateResult> {\n\n        const postBody = JSON.stringify(Util.extend({\n            \"__metadata\": { \"type\": \"SP.UserCustomAction\" },\n        }, properties));\n\n        return this.postCore({\n            body: postBody,\n            headers: {\n                \"X-HTTP-Method\": \"MERGE\",\n            },\n        }).then((data) => {\n            return {\n                action: this,\n                data: data,\n            };\n        });\n    }\n\n    /**\n    * Removes this user custom action\n    *\n    */\n    public delete(): Promise<void> {\n        return super.deleteCore();\n    }\n}\n\n/**\n * Result from adding a user custom action\n *\n */\nexport interface UserCustomActionAddResult {\n    data: any;\n    action: UserCustomAction;\n}\n\n/**\n * Result from udating a user custom action\n *\n */\nexport interface UserCustomActionUpdateResult {\n    data: any;\n    action: UserCustomAction;\n}\n\n\n\n// WEBPACK FOOTER //\n// ../../../../packages/sp/src/usercustomactions.ts","import { Items } from \"./items\";\nimport { Views, View } from \"./views\";\nimport { ContentTypes } from \"./contenttypes\";\nimport { Fields } from \"./fields\";\nimport { Forms } from \"./forms\";\nimport { Subscriptions } from \"./subscriptions\";\nimport { SharePointQueryable, SharePointQueryableCollection } from \"./sharepointqueryable\";\nimport { SharePointQueryableSecurable } from \"./sharepointqueryablesecurable\";\nimport { Util, TypedHash } from \"@pnp/common\";\nimport { ControlMode, RenderListData, ChangeQuery, CamlQuery, ChangeLogitemQuery, ListFormData, RenderListDataParameters } from \"./types\";\nimport { UserCustomActions } from \"./usercustomactions\";\nimport { spExtractODataId } from \"./odata\";\nimport { NotSupportedInBatchException } from \"./exceptions\";\nimport { Folder } from \"./folders\";\n\n/**\n * Describes a collection of List objects\n *\n */\nexport class Lists extends SharePointQueryableCollection {\n\n    /**\n     * Creates a new instance of the Lists class\n     *\n     * @param baseUrl The url or SharePointQueryable which forms the parent of this fields collection\n     */\n    constructor(baseUrl: string | SharePointQueryable, path = \"lists\") {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Gets a list from the collection by title\n     *\n     * @param title The title of the list\n     */\n    public getByTitle(title: string): List {\n        return new List(this, `getByTitle('${title}')`);\n    }\n\n    /**\n     * Gets a list from the collection by guid id\n     *\n     * @param id The Id of the list (GUID)\n     */\n    public getById(id: string): List {\n        const list = new List(this);\n        list.concat(`('${id}')`);\n        return list;\n    }\n\n    /**\n     * Adds a new list to the collection\n     *\n     * @param title The new list's title\n     * @param description The new list's description\n     * @param template The list template value\n     * @param enableContentTypes If true content types will be allowed and enabled, otherwise they will be disallowed and not enabled\n     * @param additionalSettings Will be passed as part of the list creation body\n     */\n    public add(title: string, description = \"\", template = 100, enableContentTypes = false, additionalSettings: TypedHash<string | number | boolean> = {}): Promise<ListAddResult> {\n\n        const addSettings = Util.extend({\n            \"AllowContentTypes\": enableContentTypes,\n            \"BaseTemplate\": template,\n            \"ContentTypesEnabled\": enableContentTypes,\n            \"Description\": description,\n            \"Title\": title,\n            \"__metadata\": { \"type\": \"SP.List\" },\n        }, additionalSettings);\n\n        return this.postCore({ body: JSON.stringify(addSettings) }).then((data) => {\n            return { data: data, list: this.getByTitle(addSettings.Title) };\n        });\n    }\n\n    /**\n     * Ensures that the specified list exists in the collection (note: this method not supported for batching)\n     *\n     * @param title The new list's title\n     * @param description The new list's description\n     * @param template The list template value\n     * @param enableContentTypes If true content types will be allowed and enabled, otherwise they will be disallowed and not enabled\n     * @param additionalSettings Will be passed as part of the list creation body or used to update an existing list\n     */\n    public ensure(\n        title: string,\n        description = \"\",\n        template = 100,\n        enableContentTypes = false,\n        additionalSettings: TypedHash<string | number | boolean> = {}): Promise<ListEnsureResult> {\n\n        if (this.hasBatch) {\n            throw new NotSupportedInBatchException(\"The ensure list method\");\n        }\n\n        return new Promise((resolve, reject) => {\n\n            const addOrUpdateSettings = Util.extend(additionalSettings, { Title: title, Description: description, ContentTypesEnabled: enableContentTypes }, true);\n\n            const list: List = this.getByTitle(addOrUpdateSettings.Title);\n\n            list.get().then(_ => {\n\n                list.update(addOrUpdateSettings).then(d => {\n                    resolve({ created: false, data: d, list: this.getByTitle(addOrUpdateSettings.Title) });\n                }).catch(e => reject(e));\n\n            }).catch(_ => {\n\n                this.add(title, description, template, enableContentTypes, addOrUpdateSettings).then((r) => {\n                    resolve({ created: true, data: r.data, list: this.getByTitle(addOrUpdateSettings.Title) });\n                }).catch((e) => reject(e));\n            });\n        });\n    }\n\n    /**\n     * Gets a list that is the default asset location for images or other files, which the users upload to their wiki pages.\n     */\n    public ensureSiteAssetsLibrary(): Promise<List> {\n        return this.clone(Lists, \"ensuresiteassetslibrary\").postCore().then((json) => {\n            return new List(spExtractODataId(json));\n        });\n    }\n\n    /**\n     * Gets a list that is the default location for wiki pages.\n     */\n    public ensureSitePagesLibrary(): Promise<List> {\n        return this.clone(Lists, \"ensuresitepageslibrary\").postCore().then((json) => {\n            return new List(spExtractODataId(json));\n        });\n    }\n}\n\n\n/**\n * Describes a single List instance\n *\n */\nexport class List extends SharePointQueryableSecurable {\n\n    /**\n     * Gets the content types in this list\n     *\n     */\n    public get contentTypes(): ContentTypes {\n        return new ContentTypes(this);\n    }\n\n    /**\n     * Gets the items in this list\n     *\n     */\n    public get items(): Items {\n        return new Items(this);\n    }\n\n    /**\n     * Gets the views in this list\n     *\n     */\n    public get views(): Views {\n        return new Views(this);\n    }\n\n    /**\n     * Gets the fields in this list\n     *\n     */\n    public get fields(): Fields {\n        return new Fields(this);\n    }\n\n    /**\n     * Gets the forms in this list\n     *\n     */\n    public get forms(): Forms {\n        return new Forms(this);\n    }\n\n    /**\n     * Gets the default view of this list\n     *\n     */\n    public get defaultView(): View {\n        return new View(this, \"DefaultView\");\n    }\n\n    /**\n     * Get all custom actions on a site collection\n     *\n     */\n    public get userCustomActions(): UserCustomActions {\n        return new UserCustomActions(this);\n    }\n\n    /**\n     * Gets the effective base permissions of this list\n     *\n     */\n    public get effectiveBasePermissions(): SharePointQueryable {\n        return new SharePointQueryable(this, \"EffectiveBasePermissions\");\n    }\n\n    /**\n     * Gets the event receivers attached to this list\n     *\n     */\n    public get eventReceivers(): SharePointQueryableCollection {\n        return new SharePointQueryableCollection(this, \"EventReceivers\");\n    }\n\n    /**\n     * Gets the related fields of this list\n     *\n     */\n    public get relatedFields(): SharePointQueryable {\n        return new SharePointQueryable(this, \"getRelatedFields\");\n    }\n\n    /**\n     * Gets the IRM settings for this list\n     *\n     */\n    public get informationRightsManagementSettings(): SharePointQueryable {\n        return new SharePointQueryable(this, \"InformationRightsManagementSettings\");\n    }\n\n    /**\n     * Gets the webhook subscriptions of this list\n     *\n     */\n    public get subscriptions(): Subscriptions {\n        return new Subscriptions(this);\n    }\n\n    /**\n     * The root folder of the list\n     */\n    public get rootFolder(): Folder {\n        return new Folder(this, \"rootFolder\");\n    }\n\n    /**\n     * Gets a view by view guid id\n     *\n     */\n    public getView(viewId: string): View {\n        return new View(this, `getView('${viewId}')`);\n    }\n\n    /**\n     * Updates this list intance with the supplied properties\n     *\n     * @param properties A plain object hash of values to update for the list\n     * @param eTag Value used in the IF-Match header, by default \"*\"\n     */\n    /* tslint:disable no-string-literal */\n    public update(properties: TypedHash<string | number | boolean>, eTag = \"*\"): Promise<ListUpdateResult> {\n\n        const postBody = JSON.stringify(Util.extend({\n            \"__metadata\": { \"type\": \"SP.List\" },\n        }, properties));\n\n        return this.postCore({\n            body: postBody,\n            headers: {\n                \"IF-Match\": eTag,\n                \"X-HTTP-Method\": \"MERGE\",\n            },\n        }).then((data) => {\n\n            let retList: List = this;\n\n            if (properties.hasOwnProperty(\"Title\")) {\n                retList = this.getParent(List, this.parentUrl, `getByTitle('${properties[\"Title\"]}')`);\n            }\n\n            return {\n                data: data,\n                list: retList,\n            };\n        });\n    }\n    /* tslint:enable */\n\n    /**\n     * Delete this list\n     *\n     * @param eTag Value used in the IF-Match header, by default \"*\"\n     */\n    public delete(eTag = \"*\"): Promise<void> {\n        return this.postCore({\n            headers: {\n                \"IF-Match\": eTag,\n                \"X-HTTP-Method\": \"DELETE\",\n            },\n        });\n    }\n\n    /**\n     * Returns the collection of changes from the change log that have occurred within the list, based on the specified query.\n     */\n    public getChanges(query: ChangeQuery): Promise<any> {\n\n        return this.clone(List, \"getchanges\").postCore({\n            body: JSON.stringify({ \"query\": Util.extend({ \"__metadata\": { \"type\": \"SP.ChangeQuery\" } }, query) }),\n        });\n    }\n\n    /**\n     * Returns a collection of items from the list based on the specified query.\n     *\n     * @param CamlQuery The Query schema of Collaborative Application Markup\n     * Language (CAML) is used in various ways within the context of Microsoft SharePoint Foundation\n     * to define queries against list data.\n     * see:\n     *\n     * https://msdn.microsoft.com/en-us/library/office/ms467521.aspx\n     *\n     * @param expands A URI with a $expand System Query Option indicates that Entries associated with\n     * the Entry or Collection of Entries identified by the Resource Path\n     * section of the URI must be represented inline (i.e. eagerly loaded).\n     * see:\n     *\n     * https://msdn.microsoft.com/en-us/library/office/fp142385.aspx\n     *\n     * http://www.odata.org/documentation/odata-version-2-0/uri-conventions/#ExpandSystemQueryOption\n     */\n    public getItemsByCAMLQuery(query: CamlQuery, ...expands: string[]): Promise<any> {\n\n        const q = this.clone(List, \"getitems\");\n        return q.expand.apply(q, expands).postCore({\n            body: JSON.stringify({ \"query\": Util.extend({ \"__metadata\": { \"type\": \"SP.CamlQuery\" } }, query) }),\n        });\n    }\n\n    /**\n     * See: https://msdn.microsoft.com/en-us/library/office/dn292554.aspx\n     */\n    public getListItemChangesSinceToken(query: ChangeLogitemQuery): Promise<string> {\n\n        return this.clone(List, \"getlistitemchangessincetoken\").postCore({\n            body: JSON.stringify({ \"query\": Util.extend({ \"__metadata\": { \"type\": \"SP.ChangeLogItemQuery\" } }, query) }),\n        }, { parse(r) { return r.text(); } });\n    }\n\n    /**\n     * Moves the list to the Recycle Bin and returns the identifier of the new Recycle Bin item.\n     */\n    public recycle(): Promise<string> {\n        return this.clone(List, \"recycle\").postCore().then(data => {\n            if (data.hasOwnProperty(\"Recycle\")) {\n                return data.Recycle;\n            } else {\n                return data;\n            }\n        });\n    }\n\n    /**\n     * Renders list data based on the view xml provided\n     */\n    public renderListData(viewXml: string): Promise<RenderListData> {\n\n        const q = this.clone(List, \"renderlistdata(@viewXml)\");\n        q.query.add(\"@viewXml\", `'${viewXml}'`);\n        return q.postCore().then(data => {\n            // data will be a string, so we parse it again\n            data = JSON.parse(data);\n            if (data.hasOwnProperty(\"RenderListData\")) {\n                return data.RenderListData;\n            } else {\n                return data;\n            }\n        });\n    }\n\n    /**\n     * Returns the data for the specified query view\n     * \n     * @param parameters The parameters to be used to render list data as JSON string.\n     * @param overrideParameters The parameters that are used to override and extend the regular SPRenderListDataParameters.\n     */\n    public renderListDataAsStream(parameters: RenderListDataParameters, overrideParameters: any = null): Promise<any> {\n\n        const postBody = {\n            overrideParameters: Util.extend({\n                \"__metadata\": { \"type\": \"SP.RenderListDataOverrideParameters\" },\n            }, overrideParameters),\n            parameters: Util.extend({\n                \"__metadata\": { \"type\": \"SP.RenderListDataParameters\" },\n            }, parameters),\n        };\n\n        return this.clone(List, \"RenderListDataAsStream\", true).postCore({\n            body: JSON.stringify(postBody),\n        });\n    }\n\n    /**\n     * Gets the field values and field schema attributes for a list item.\n     */\n    public renderListFormData(itemId: number, formId: string, mode: ControlMode): Promise<ListFormData> {\n        return this.clone(List, `renderlistformdata(itemid=${itemId}, formid='${formId}', mode='${mode}')`).postCore().then(data => {\n            // data will be a string, so we parse it again\n            data = JSON.parse(data);\n            if (data.hasOwnProperty(\"ListData\")) {\n                return data.ListData;\n            } else {\n                return data;\n            }\n        });\n    }\n\n    /**\n     * Reserves a list item ID for idempotent list item creation.\n     */\n    public reserveListItemId(): Promise<number> {\n        return this.clone(List, \"reservelistitemid\").postCore().then(data => {\n            if (data.hasOwnProperty(\"ReserveListItemId\")) {\n                return data.ReserveListItemId;\n            } else {\n                return data;\n            }\n        });\n    }\n\n    /**\n     * Returns the ListItemEntityTypeFullName for this list, used when adding/updating list items. Does not support batching.\n     *\n     */\n    public getListItemEntityTypeFullName(): Promise<string> {\n        return this.clone(List, null, false).select(\"ListItemEntityTypeFullName\").get<{ ListItemEntityTypeFullName: string }>().then(o => o.ListItemEntityTypeFullName);\n    }\n}\n\nexport interface ListAddResult {\n    list: List;\n    data: any;\n}\n\nexport interface ListUpdateResult {\n    list: List;\n    data: any;\n}\n\nexport interface ListEnsureResult {\n    list: List;\n    created: boolean;\n    data: any;\n}\n\n\n\n// WEBPACK FOOTER //\n// ../../../../packages/sp/src/lists.ts","import { SharePointQueryable, SharePointQueryableCollection, SharePointQueryableInstance } from \"./sharepointqueryable\";\nimport { SharePointQueryableShareableItem } from \"./sharepointqueryableshareable\";\nimport { Folder } from \"./folders\";\nimport { File } from \"./files\";\nimport { ContentType } from \"./contenttypes\";\nimport { Util, TypedHash } from \"@pnp/common\";\nimport { ListItemFormUpdateValue } from \"./types\";\nimport { ODataParserBase } from \"@pnp/odata\";\nimport { AttachmentFiles } from \"./attachmentfiles\";\nimport { List } from \"./lists\";\nimport { Logger, LogLevel } from \"@pnp/logging\";\n\n/**\n * Describes a collection of Item objects\n *\n */\nexport class Items extends SharePointQueryableCollection {\n\n    /**\n     * Creates a new instance of the Items class\n     *\n     * @param baseUrl The url or SharePointQueryable which forms the parent of this fields collection\n     */\n    constructor(baseUrl: string | SharePointQueryable, path = \"items\") {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Gets an Item by id\n     *\n     * @param id The integer id of the item to retrieve\n     */\n    public getById(id: number): Item {\n        const i = new Item(this);\n        i.concat(`(${id})`);\n        return i;\n    }\n\n    /**\n     * Gets BCS Item by string id\n     *\n     * @param stringId The string id of the BCS item to retrieve\n     */\n    public getItemByStringId(stringId: string): Item {\n        // creates an item with the parent list path and append out method call\n        return new Item(this.parentUrl, `getItemByStringId('${stringId}')`);\n    }\n\n    /**\n     * Skips the specified number of items (https://msdn.microsoft.com/en-us/library/office/fp142385.aspx#sectionSection6)\n     *\n     * @param skip The starting id where the page should start, use with top to specify pages\n     * @param reverse It true the PagedPrev=true parameter is added allowing backwards navigation in the collection\n     */\n    public skip(skip: number, reverse = false): this {\n        if (reverse) {\n            this._query.add(\"$skiptoken\", encodeURIComponent(`Paged=TRUE&PagedPrev=TRUE&p_ID=${skip}`));\n        } else {\n            this._query.add(\"$skiptoken\", encodeURIComponent(`Paged=TRUE&p_ID=${skip}`));\n        }\n        return this;\n    }\n\n    /**\n     * Gets a collection designed to aid in paging through data\n     *\n     */\n    public getPaged(): Promise<PagedItemCollection<any>> {\n        return this.get(new PagedItemCollectionParser());\n    }\n\n    /**\n     * Gets all the items in a list, regardless of count. Does not support batching or caching\n     *\n     *  @param requestSize Number of items to return in each request (Default: 2000)\n     */\n    public getAll(requestSize = 2000): Promise<any[]> {\n\n        Logger.write(\"Calling items.getAll should be done sparingly. Ensure this is the correct choice. If you are unsure, it is not.\", LogLevel.Warning);\n\n        // this will be used for the actual query\n        // and we set no metadata here to try and reduce traffic\n        const items = new Items(this, \"\").top(requestSize).configure({\n            headers: {\n                \"Accept\": \"application/json;odata=nometadata\",\n            },\n        });\n\n        // let's copy over the odata query params that can be applied\n        // $top - allow setting the page size this way (override what we did above)\n        // $select - allow picking the return fields (good behavior)\n        // $filter - allow setting a filter, though this may fail due for large lists\n        this.query.getKeys()\n            .filter(k => /^\\$select$|^\\$filter$|^\\$top$/.test(k.toLowerCase()))\n            .reduce((i, k) => {\n                i.query.add(k, this.query.get(k));\n                return i;\n            }, items);\n\n        // give back the promise\n        return new Promise((resolve, reject) => {\n\n            // this will eventually hold the items we return\n            const itemsCollector: any[] = [];\n\n            // action that will gather up our results recursively\n            const gatherer = (last: PagedItemCollection<any>) => {\n\n                // collect that set of results\n                [].push.apply(itemsCollector, last.results);\n\n                // if we have more, repeat - otherwise resolve with the collected items\n                if (last.hasNext) {\n                    last.getNext().then(gatherer).catch(reject);\n                } else {\n                    resolve(itemsCollector);\n                }\n            };\n\n            // start the cycle\n            items.getPaged().then(gatherer).catch(reject);\n        });\n    }\n\n    /**\n     * Adds a new item to the collection\n     *\n     * @param properties The new items's properties\n     * @param listItemEntityTypeFullName The type name of the list's entities\n     */\n    public add(properties: TypedHash<any> = {}, listItemEntityTypeFullName: string = null): Promise<ItemAddResult> {\n\n        const removeDependency = this.addBatchDependency();\n\n        return this.ensureListItemEntityTypeName(listItemEntityTypeFullName).then(listItemEntityType => {\n\n            const postBody = JSON.stringify(Util.extend({\n                \"__metadata\": { \"type\": listItemEntityType },\n            }, properties));\n\n            const promise = this.clone(Items, null).postCore<{ Id: number }>({ body: postBody }).then((data) => {\n                return {\n                    data: data,\n                    item: this.getById(data.Id),\n                };\n            });\n\n            removeDependency();\n\n            return promise;\n        });\n    }\n\n    /**\n     * Ensures we have the proper list item entity type name, either from the value provided or from the list\n     *\n     * @param candidatelistItemEntityTypeFullName The potential type name\n     */\n    private ensureListItemEntityTypeName(candidatelistItemEntityTypeFullName: string): Promise<string> {\n\n        return candidatelistItemEntityTypeFullName ?\n            Promise.resolve(candidatelistItemEntityTypeFullName) :\n            this.getParent(List).getListItemEntityTypeFullName();\n    }\n}\n\n/**\n * Descrines a single Item instance\n *\n */\nexport class Item extends SharePointQueryableShareableItem {\n\n    /**\n     * Gets the set of attachments for this item\n     *\n     */\n    public get attachmentFiles(): AttachmentFiles {\n        return new AttachmentFiles(this);\n    }\n\n    /**\n     * Gets the content type for this item\n     *\n     */\n    public get contentType(): ContentType {\n        return new ContentType(this, \"ContentType\");\n    }\n\n    /**\n     * Gets the effective base permissions for the item\n     *\n     */\n    public get effectiveBasePermissions(): SharePointQueryable {\n        return new SharePointQueryable(this, \"EffectiveBasePermissions\");\n    }\n\n    /**\n     * Gets the effective base permissions for the item in a UI context\n     *\n     */\n    public get effectiveBasePermissionsForUI(): SharePointQueryable {\n        return new SharePointQueryable(this, \"EffectiveBasePermissionsForUI\");\n    }\n\n    /**\n     * Gets the field values for this list item in their HTML representation\n     *\n     */\n    public get fieldValuesAsHTML(): SharePointQueryableInstance {\n        return new SharePointQueryableInstance(this, \"FieldValuesAsHTML\");\n    }\n\n    /**\n     * Gets the field values for this list item in their text representation\n     *\n     */\n    public get fieldValuesAsText(): SharePointQueryableInstance {\n        return new SharePointQueryableInstance(this, \"FieldValuesAsText\");\n    }\n\n    /**\n     * Gets the field values for this list item for use in editing controls\n     *\n     */\n    public get fieldValuesForEdit(): SharePointQueryableInstance {\n        return new SharePointQueryableInstance(this, \"FieldValuesForEdit\");\n    }\n\n    /**\n     * Gets the folder associated with this list item (if this item represents a folder)\n     *\n     */\n    public get folder(): Folder {\n        return new Folder(this, \"folder\");\n    }\n\n    /**\n     * Gets the folder associated with this list item (if this item represents a folder)\n     *\n     */\n    public get file(): File {\n        return new File(this, \"file\");\n    }\n\n    /**\n     * Gets the collection of versions associated with this item\n     */\n    public get versions(): ItemVersions {\n        return new ItemVersions(this);\n    }\n\n    /**\n     * Updates this list intance with the supplied properties\n     *\n     * @param properties A plain object hash of values to update for the list\n     * @param eTag Value used in the IF-Match header, by default \"*\"\n     * @param listItemEntityTypeFullName The type name of the list's entities\n     */\n    public update(properties: TypedHash<any>, eTag = \"*\", listItemEntityTypeFullName: string = null): Promise<ItemUpdateResult> {\n\n        return new Promise<ItemUpdateResult>((resolve, reject) => {\n\n            const removeDependency = this.addBatchDependency();\n\n            return this.ensureListItemEntityTypeName(listItemEntityTypeFullName).then(listItemEntityType => {\n\n                const postBody = JSON.stringify(Util.extend({\n                    \"__metadata\": { \"type\": listItemEntityType },\n                }, properties));\n\n                removeDependency();\n\n                return this.postCore({\n                    body: postBody,\n                    headers: {\n                        \"IF-Match\": eTag,\n                        \"X-HTTP-Method\": \"MERGE\",\n                    },\n                }, new ItemUpdatedParser()).then((data) => {\n                    resolve({\n                        data: data,\n                        item: this,\n                    });\n                });\n            }).catch(e => reject(e));\n        });\n    }\n\n    /**\n     * Delete this item\n     *\n     * @param eTag Value used in the IF-Match header, by default \"*\"\n     */\n    public delete(eTag = \"*\"): Promise<void> {\n        return this.postCore({\n            headers: {\n                \"IF-Match\": eTag,\n                \"X-HTTP-Method\": \"DELETE\",\n            },\n        });\n    }\n\n    /**\n     * Moves the list item to the Recycle Bin and returns the identifier of the new Recycle Bin item.\n     */\n    public recycle(): Promise<string> {\n        return this.clone(Item, \"recycle\").postCore();\n    }\n\n    /**\n     * Gets a string representation of the full URL to the WOPI frame.\n     * If there is no associated WOPI application, or no associated action, an empty string is returned.\n     *\n     * @param action Display mode: 0: view, 1: edit, 2: mobileView, 3: interactivePreview\n     */\n    public getWopiFrameUrl(action = 0): Promise<string> {\n        const i = this.clone(Item, \"getWOPIFrameUrl(@action)\");\n        i._query.add(\"@action\", <any>action);\n        return i.postCore().then((data: any) => {\n\n            // handle verbose mode\n            if (data.hasOwnProperty(\"GetWOPIFrameUrl\")) {\n                return data.GetWOPIFrameUrl;\n            }\n\n            return data;\n        });\n    }\n\n    /**\n     * Validates and sets the values of the specified collection of fields for the list item.\n     *\n     * @param formValues The fields to change and their new values.\n     * @param newDocumentUpdate true if the list item is a document being updated after upload; otherwise false.\n     */\n    public validateUpdateListItem(formValues: ListItemFormUpdateValue[], newDocumentUpdate = false): Promise<ListItemFormUpdateValue[]> {\n        return this.clone(Item, \"validateupdatelistitem\").postCore({\n            body: JSON.stringify({ \"formValues\": formValues, bNewDocumentUpdate: newDocumentUpdate }),\n        });\n    }\n\n    /**\n     * Ensures we have the proper list item entity type name, either from the value provided or from the list\n     *\n     * @param candidatelistItemEntityTypeFullName The potential type name\n     */\n    private ensureListItemEntityTypeName(candidatelistItemEntityTypeFullName: string): Promise<string> {\n\n        return candidatelistItemEntityTypeFullName ?\n            Promise.resolve(candidatelistItemEntityTypeFullName) :\n            this.getParent(List, this.parentUrl.substr(0, this.parentUrl.lastIndexOf(\"/\"))).getListItemEntityTypeFullName();\n    }\n}\n\nexport interface ItemAddResult {\n    item: Item;\n    data: any;\n}\n\nexport interface ItemUpdateResult {\n    item: Item;\n    data: ItemUpdateResultData;\n}\n\nexport interface ItemUpdateResultData {\n    \"odata.etag\": string;\n}\n\n/**\n * Describes a collection of Version objects\n *\n */\nexport class ItemVersions extends SharePointQueryableCollection {\n\n    /**\n     * Creates a new instance of the File class\n     *\n     * @param baseUrl The url or SharePointQueryable which forms the parent of this fields collection\n     */\n    constructor(baseUrl: string | SharePointQueryable, path = \"versions\") {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Gets a version by id\n     *\n     * @param versionId The id of the version to retrieve\n     */\n    public getById(versionId: number): ItemVersion {\n        const v = new ItemVersion(this);\n        v.concat(`(${versionId})`);\n        return v;\n    }\n}\n\n\n/**\n * Describes a single Version instance\n *\n */\nexport class ItemVersion extends SharePointQueryableInstance {\n\n    /**\n    * Delete a specific version of a file.\n    *\n    * @param eTag Value used in the IF-Match header, by default \"*\"\n    */\n    public delete(): Promise<void> {\n        return this.postCore({\n            headers: {\n                \"X-HTTP-Method\": \"DELETE\",\n            },\n        });\n    }\n}\n\n/**\n * Provides paging functionality for list items\n */\nexport class PagedItemCollection<T> {\n\n    constructor(private nextUrl: string, public results: T) { }\n\n    /**\n     * If true there are more results available in the set, otherwise there are not\n     */\n    public get hasNext(): boolean {\n        return typeof this.nextUrl === \"string\" && this.nextUrl.length > 0;\n    }\n\n    /**\n     * Gets the next set of results, or resolves to null if no results are available\n     */\n    public getNext(): Promise<PagedItemCollection<any>> {\n\n        if (this.hasNext) {\n            const items = new Items(this.nextUrl, null);\n            return items.getPaged();\n        }\n\n        return new Promise<any>(r => r(null));\n    }\n}\n\nclass PagedItemCollectionParser extends ODataParserBase<PagedItemCollection<any>> {\n    public parse(r: Response): Promise<PagedItemCollection<any>> {\n\n        return new Promise<PagedItemCollection<any>>((resolve, reject) => {\n\n            if (this.handleError(r, reject)) {\n                r.json().then(json => {\n                    const nextUrl = json.hasOwnProperty(\"d\") && json.d.hasOwnProperty(\"__next\") ? json.d.__next : json[\"odata.nextLink\"];\n                    resolve(new PagedItemCollection(nextUrl, this.parseODataJSON(json)));\n                });\n            }\n        });\n    }\n}\n\nclass ItemUpdatedParser extends ODataParserBase<ItemUpdateResultData> {\n    public parse(r: Response): Promise<ItemUpdateResultData> {\n\n        return new Promise<ItemUpdateResultData>((resolve, reject) => {\n\n            if (this.handleError(r, reject)) {\n                resolve({\n                    \"odata.etag\": r.headers.get(\"etag\"),\n                });\n            }\n        });\n    }\n}\n\n\n\n\n// WEBPACK FOOTER //\n// ../../../../packages/sp/src/items.ts","import { SharePointQueryable, SharePointQueryableCollection, SharePointQueryableInstance } from \"./sharepointqueryable\";\nimport { TextParser, BlobParser, JSONParser, BufferParser } from \"@pnp/odata\";\nimport { Util } from \"@pnp/common\";\nimport { MaxCommentLengthException } from \"./exceptions\";\nimport { LimitedWebPartManager } from \"./webparts\";\nimport { Item } from \"./items\";\nimport { SharePointQueryableShareableFile } from \"./sharepointqueryableshareable\";\nimport { spGetEntityUrl } from \"./odata\";\n\nexport interface ChunkedFileUploadProgressData {\n    stage: \"starting\" | \"continue\" | \"finishing\";\n    blockNumber: number;\n    totalBlocks: number;\n    chunkSize: number;\n    currentPointer: number;\n    fileSize: number;\n}\n\n/**\n * Describes a collection of File objects\n *\n */\nexport class Files extends SharePointQueryableCollection {\n\n    /**\n     * Creates a new instance of the Files class\n     *\n     * @param baseUrl The url or SharePointQueryable which forms the parent of this fields collection\n     */\n    constructor(baseUrl: string | SharePointQueryable, path = \"files\") {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Gets a File by filename\n     *\n     * @param name The name of the file, including extension.\n     */\n    public getByName(name: string): File {\n        const f = new File(this);\n        f.concat(`('${name}')`);\n        return f;\n    }\n\n    /**\n     * Uploads a file. Not supported for batching\n     *\n     * @param url The folder-relative url of the file.\n     * @param content The file contents blob.\n     * @param shouldOverWrite Should a file with the same name in the same location be overwritten? (default: true)\n     * @returns The new File and the raw response.\n     */\n    public add(url: string, content: string | ArrayBuffer | Blob, shouldOverWrite = true): Promise<FileAddResult> {\n        return new Files(this, `add(overwrite=${shouldOverWrite},url='${url}')`)\n            .postCore({\n                body: content,\n            }).then((response) => {\n                return {\n                    data: response,\n                    file: this.getByName(url),\n                };\n            });\n    }\n\n    /**\n     * Uploads a file. Not supported for batching\n     *\n     * @param url The folder-relative url of the file.\n     * @param content The Blob file content to add\n     * @param progress A callback function which can be used to track the progress of the upload\n     * @param shouldOverWrite Should a file with the same name in the same location be overwritten? (default: true)\n     * @param chunkSize The size of each file slice, in bytes (default: 10485760)\n     * @returns The new File and the raw response.\n     */\n    public addChunked(\n        url: string,\n        content: Blob,\n        progress?: (data: ChunkedFileUploadProgressData) => void,\n        shouldOverWrite = true,\n        chunkSize = 10485760,\n    ): Promise<FileAddResult> {\n        const adder = this.clone(Files, `add(overwrite=${shouldOverWrite},url='${url}')`, false);\n        return adder.postCore()\n            .then(() => this.getByName(url))\n            .then(file => file.setContentChunked(content, progress, chunkSize));\n    }\n\n    /**\n     * Adds a ghosted file to an existing list or document library. Not supported for batching.\n     *\n     * @param fileUrl The server-relative url where you want to save the file.\n     * @param templateFileType The type of use to create the file.\n     * @returns The template file that was added and the raw response.\n     */\n    public addTemplateFile(fileUrl: string, templateFileType: TemplateFileType): Promise<FileAddResult> {\n        return this.clone(Files, `addTemplateFile(urloffile='${fileUrl}',templatefiletype=${templateFileType})`, false)\n            .postCore().then((response) => {\n                return {\n                    data: response,\n                    file: this.getByName(fileUrl),\n                };\n            });\n    }\n}\n\n/**\n * Describes a single File instance\n *\n */\nexport class File extends SharePointQueryableShareableFile {\n\n    /**\n     * Gets a value that specifies the list item field values for the list item corresponding to the file.\n     *\n     */\n    public get listItemAllFields(): SharePointQueryableCollection {\n        return new SharePointQueryableCollection(this, \"listItemAllFields\");\n    }\n\n    /**\n     * Gets a collection of versions\n     *\n     */\n    public get versions(): Versions {\n        return new Versions(this);\n    }\n\n    /**\n     * Approves the file submitted for content approval with the specified comment.\n     * Only documents in lists that are enabled for content approval can be approved.\n     *\n     * @param comment The comment for the approval.\n     */\n    public approve(comment = \"\"): Promise<void> {\n        return this.clone(File, `approve(comment='${comment}')`).postCore();\n    }\n\n    /**\n     * Stops the chunk upload session without saving the uploaded data. Does not support batching.\n     * If the file doesn’t already exist in the library, the partially uploaded file will be deleted.\n     * Use this in response to user action (as in a request to cancel an upload) or an error or exception.\n     * Use the uploadId value that was passed to the StartUpload method that started the upload session.\n     * This method is currently available only on Office 365.\n     *\n     * @param uploadId The unique identifier of the upload session.\n     */\n    public cancelUpload(uploadId: string): Promise<void> {\n        return this.clone(File, `cancelUpload(uploadId=guid'${uploadId}')`, false).postCore();\n    }\n\n    /**\n     * Checks the file in to a document library based on the check-in type.\n     *\n     * @param comment A comment for the check-in. Its length must be <= 1023.\n     * @param checkinType The check-in type for the file.\n     */\n    public checkin(comment = \"\", checkinType = CheckinType.Major): Promise<void> {\n\n        if (comment.length > 1023) {\n            throw new MaxCommentLengthException();\n        }\n\n        return this.clone(File, `checkin(comment='${comment}',checkintype=${checkinType})`).postCore();\n    }\n\n    /**\n     * Checks out the file from a document library.\n     */\n    public checkout(): Promise<void> {\n        return this.clone(File, \"checkout\").postCore();\n    }\n\n    /**\n     * Copies the file to the destination url.\n     *\n     * @param url The absolute url or server relative url of the destination file path to copy to.\n     * @param shouldOverWrite Should a file with the same name in the same location be overwritten?\n     */\n    public copyTo(url: string, shouldOverWrite = true): Promise<void> {\n        return this.clone(File, `copyTo(strnewurl='${url}',boverwrite=${shouldOverWrite})`).postCore();\n    }\n\n    /**\n     * Delete this file.\n     *\n     * @param eTag Value used in the IF-Match header, by default \"*\"\n     */\n    public delete(eTag = \"*\"): Promise<void> {\n        return this.clone(File, null).postCore({\n            headers: {\n                \"IF-Match\": eTag,\n                \"X-HTTP-Method\": \"DELETE\",\n            },\n        });\n    }\n\n    /**\n     * Denies approval for a file that was submitted for content approval.\n     * Only documents in lists that are enabled for content approval can be denied.\n     *\n     * @param comment The comment for the denial.\n     */\n    public deny(comment = \"\"): Promise<void> {\n        if (comment.length > 1023) {\n            throw new MaxCommentLengthException();\n        }\n        return this.clone(File, `deny(comment='${comment}')`).postCore();\n    }\n\n    /**\n     * Specifies the control set used to access, modify, or add Web Parts associated with this Web Part Page and view.\n     * An exception is thrown if the file is not an ASPX page.\n     *\n     * @param scope The WebPartsPersonalizationScope view on the Web Parts page.\n     */\n    public getLimitedWebPartManager(scope = WebPartsPersonalizationScope.Shared): LimitedWebPartManager {\n        return new LimitedWebPartManager(this, `getLimitedWebPartManager(scope=${scope})`);\n    }\n\n    /**\n     * Moves the file to the specified destination url.\n     *\n     * @param url The absolute url or server relative url of the destination file path to move to.\n     * @param moveOperations The bitwise MoveOperations value for how to move the file.\n     */\n    public moveTo(url: string, moveOperations = MoveOperations.Overwrite): Promise<void> {\n        return this.clone(File, `moveTo(newurl='${url}',flags=${moveOperations})`).postCore();\n    }\n\n    /**\n     * Submits the file for content approval with the specified comment.\n     *\n     * @param comment The comment for the published file. Its length must be <= 1023.\n     */\n    public publish(comment = \"\"): Promise<void> {\n        if (comment.length > 1023) {\n            throw new MaxCommentLengthException();\n        }\n        return this.clone(File, `publish(comment='${comment}')`).postCore();\n    }\n\n    /**\n     * Moves the file to the Recycle Bin and returns the identifier of the new Recycle Bin item.\n     *\n     * @returns The GUID of the recycled file.\n     */\n    public recycle(): Promise<string> {\n        return this.clone(File, \"recycle\").postCore();\n    }\n\n    /**\n     * Reverts an existing checkout for the file.\n     *\n     */\n    public undoCheckout(): Promise<void> {\n        return this.clone(File, \"undoCheckout\").postCore();\n    }\n\n    /**\n     * Removes the file from content approval or unpublish a major version.\n     *\n     * @param comment The comment for the unpublish operation. Its length must be <= 1023.\n     */\n    public unpublish(comment = \"\"): Promise<void> {\n        if (comment.length > 1023) {\n            throw new MaxCommentLengthException();\n        }\n        return this.clone(File, `unpublish(comment='${comment}')`).postCore();\n    }\n\n    /**\n     * Gets the contents of the file as text. Not supported in batching.\n     *\n     */\n    public getText(): Promise<string> {\n\n        return this.clone(File, \"$value\", false).get(new TextParser(), { headers: { \"binaryStringResponseBody\": \"true\" } });\n    }\n\n    /**\n     * Gets the contents of the file as a blob, does not work in Node.js. Not supported in batching.\n     *\n     */\n    public getBlob(): Promise<Blob> {\n\n        return this.clone(File, \"$value\", false).get(new BlobParser(), { headers: { \"binaryStringResponseBody\": \"true\" } });\n    }\n\n    /**\n     * Gets the contents of a file as an ArrayBuffer, works in Node.js. Not supported in batching.\n     */\n    public getBuffer(): Promise<ArrayBuffer> {\n\n        return this.clone(File, \"$value\", false).get(new BufferParser(), { headers: { \"binaryStringResponseBody\": \"true\" } });\n    }\n\n    /**\n     * Gets the contents of a file as an ArrayBuffer, works in Node.js. Not supported in batching.\n     */\n    public getJSON(): Promise<any> {\n\n        return this.clone(File, \"$value\", false).get(new JSONParser(), { headers: { \"binaryStringResponseBody\": \"true\" } });\n    }\n\n    /**\n     * Sets the content of a file, for large files use setContentChunked. Not supported in batching.\n     *\n     * @param content The file content\n     *\n     */\n    public setContent(content: string | ArrayBuffer | Blob): Promise<File> {\n\n        return this.clone(File, \"$value\", false).postCore({\n            body: content,\n            headers: {\n                \"X-HTTP-Method\": \"PUT\",\n            },\n        }).then(_ => new File(this));\n    }\n\n    /**\n     * Gets the associated list item for this folder, loading the default properties\n     */\n    public getItem<T>(...selects: string[]): Promise<Item & T> {\n\n        const q = this.listItemAllFields;\n        return q.select.apply(q, selects).get().then((d: any) => {\n\n            return Util.extend(new Item(spGetEntityUrl(d)), d);\n        });\n    }\n\n    /**\n     * Sets the contents of a file using a chunked upload approach. Not supported in batching.\n     *\n     * @param file The file to upload\n     * @param progress A callback function which can be used to track the progress of the upload\n     * @param chunkSize The size of each file slice, in bytes (default: 10485760)\n     */\n    public setContentChunked(file: Blob, progress?: (data: ChunkedFileUploadProgressData) => void, chunkSize = 10485760): Promise<FileAddResult> {\n\n        if (typeof progress === \"undefined\") {\n            progress = () => null;\n        }\n\n        const fileSize = file.size;\n        const blockCount = parseInt((file.size / chunkSize).toString(), 10) + ((file.size % chunkSize === 0) ? 1 : 0);\n        const uploadId = Util.getGUID();\n\n        // start the chain with the first fragment\n        progress({ blockNumber: 1, chunkSize: chunkSize, currentPointer: 0, fileSize: fileSize, stage: \"starting\", totalBlocks: blockCount });\n\n        let chain = this.startUpload(uploadId, file.slice(0, chunkSize));\n\n        // skip the first and last blocks\n        for (let i = 2; i < blockCount; i++) {\n            chain = chain.then(pointer => {\n                progress({ blockNumber: i, chunkSize: chunkSize, currentPointer: pointer, fileSize: fileSize, stage: \"continue\", totalBlocks: blockCount });\n                return this.continueUpload(uploadId, pointer, file.slice(pointer, pointer + chunkSize));\n            });\n        }\n\n        return chain.then(pointer => {\n            progress({ blockNumber: blockCount, chunkSize: chunkSize, currentPointer: pointer, fileSize: fileSize, stage: \"finishing\", totalBlocks: blockCount });\n            return this.finishUpload(uploadId, pointer, file.slice(pointer));\n        });\n    }\n\n    /**\n     * Starts a new chunk upload session and uploads the first fragment.\n     * The current file content is not changed when this method completes.\n     * The method is idempotent (and therefore does not change the result) as long as you use the same values for uploadId and stream.\n     * The upload session ends either when you use the CancelUpload method or when you successfully\n     * complete the upload session by passing the rest of the file contents through the ContinueUpload and FinishUpload methods.\n     * The StartUpload and ContinueUpload methods return the size of the running total of uploaded data in bytes,\n     * so you can pass those return values to subsequent uses of ContinueUpload and FinishUpload.\n     * This method is currently available only on Office 365.\n     *\n     * @param uploadId The unique identifier of the upload session.\n     * @param fragment The file contents.\n     * @returns The size of the total uploaded data in bytes.\n     */\n    private startUpload(uploadId: string, fragment: ArrayBuffer | Blob): Promise<number> {\n        return this.clone(File, `startUpload(uploadId=guid'${uploadId}')`, false)\n            .postCore<string>({ body: fragment })\n            .then(n => {\n                // When OData=verbose the payload has the following shape:\n                // { StartUpload: \"10485760\" }\n                if (typeof n === \"object\") {\n                    n = (n as any).StartUpload;\n                }\n                return parseFloat(n);\n            });\n    }\n\n    /**\n     * Continues the chunk upload session with an additional fragment.\n     * The current file content is not changed.\n     * Use the uploadId value that was passed to the StartUpload method that started the upload session.\n     * This method is currently available only on Office 365.\n     *\n     * @param uploadId The unique identifier of the upload session.\n     * @param fileOffset The size of the offset into the file where the fragment starts.\n     * @param fragment The file contents.\n     * @returns The size of the total uploaded data in bytes.\n     */\n    private continueUpload(uploadId: string, fileOffset: number, fragment: ArrayBuffer | Blob): Promise<number> {\n        return this.clone(File, `continueUpload(uploadId=guid'${uploadId}',fileOffset=${fileOffset})`, false)\n            .postCore<string>({ body: fragment })\n            .then(n => {\n                // When OData=verbose the payload has the following shape:\n                // { ContinueUpload: \"20971520\" }\n                if (typeof n === \"object\") {\n                    n = (n as any).ContinueUpload;\n                }\n                return parseFloat(n);\n            });\n    }\n\n    /**\n     * Uploads the last file fragment and commits the file. The current file content is changed when this method completes.\n     * Use the uploadId value that was passed to the StartUpload method that started the upload session.\n     * This method is currently available only on Office 365.\n     *\n     * @param uploadId The unique identifier of the upload session.\n     * @param fileOffset The size of the offset into the file where the fragment starts.\n     * @param fragment The file contents.\n     * @returns The newly uploaded file.\n     */\n    private finishUpload(uploadId: string, fileOffset: number, fragment: ArrayBuffer | Blob): Promise<FileAddResult> {\n        return this.clone(File, `finishUpload(uploadId=guid'${uploadId}',fileOffset=${fileOffset})`, false)\n            .postCore<{ ServerRelativeUrl: string }>({ body: fragment })\n            .then(response => {\n                return {\n                    data: response,\n                    file: new File(response.ServerRelativeUrl),\n                };\n            });\n    }\n}\n\n/**\n * Describes a collection of Version objects\n *\n */\nexport class Versions extends SharePointQueryableCollection {\n\n    /**\n     * Creates a new instance of the File class\n     *\n     * @param baseUrl The url or SharePointQueryable which forms the parent of this fields collection\n     */\n    constructor(baseUrl: string | SharePointQueryable, path = \"versions\") {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Gets a version by id\n     *\n     * @param versionId The id of the version to retrieve\n     */\n    public getById(versionId: number): Version {\n        const v = new Version(this);\n        v.concat(`(${versionId})`);\n        return v;\n    }\n\n    /**\n     * Deletes all the file version objects in the collection.\n     *\n     */\n    public deleteAll(): Promise<void> {\n        return new Versions(this, \"deleteAll\").postCore();\n    }\n\n    /**\n     * Deletes the specified version of the file.\n     *\n     * @param versionId The ID of the file version to delete.\n     */\n    public deleteById(versionId: number): Promise<void> {\n        return this.clone(Versions, `deleteById(vid=${versionId})`).postCore();\n    }\n\n    /**\n     * Recycles the specified version of the file.\n     *\n     * @param versionId The ID of the file version to delete.\n     */\n    public recycleByID(versionId: number): Promise<void> {\n        return this.clone(Versions, `recycleByID(vid=${versionId})`).postCore();\n    }\n\n    /**\n     * Deletes the file version object with the specified version label.\n     *\n     * @param label The version label of the file version to delete, for example: 1.2\n     */\n    public deleteByLabel(label: string): Promise<void> {\n        return this.clone(Versions, `deleteByLabel(versionlabel='${label}')`).postCore();\n    }\n\n    /**\n     * Recycles the file version object with the specified version label.\n     *\n     * @param label The version label of the file version to delete, for example: 1.2\n     */\n    public recycleByLabel(label: string): Promise<void> {\n        return this.clone(Versions, `recycleByLabel(versionlabel='${label}')`).postCore();\n    }\n\n    /**\n     * Creates a new file version from the file specified by the version label.\n     *\n     * @param label The version label of the file version to restore, for example: 1.2\n     */\n    public restoreByLabel(label: string): Promise<void> {\n        return this.clone(Versions, `restoreByLabel(versionlabel='${label}')`).postCore();\n    }\n}\n\n\n/**\n * Describes a single Version instance\n *\n */\nexport class Version extends SharePointQueryableInstance {\n\n    /**\n    * Delete a specific version of a file.\n    *\n    * @param eTag Value used in the IF-Match header, by default \"*\"\n    */\n    public delete(eTag = \"*\"): Promise<void> {\n        return this.postCore({\n            headers: {\n                \"IF-Match\": eTag,\n                \"X-HTTP-Method\": \"DELETE\",\n            },\n        });\n    }\n}\n\nexport enum CheckinType {\n    Minor = 0,\n    Major = 1,\n    Overwrite = 2,\n}\n\nexport interface FileAddResult {\n    file: File;\n    data: any;\n}\n\nexport enum WebPartsPersonalizationScope {\n    User = 0,\n    Shared = 1,\n}\n\nexport enum MoveOperations {\n    Overwrite = 1,\n    AllowBrokenThickets = 8,\n}\n\nexport enum TemplateFileType {\n    StandardPage = 0,\n    WikiPage = 1,\n    FormPage = 2,\n    ClientSidePage = 3,\n}\n\n\n\n// WEBPACK FOOTER //\n// ../../../../packages/sp/src/files.ts","import { SharePointQueryable, SharePointQueryableInstance, SharePointQueryableCollection } from \"./sharepointqueryable\";\nimport { File } from \"./files\";\nimport { spExtractODataId } from \"./odata\";\nimport { extractWebUrl } from \"./utils/extractweburl\";\n\n/**\n * Represents an app catalog\n */\nexport class AppCatalog extends SharePointQueryableCollection {\n\n    constructor(baseUrl: string | SharePointQueryable, path = \"_api/web/tenantappcatalog/AvailableApps\") {\n\n        // we need to handle the case of getting created from something that already has \"_api/...\" or does not\n        let candidateUrl = \"\";\n\n        if (typeof baseUrl === \"string\") {\n            candidateUrl = baseUrl;\n        } else if (typeof baseUrl !== \"undefined\") {\n            candidateUrl = (baseUrl as SharePointQueryable).toUrl();\n        }\n\n        super(extractWebUrl(candidateUrl), path);\n    }\n\n    /**\n     * Get details of specific app from the app catalog\n     * @param id - Specify the guid of the app\n     */\n    public getAppById(id: string): App {\n        return new App(this, `getById('${id}')`);\n    }\n\n    /**\n     * Uploads an app package. Not supported for batching\n     *\n     * @param filename Filename to create.\n     * @param content app package data (eg: the .app or .sppkg file).\n     * @param shouldOverWrite Should an app with the same name in the same location be overwritten? (default: true)\n     * @returns Promise<AppAddResult>\n     */\n    public add(filename: string, content: string | ArrayBuffer | Blob, shouldOverWrite = true): Promise<AppAddResult> {\n\n        // you don't add to the availableapps collection\n        const adder = new AppCatalog(extractWebUrl(this.toUrl()), `_api/web/tenantappcatalog/add(overwrite=${shouldOverWrite},url='${filename}')`);\n\n        return adder.postCore({\n            body: content,\n        }).then(r => {\n            return {\n                data: r,\n                file: new File(spExtractODataId(r)),\n            };\n        });\n    }\n}\n\n/**\n * Represents the actions you can preform on a given app within the catalog\n */\nexport class App extends SharePointQueryableInstance {\n\n    /**\n     * This method deploys an app on the app catalog.  It must be called in the context\n     * of the tenant app catalog web or it will fail.\n     */\n    public deploy(): Promise<void> {\n        return this.clone(App, \"Deploy\").postCore();\n    }\n\n    /**\n     * This method retracts a deployed app on the app catalog.  It must be called in the context\n     * of the tenant app catalog web or it will fail.\n     */\n    public retract(): Promise<void> {\n        return this.clone(App, \"Retract\").postCore();\n    }\n\n    /**\n     * This method allows an app which is already deployed to be installed on a web\n     */\n    public install(): Promise<void> {\n        return this.clone(App, \"Install\").postCore();\n    }\n\n    /**\n     * This method allows an app which is already insatlled to be uninstalled on a web\n     */\n    public uninstall(): Promise<void> {\n        return this.clone(App, \"Uninstall\").postCore();\n    }\n\n    /**\n     * This method allows an app which is already insatlled to be upgraded on a web\n     */\n    public upgrade(): Promise<void> {\n        return this.clone(App, \"Upgrade\").postCore();\n    }\n\n    /**\n     * This method removes an app from the app catalog.  It must be called in the context\n     * of the tenant app catalog web or it will fail.\n     */\n    public remove(): Promise<void> {\n        return this.clone(App, \"Remove\").postCore();\n    }\n}\n\nexport interface AppAddResult {\n    data: any;\n    file: File;\n}\n\n\n\n// WEBPACK FOOTER //\n// ../../../../packages/sp/src/appcatalog.ts","import { List } from \"./lists\";\nimport { TemplateFileType, FileAddResult, File } from \"./files\";\nimport { Item, ItemUpdateResult } from \"./items\";\nimport { Util, TypedHash } from \"@pnp/common\";\n\n/**\n * Page promotion state\n */\nexport const enum PromotedState {\n    /**\n     * Regular client side page\n     */\n    NotPromoted = 0,\n    /**\n     * Page that will be promoted as news article after publishing\n     */\n    PromoteOnPublish = 1,\n    /**\n     * Page that is promoted as news article\n     */\n    Promoted = 2,\n}\n\n/**\n * Type describing the available page layout types for client side \"modern\" pages\n */\nexport type ClientSidePageLayoutType = \"Article\" | \"Home\";\n\n/**\n * Column size factor. Max value is 12 (= one column), other options are 8,6,4 or 0\n */\nexport type CanvasColumnFactorType = 0 | 2 | 4 | 6 | 8 | 12;\n\n/**\n * Gets the next order value 1 based for the provided collection\n * \n * @param collection Collection of orderable things\n */\nfunction getNextOrder(collection: { order: number }[]): number {\n\n    if (collection.length < 1) {\n        return 1;\n    }\n\n    return Math.max.apply(null, collection.map(i => i.order)) + 1;\n}\n\n/**\n * After https://stackoverflow.com/questions/273789/is-there-a-version-of-javascripts-string-indexof-that-allows-for-regular-expr/274094#274094\n * \n * @param this Types the called context this to a string in which the search will be conducted\n * @param regex A regex or string to match\n * @param startpos A starting position from which the search will begin\n */\nfunction regexIndexOf(this: string, regex: RegExp | string, startpos = 0) {\n    const indexOf = this.substring(startpos).search(regex);\n    return (indexOf >= 0) ? (indexOf + (startpos)) : indexOf;\n}\n\n/**\n * Gets an attribute value from an html string block\n * \n * @param html HTML to search\n * @param attrName The name of the attribute to find\n */\nfunction getAttrValueFromString(html: string, attrName: string): string {\n    const reg = new RegExp(`${attrName}=\"([^\"]*?)\"`, \"i\");\n    const match = reg.exec(html);\n    return match.length > 0 ? match[1] : null;\n}\n\n/**\n * Finds bounded blocks of markup bounded by divs, ensuring to match the ending div even with nested divs in the interstitial markup\n * \n * @param html HTML to search\n * @param boundaryStartPattern The starting pattern to find, typically a div with attribute\n * @param collector A func to take the found block and provide a way to form it into a useful return that is added into the return array\n */\nfunction getBoundedDivMarkup<T>(html: string, boundaryStartPattern: RegExp | string, collector: (s: string) => T): T[] {\n\n    const blocks: T[] = [];\n\n    if (typeof html === \"undefined\" || html === null) {\n        return blocks;\n    }\n\n    // remove some extra whitespace if present\n    const cleanedHtml = html.replace(/[\\t\\r\\n]/g, \"\");\n\n    // find the first div\n    let startIndex = regexIndexOf.call(cleanedHtml, boundaryStartPattern);\n\n    if (startIndex < 0) {\n        // we found no blocks in the supplied html\n        return blocks;\n    }\n\n    // this loop finds each of the blocks\n    while (startIndex > -1) {\n\n        // we have one open div counting from the one found above using boundaryStartPattern so we need to ensure we find it's close\n        let openCounter = 1;\n        let searchIndex = startIndex + 1;\n        let nextDivOpen = -1;\n        let nextCloseDiv = -1;\n\n        // this loop finds the </div> tag that matches the opening of the control\n        while (true) {\n\n            // find both the next opening and closing div tags from our current searching index\n            nextDivOpen = regexIndexOf.call(cleanedHtml, /<div[^>]*>/i, searchIndex);\n            nextCloseDiv = regexIndexOf.call(cleanedHtml, /<\\/div>/i, searchIndex);\n\n            if (nextDivOpen < 0) {\n                // we have no more opening divs, just set this to simplify checks below\n                nextDivOpen = cleanedHtml.length + 1;\n            }\n\n            // determine which we found first, then increment or decrement our counter\n            // and set the location to begin searching again\n            if (nextDivOpen < nextCloseDiv) {\n                openCounter++;\n                searchIndex = nextDivOpen + 1;\n            } else if (nextCloseDiv < nextDivOpen) {\n                openCounter--;\n                searchIndex = nextCloseDiv + 1;\n            }\n\n            // once we have no open divs back to the level of the opening control div\n            // meaning we have all of the markup we intended to find\n            if (openCounter === 0) {\n\n                // get the bounded markup, +6 is the size of the ending </div> tag\n                const markup = cleanedHtml.substring(startIndex, nextCloseDiv + 6).trim();\n\n                // save the control data we found to the array\n                blocks.push(collector(markup));\n\n                // get out of our while loop\n                break;\n            }\n\n            if (openCounter > 1000 || openCounter < 0) {\n                // this is an arbitrary cut-off but likely we will not have 1000 nested divs\n                // something has gone wrong above and we are probably stuck in our while loop\n                // let's get out of our while loop and not hang everything\n                throw new Error(\"getBoundedDivMarkup exceeded depth parameters.\");\n            }\n        }\n\n        // get the start of the next control\n        startIndex = regexIndexOf.call(cleanedHtml, boundaryStartPattern, nextCloseDiv);\n    }\n\n    return blocks;\n}\n\n/**\n * Normalizes the order value for all the sections, columns, and controls to be 1 based and stepped (1, 2, 3...)\n * \n * @param collection The collection to normalize\n */\nfunction reindex(collection: { order: number, columns?: { order: number }[], controls?: { order: number }[] }[]): void {\n\n    for (let i = 0; i < collection.length; i++) {\n        collection[i].order = i + 1;\n        if (collection[i].hasOwnProperty(\"columns\")) {\n            reindex(collection[i].columns);\n        } else if (collection[i].hasOwnProperty(\"controls\")) {\n            reindex(collection[i].controls);\n        }\n    }\n}\n\n/**\n * Represents the data and methods associated with client side \"modern\" pages\n */\nexport class ClientSidePage extends File {\n\n    /**\n     * Creates a new instance of the ClientSidePage class\n     *\n     * @param baseUrl The url or SharePointQueryable which forms the parent of this web collection\n     * @param commentsDisabled Indicates if comments are disabled, not valid until load is called\n     */\n    constructor(file: File, public sections: CanvasSection[] = [], public commentsDisabled = false) {\n        super(file);\n    }\n\n    /**\n     * Creates a new blank page within the supplied library\n     * \n     * @param library The library in which to create the page\n     * @param pageName Filename of the page, such as \"page.aspx\"\n     * @param title The display title of the page\n     * @param pageLayoutType Layout type of the page to use\n     */\n    public static create(library: List, pageName: string, title: string, pageLayoutType: ClientSidePageLayoutType = \"Article\"): Promise<ClientSidePage> {\n\n        // see if file exists, if not create it\n        return library.rootFolder.files.select(\"Name\").filter(`Name eq '${pageName}'`).get().then((fs: any[]) => {\n\n            if (fs.length > 0) {\n                throw new Error(`A file with the name '${pageName}' already exists in the library '${library.toUrl()}'.`);\n            }\n\n            // get our server relative path\n            return library.rootFolder.select(\"ServerRelativePath\").get().then(path => {\n\n                const pageServerRelPath = Util.combinePaths(\"/\", path.ServerRelativePath.DecodedUrl, pageName);\n\n                // add the template file\n                return library.rootFolder.files.addTemplateFile(pageServerRelPath, TemplateFileType.ClientSidePage).then((far: FileAddResult) => {\n\n                    // get the item associated with the file\n                    return far.file.getItem().then((i: Item) => {\n\n                        // update the item to have the correct values to create the client side page\n                        return i.update({\n                            BannerImageUrl: {\n                                Url: \"/_layouts/15/images/sitepagethumbnail.png\",\n                            },\n                            CanvasContent1: \"\",\n                            ClientSideApplicationId: \"b6917cb1-93a0-4b97-a84d-7cf49975d4ec\",\n                            ContentTypeId: \"0x0101009D1CB255DA76424F860D91F20E6C4118\",\n                            PageLayoutType: pageLayoutType,\n                            PromotedState: PromotedState.NotPromoted,\n                            Title: title,\n                        }).then((iar: ItemUpdateResult) => new ClientSidePage(iar.item.file, (<any>iar.item).CommentsDisabled));\n                    });\n                });\n            });\n        });\n    }\n\n    /**\n     * Creates a new ClientSidePage instance from the provided html content string\n     * \n     * @param html HTML markup representing the page\n     */\n    public static fromFile(file: File): Promise<ClientSidePage> {\n        const page = new ClientSidePage(file);\n        return page.load().then(_ => page);\n    }\n\n    /**\n     * Converts a json object to an escaped string appropriate for use in attributes when storing client-side controls\n     * \n     * @param json The json object to encode into a string\n     */\n    public static jsonToEscapedString(json: any): string {\n\n        return JSON.stringify(json)\n            .replace(/\"/g, \"&quot;\")\n            .replace(/:/g, \"&#58;\")\n            .replace(/{/g, \"&#123;\")\n            .replace(/}/g, \"&#125;\");\n    }\n\n    /**\n     * Converts an escaped string from a client-side control attribute to a json object\n     * \n     * @param escapedString \n     */\n    public static escapedStringToJson<T = any>(escapedString: string): T {\n\n        return JSON.parse(escapedString\n            .replace(/&quot;/g, `\"`)\n            .replace(/&#58;/g, \":\")\n            .replace(/&#123;/g, \"{\")\n            .replace(/&#125;/g, \"}\"));\n    }\n\n    /**\n     * Add a section to this page\n     */\n    public addSection(): CanvasSection {\n\n        const section = new CanvasSection(this, getNextOrder(this.sections));\n        this.sections.push(section);\n        return section;\n    }\n\n    /**\n     * Converts this page's content to html markup\n     */\n    public toHtml(): string {\n\n        // trigger reindex of the entire tree\n        reindex(this.sections);\n\n        const html: string[] = [];\n\n        html.push(\"<div>\");\n\n        for (let i = 0; i < this.sections.length; i++) {\n            html.push(this.sections[i].toHtml());\n        }\n\n        html.push(\"</div>\");\n\n        return html.join(\"\");\n    }\n\n    /**\n     * Loads this page instance's content from the supplied html\n     * \n     * @param html html string representing the page's content\n     */\n    public fromHtml(html: string): this {\n\n        // reset sections\n        this.sections = [];\n\n        // gather our controls from the supplied html\n        getBoundedDivMarkup(html, /<div\\b[^>]*data-sp-canvascontrol[^>]*?>/i, markup => {\n\n            // get the control type\n            const ct = /controlType&quot;&#58;(\\d*?),/i.exec(markup);\n\n            // if no control type is present this is a column which we give type 0 to let us process it\n            const controlType = ct == null || ct.length < 2 ? 0 : parseInt(ct[1], 10);\n\n            let control: CanvasControl = null;\n\n            switch (controlType) {\n                case 0:\n                    // empty canvas column\n                    control = new CanvasColumn(null, 0);\n                    control.fromHtml(markup);\n                    this.mergeColumnToTree(<CanvasColumn>control);\n                    break;\n                case 3:\n                    // client side webpart\n                    control = new ClientSideWebpart(\"\");\n                    control.fromHtml(markup);\n                    this.mergeControlToTree(control);\n                    break;\n                case 4:\n                    // client side text\n                    control = new ClientSideText();\n                    control.fromHtml(markup);\n                    this.mergeControlToTree(control);\n                    break;\n            }\n        });\n\n        // refresh all the orders within the tree\n        reindex(this.sections);\n\n        return this;\n    }\n\n    /**\n     * Loads this page's content from the server\n     */\n    public load(): Promise<void> {\n        return this.getItem<{ CanvasContent1: string, CommentsDisabled: boolean }>(\"CanvasContent1\", \"CommentsDisabled\").then(item => {\n            this.fromHtml(item.CanvasContent1);\n            this.commentsDisabled = item.CommentsDisabled;\n        });\n    }\n\n    /**\n     * Persists the content changes (sections, columns, and controls)\n     */\n    public save(): Promise<ItemUpdateResult> {\n        return this.updateProperties({ CanvasContent1: this.toHtml() });\n    }\n\n    /**\n     * Enables comments on this page\n     */\n    public enableComments(): Promise<ItemUpdateResult> {\n        return this.setCommentsOn(true).then(r => {\n            this.commentsDisabled = false;\n            return r;\n        });\n    }\n\n    /**\n     * Disables comments on this page\n     */\n    public disableComments(): Promise<ItemUpdateResult> {\n        return this.setCommentsOn(false).then(r => {\n            this.commentsDisabled = true;\n            return r;\n        });\n    }\n\n    /**\n     * Finds a control by the specified instance id\n     * \n     * @param id Instance id of the control to find\n     */\n    public findControlById<T extends CanvasControl = CanvasControl>(id: string): T {\n        return this.findControl((c) => c.id === id);\n    }\n\n    /**\n     * Finds a control within this page's control tree using the supplied predicate\n     * \n     * @param predicate Takes a control and returns true or false, if true that control is returned by findControl\n     */\n    public findControl<T extends CanvasControl = CanvasControl>(predicate: (c: CanvasControl) => boolean): T {\n        // check all sections\n        for (let i = 0; i < this.sections.length; i++) {\n            // check all columns\n            for (let j = 0; j < this.sections[i].columns.length; j++) {\n                // check all controls\n                for (let k = 0; k < this.sections[i].columns[j].controls.length; k++) {\n                    // check to see if the predicate likes this control\n                    if (predicate(this.sections[i].columns[j].controls[k])) {\n                        return <T>this.sections[i].columns[j].controls[k];\n                    }\n                }\n            }\n        }\n\n        // we found nothing so give nothing back\n        return null;\n    }\n\n    /**\n     * Sets the comments flag for a page\n     * \n     * @param on If true comments are enabled, false they are disabled\n     */\n    private setCommentsOn(on: boolean): Promise<ItemUpdateResult> {\n        return this.getItem().then(i => {\n            const updater = new Item(i, `SetCommentsDisabled(${!on})`);\n            return updater.update({});\n        });\n    }\n\n    /**\n     * Merges the control into the tree of sections and columns for this page\n     * \n     * @param control The control to merge\n     */\n    private mergeControlToTree(control: CanvasControl): void {\n\n        let section: CanvasSection = null;\n        let column: CanvasColumn = null;\n\n        const sections = this.sections.filter(s => s.order === control.controlData.position.zoneIndex);\n        if (sections.length < 1) {\n            section = new CanvasSection(this, control.controlData.position.zoneIndex);\n            this.sections.push(section);\n        } else {\n            section = sections[0];\n        }\n\n        const columns = section.columns.filter(c => c.order === control.controlData.position.sectionIndex);\n        if (columns.length < 1) {\n            column = new CanvasColumn(section, control.controlData.position.sectionIndex, control.controlData.position.sectionFactor);\n            section.columns.push(column);\n        } else {\n            column = columns[0];\n        }\n\n        control.column = column;\n        column.addControl(control);\n    }\n\n    /**\n     * Merges the supplied column into the tree\n     * \n     * @param column Column to merge\n     * @param position The position data for the column\n     */\n    private mergeColumnToTree(column: CanvasColumn): void {\n\n        let section: CanvasSection = null;\n        const sections = this.sections.filter(s => s.order === column.controlData.position.zoneIndex);\n\n        if (sections.length < 1) {\n            section = new CanvasSection(this, column.controlData.position.zoneIndex);\n            this.sections.push(section);\n        } else {\n            section = sections[0];\n        }\n\n        column.section = section;\n        section.columns.push(column);\n    }\n\n    /**\n     * Updates the properties of the underlying ListItem associated with this ClientSidePage\n     * \n     * @param properties Set of properties to update\n     * @param eTag Value used in the IF-Match header, by default \"*\"\n     */\n    private updateProperties(properties: TypedHash<any>, eTag = \"*\"): Promise<ItemUpdateResult> {\n        return this.getItem().then(i => i.update(properties, eTag));\n    }\n}\n\nexport class CanvasSection {\n\n    constructor(public page: ClientSidePage, public order: number, public columns: CanvasColumn[] = []) {\n\n    }\n\n    /**\n     * Default column (this.columns[0]) for this section\n     */\n    public get defaultColumn(): CanvasColumn {\n\n        if (this.columns.length < 1) {\n            this.addColumn(12);\n        }\n\n        return this.columns[0];\n    }\n\n    /**\n     * Adds a new column to this section\n     */\n    public addColumn(factor: CanvasColumnFactorType): CanvasColumn {\n\n        const column = new CanvasColumn(this, getNextOrder(this.columns), factor);\n        this.columns.push(column);\n        return column;\n    }\n\n    /**\n     * Adds a control to the default column for this section\n     * \n     * @param control Control to add to the default column\n     */\n    public addControl(control: CanvasControl): this {\n        this.defaultColumn.addControl(control);\n        return this;\n    }\n\n    public toHtml(): string {\n\n        const html = [];\n\n        for (let i = 0; i < this.columns.length; i++) {\n            html.push(this.columns[i].toHtml());\n        }\n\n        return html.join(\"\");\n    }\n}\n\nexport abstract class CanvasControl {\n\n    constructor(\n        protected controlType: number,\n        protected dataVersion: string,\n        public column: CanvasColumn = null,\n        public order = 1,\n        public id: string = Util.getGUID(),\n        public controlData: ClientSideControlData = null) {\n    }\n\n    /**\n     * Value of the control's \"data-sp-controldata\" attribute\n     */\n    public get jsonData(): string {\n        return ClientSidePage.jsonToEscapedString(this.getControlData());\n    }\n\n    public abstract toHtml(index: number): string;\n\n    public fromHtml(html: string): void {\n        this.controlData = ClientSidePage.escapedStringToJson<ClientSideControlData>(getAttrValueFromString(html, \"data-sp-controldata\"));\n        this.dataVersion = getAttrValueFromString(html, \"data-sp-canvasdataversion\");\n        this.controlType = this.controlData.controlType;\n        this.id = this.controlData.id;\n    }\n\n    protected abstract getControlData(): ClientSideControlData;\n}\n\nexport class CanvasColumn extends CanvasControl {\n\n    constructor(\n        public section: CanvasSection,\n        public order: number,\n        public factor: CanvasColumnFactorType = 12,\n        public controls: CanvasControl[] = [],\n        dataVersion = \"1.0\") {\n        super(0, dataVersion);\n    }\n\n    public addControl(control: CanvasControl): this {\n        control.column = this;\n        this.controls.push(control);\n        return this;\n    }\n\n    public getControl<T extends CanvasControl>(index: number): T {\n        return <T>this.controls[index];\n    }\n\n    public toHtml(): string {\n        const html = [];\n\n        if (this.controls.length < 1) {\n\n            html.push(`<div data-sp-canvascontrol=\"\" data-sp-canvasdataversion=\"${this.dataVersion}\" data-sp-controldata=\"${this.jsonData}\"></div>`);\n\n        } else {\n\n            for (let i = 0; i < this.controls.length; i++) {\n                html.push(this.controls[i].toHtml(i + 1));\n            }\n        }\n\n        return html.join(\"\");\n    }\n\n    public fromHtml(html: string): void {\n        super.fromHtml(html);\n\n        this.controlData = ClientSidePage.escapedStringToJson<ClientSideControlData>(getAttrValueFromString(html, \"data-sp-controldata\"));\n        this.factor = this.controlData.position.sectionFactor;\n        this.order = this.controlData.position.sectionIndex;\n    }\n\n    public getControlData(): ClientSideControlData {\n        return {\n            displayMode: 2,\n            position: {\n                sectionFactor: this.factor,\n                sectionIndex: this.order,\n                zoneIndex: this.section.order,\n            },\n        };\n    }\n}\n\nexport class ClientSideText extends CanvasControl {\n\n    private _text: string;\n\n    constructor(text = \"\") {\n        super(4, \"1.0\");\n\n        this.text = text;\n    }\n\n    /**\n     * The text markup of this control\n     */\n    public get text(): string {\n        return this._text;\n    }\n\n    public set text(text: string) {\n\n        if (!text.startsWith(\"<p>\")) {\n            text = `<p>${text}</p>`;\n        }\n\n        this._text = text;\n    }\n\n    public getControlData(): ClientSideControlData {\n\n        return {\n            controlType: this.controlType,\n            editorType: \"CKEditor\",\n            id: this.id,\n            position: {\n                controlIndex: this.order,\n                sectionFactor: this.column.factor,\n                sectionIndex: this.column.order,\n                zoneIndex: this.column.section.order,\n            },\n        };\n    }\n\n    public toHtml(index: number): string {\n\n        // set our order to the value passed in\n        this.order = index;\n\n        const html: string[] = [];\n\n        html.push(`<div data-sp-canvascontrol=\"\" data-sp-canvasdataversion=\"${this.dataVersion}\" data-sp-controldata=\"${this.jsonData}\">`);\n        html.push(\"<div data-sp-rte=\\\"\\\">\");\n        html.push(`${this.text}`);\n        html.push(\"</div>\");\n        html.push(\"</div>\");\n\n        return html.join(\"\");\n    }\n\n    public fromHtml(html: string): void {\n\n        super.fromHtml(html);\n\n        const match = /<div[^>]*data-sp-rte[^>]*>(.*?)<\\/div>/i.exec(html);\n\n        this.text = match.length > 1 ? match[1] : \"\";\n    }\n}\n\nexport class ClientSideWebpart extends CanvasControl {\n\n    constructor(public title: string,\n        public description = \"\",\n        public propertieJson: TypedHash<any> = {},\n        public webPartId = \"\",\n        protected htmlProperties = \"\",\n        protected serverProcessedContent: ServerProcessedContent = null) {\n        super(3, \"1.0\");\n    }\n\n    public static fromComponentDef(definition: ClientSidePageComponent): ClientSideWebpart {\n        const part = new ClientSideWebpart(\"\");\n        part.import(definition);\n        return part;\n    }\n\n    public import(component: ClientSidePageComponent): void {\n        this.webPartId = component.Id.replace(/^\\{|\\}$/g, \"\");\n        const manifest: ClientSidePageComponentManifest = JSON.parse(component.Manifest);\n        this.title = manifest.preconfiguredEntries[0].title.default;\n        this.description = manifest.preconfiguredEntries[0].description.default;\n        this.propertieJson = this.parseJsonProperties(manifest.preconfiguredEntries[0].properties);\n    }\n\n    public setProperties<T = any>(properties: T): this {\n        this.propertieJson = properties;\n        return this;\n    }\n\n    public getProperties<T = any>(): T {\n        return <T>this.propertieJson;\n    }\n\n    public toHtml(index: number): string {\n\n        // set our order to the value passed in\n        this.order = index;\n\n        // will form the value of the data-sp-webpartdata attribute\n        const data = {\n            dataVersion: this.dataVersion,\n            description: this.description,\n            id: this.webPartId,\n            instanceId: this.id,\n            properties: this.propertieJson,\n            title: this.title,\n        };\n\n        const html: string[] = [];\n\n        html.push(`<div data-sp-canvascontrol=\"\" data-sp-canvasdataversion=\"${this.dataVersion}\" data-sp-controldata=\"${this.jsonData}\">`);\n\n        html.push(`<div data-sp-webpart=\"\" data-sp-canvasdataversion=\"${this.dataVersion}\" data-sp-webpartdata=\"${ClientSidePage.jsonToEscapedString(data)}\">`);\n\n        html.push(`<div data-sp-componentid>`);\n        html.push(this.webPartId);\n        html.push(\"</div>\");\n\n        html.push(`<div data-sp-htmlproperties=\"\">`);\n        html.push(this.renderHtmlProperties());\n        html.push(\"</div>\");\n\n        html.push(\"</div>\");\n        html.push(\"</div>\");\n\n        return html.join(\"\");\n    }\n\n    public fromHtml(html: string): void {\n\n        super.fromHtml(html);\n\n        const webPartData = ClientSidePage.escapedStringToJson<ClientSideWebpartData>(getAttrValueFromString(html, \"data-sp-webpartdata\"));\n\n        this.title = webPartData.title;\n        this.description = webPartData.description;\n        this.webPartId = webPartData.id;\n        this.setProperties(webPartData.properties);\n\n        if (typeof webPartData.serverProcessedContent !== \"undefined\") {\n            this.serverProcessedContent = webPartData.serverProcessedContent;\n        }\n\n        // get our html properties\n        const htmlProps = getBoundedDivMarkup(html, /<div\\b[^>]*data-sp-htmlproperties[^>]*?>/i, markup => {\n            return markup.replace(/^<div\\b[^>]*data-sp-htmlproperties[^>]*?>/i, \"\").replace(/<\\/div>$/i, \"\");\n        });\n\n        this.htmlProperties = htmlProps.length > 0 ? htmlProps[0] : \"\";\n    }\n\n    public getControlData(): ClientSideControlData {\n\n        return {\n            controlType: this.controlType,\n            id: this.id,\n            position: {\n                controlIndex: this.order,\n                sectionFactor: this.column.factor,\n                sectionIndex: this.column.order,\n                zoneIndex: this.column.section.order,\n            },\n            webPartId: this.webPartId,\n        };\n    }\n\n    protected renderHtmlProperties(): string {\n\n        const html: string[] = [];\n\n        if (typeof this.serverProcessedContent === \"undefined\" || this.serverProcessedContent === null) {\n\n            html.push(this.htmlProperties);\n\n        } else if (typeof this.serverProcessedContent !== \"undefined\") {\n\n            if (typeof this.serverProcessedContent.searchablePlainTexts !== \"undefined\") {\n                for (let i = 0; i < this.serverProcessedContent.searchablePlainTexts.length; i++) {\n                    const prop = this.serverProcessedContent.searchablePlainTexts[i];\n                    html.push(`<div data-sp-prop-name=\"${prop.Name}\" data-sp-searchableplaintext=\"true\">`);\n                    html.push(prop.Value);\n                    html.push(\"</div>\");\n                }\n            }\n\n            if (typeof this.serverProcessedContent.imageSources !== \"undefined\") {\n                for (let i = 0; i < this.serverProcessedContent.imageSources.length; i++) {\n                    const prop = this.serverProcessedContent.imageSources[i];\n                    html.push(`<img data-sp-prop-name=\"${prop.Name}\" src=\"${prop.Value}\" />`);\n                }\n            }\n\n            if (typeof this.serverProcessedContent.links !== \"undefined\") {\n                for (let i = 0; i < this.serverProcessedContent.links.length; i++) {\n                    const prop = this.serverProcessedContent.links[i];\n                    html.push(`<a data-sp-prop-name=\"${prop.Name}\" href=\"${prop.Value}\"></a>`);\n                }\n            }\n        }\n\n        return html.join(\"\");\n    }\n\n    protected parseJsonProperties(props: TypedHash<any>): any {\n\n        // If the web part has the serverProcessedContent property then keep this one as it might be needed as input to render the web part HTML later on\n        if (typeof props.webPartData !== \"undefined\" && typeof props.webPartData.serverProcessedContent !== \"undefined\") {\n            this.serverProcessedContent = props.webPartData.serverProcessedContent;\n        } else if (typeof props.serverProcessedContent !== \"undefined\") {\n            this.serverProcessedContent = props.serverProcessedContent;\n        } else {\n            this.serverProcessedContent = null;\n        }\n\n        if (typeof props.webPartData !== \"undefined\" && typeof props.webPartData.properties !== \"undefined\") {\n            return props.webPartData.properties;\n        } else if (typeof props.properties !== \"undefined\") {\n            return props.properties;\n        } else {\n            return props;\n        }\n    }\n}\n\n/**\n * Client side webpart object (retrieved via the _api/web/GetClientSideWebParts REST call)\n */\nexport interface ClientSidePageComponent {\n    /**\n     * Component type for client side webpart object\n     */\n    ComponentType: number;\n    /**\n     * Id for client side webpart object\n     */\n    Id: string;\n    /**\n     * Manifest for client side webpart object\n     */\n    Manifest: string;\n    /**\n     * Manifest type for client side webpart object\n     */\n    ManifestType: number;\n    /**\n     * Name for client side webpart object\n     */\n    Name: string;\n    /**\n     * Status for client side webpart object\n     */\n    Status: number;\n}\n\ninterface ClientSidePageComponentManifest {\n    alias: string;\n    componentType: \"WebPart\" | \"\" | null;\n    disabledOnClassicSharepoint: boolean;\n    hiddenFromToolbox: boolean;\n    id: string;\n    imageLinkPropertyNames: any;\n    isInternal: boolean;\n    linkPropertyNames: boolean;\n    loaderConfig: any;\n    manifestVersion: number;\n    preconfiguredEntries: {\n        description: { default: string };\n        group: { default: string };\n        groupId: string;\n        iconImageUrl: string;\n        officeFabricIconFontName: string;\n        properties: TypedHash<any>;\n        title: { default: string };\n\n    }[];\n    preloadComponents: any | null;\n    requiredCapabilities: any | null;\n    searchablePropertyNames: any | null;\n    supportsFullBleed: boolean;\n    version: string;\n}\n\nexport interface ServerProcessedContent {\n    searchablePlainTexts: any[];\n    imageSources: any[];\n    links: any[];\n}\n\nexport interface ClientSideControlPosition {\n    controlIndex?: number;\n    sectionFactor: CanvasColumnFactorType;\n    sectionIndex: number;\n    zoneIndex: number;\n}\n\nexport interface ClientSideControlData {\n    controlType?: number;\n    id?: string;\n    editorType?: string;\n    position: ClientSideControlPosition;\n    webPartId?: string;\n    displayMode?: number;\n}\n\nexport interface ClientSideWebpartData {\n    dataVersion: string;\n    description: string;\n    id: string;\n    instanceId: string;\n    properties: any;\n    title: string;\n    serverProcessedContent?: ServerProcessedContent;\n}\n\nexport module ClientSideWebpartPropertyTypes {\n\n    /**\n     * Propereties for Embed (component id: 490d7c76-1824-45b2-9de3-676421c997fa)\n     */\n    export interface Embed {\n        embedCode: string;\n        cachedEmbedCode?: string;\n        shouldScaleWidth?: boolean;\n        tempState?: any;\n    }\n\n    /**\n     * Properties for Bing Map (component id: e377ea37-9047-43b9-8cdb-a761be2f8e09)\n     */\n    export interface BingMap {\n        center: {\n            altitude?: number;\n            altitudeReference?: number;\n            latitude: number;\n            longitude: number;\n        };\n        mapType: \"aerial\" | \"birdseye\" | \"road\" | \"streetside\";\n        maxNumberOfPushPins?: number;\n        pushPins?: {\n            location: {\n                latitude: number;\n                longitude: number;\n                altitude?: number;\n                altitudeReference?: number;\n            };\n            address?: string;\n            defaultAddress?: string;\n            defaultTitle?: string;\n            title?: string;\n        }[];\n        shouldShowPushPinTitle?: boolean;\n        zoomLevel?: number;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ../../../../packages/sp/src/clientsidepages.ts","import { SharePointQueryable, SharePointQueryableInstance, SharePointQueryableCollection } from \"./sharepointqueryable\";\nimport { MenuNodeCollection } from \"./types\";\n\n/**\n * Result from adding a navigation node\n *\n */\nexport interface NavigationNodeAddResult {\n    data: any;\n    node: NavigationNode;\n}\n\n/**\n * Represents a collection of navigation nodes\n *\n */\nexport class NavigationNodes extends SharePointQueryableCollection {\n\n    /**\n     * Gets a navigation node by id\n     *\n     * @param id The id of the node\n     */\n    public getById(id: number): NavigationNode {\n        const node = new NavigationNode(this);\n        node.concat(`(${id})`);\n        return node;\n    }\n\n    /**\n     * Adds a new node to the collection\n     *\n     * @param title Display name of the node\n     * @param url The url of the node\n     * @param visible If true the node is visible, otherwise it is hidden (default: true)\n     */\n    public add(title: string, url: string, visible = true): Promise<NavigationNodeAddResult> {\n\n        const postBody = JSON.stringify({\n            IsVisible: visible,\n            Title: title,\n            Url: url,\n            \"__metadata\": { \"type\": \"SP.NavigationNode\" },\n        });\n\n        return this.clone(NavigationNodes, null).postCore({ body: postBody }).then((data) => {\n            return {\n                data: data,\n                node: this.getById(data.Id),\n            };\n        });\n    }\n\n    /**\n     * Moves a node to be after another node in the navigation\n     *\n     * @param nodeId Id of the node to move\n     * @param previousNodeId Id of the node after which we move the node specified by nodeId\n     */\n    public moveAfter(nodeId: number, previousNodeId: number): Promise<void> {\n\n        const postBody = JSON.stringify({\n            nodeId: nodeId,\n            previousNodeId: previousNodeId,\n        });\n\n        return this.clone(NavigationNodes, \"MoveAfter\").postCore({ body: postBody });\n    }\n}\n\n/**\n * Represents an instance of a navigation node\n *\n */\nexport class NavigationNode extends SharePointQueryableInstance {\n\n    /**\n     * Represents the child nodes of this node\n     */\n    public get children(): NavigationNodes {\n        return new NavigationNodes(this, \"Children\");\n    }\n\n    /**\n     * Deletes this node and any child nodes\n     */\n    public delete(): Promise<void> {\n        return super.deleteCore();\n    }\n}\n\n\n/**\n * Exposes the navigation components\n *\n */\nexport class Navigation extends SharePointQueryable {\n\n    /**\n     * Creates a new instance of the Navigation class\n     *\n     * @param baseUrl The url or SharePointQueryable which forms the parent of these navigation components\n     */\n    constructor(baseUrl: string | SharePointQueryable, path = \"navigation\") {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Gets the quicklaunch navigation nodes for the current context\n     *\n     */\n    public get quicklaunch(): NavigationNodes {\n        return new NavigationNodes(this, \"quicklaunch\");\n    }\n\n    /**\n     * Gets the top bar navigation nodes for the current context\n     *\n     */\n    public get topNavigationBar(): NavigationNodes {\n        return new NavigationNodes(this, \"topnavigationbar\");\n    }\n}\n\nexport interface INavigationService {\n    getMenuState(menuNodeKey?: string, depth?: number, mapProviderName?: string, customProperties?: string): Promise<MenuNodeCollection>;\n    getMenuNodeKey(currentUrl: string, mapProviderName?: string): Promise<string>;\n}\n\n/**\n * Represents the top level navigation service\n */\nexport class NavigationService extends SharePointQueryable implements INavigationService {\n\n    constructor(path: string = null) {\n        super(\"_api/navigation\", path);\n    }\n\n    /**\n     * The MenuState service operation returns a Menu-State (dump) of a SiteMapProvider on a site.\n     * \n     * @param menuNodeKey MenuNode.Key of the start node within the SiteMapProvider If no key is provided the SiteMapProvider.RootNode will be the root of the menu state.\n     * @param depth Depth of the dump. If no value is provided a dump with the depth of 10 is returned\n     * @param mapProviderName The name identifying the SiteMapProvider to be used\n     * @param customProperties comma seperated list of custom properties to be returned.\n     */\n    public getMenuState(menuNodeKey: string = null, depth = 10, mapProviderName: string = null, customProperties: string = null): Promise<MenuNodeCollection> {\n\n        return (new NavigationService(\"MenuState\")).postCore({\n            body: JSON.stringify({\n                customProperties: customProperties,\n                depth: depth,\n                mapProviderName: mapProviderName,\n                menuNodeKey: menuNodeKey,\n            }),\n        });\n    }\n\n    /**\n     * Tries to get a SiteMapNode.Key for a given URL within a site collection.\n     * \n     * @param currentUrl A url representing the SiteMapNode\n     * @param mapProviderName The name identifying the SiteMapProvider to be used\n     */\n    public getMenuNodeKey(currentUrl: string, mapProviderName: string = null): Promise<string> {\n\n        return (new NavigationService(\"MenuNodeKey\")).postCore({\n            body: JSON.stringify({\n                currentUrl: currentUrl,\n                mapProviderName: mapProviderName,\n            }),\n        });\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ../../../../packages/sp/src/navigation.ts","import {\n    SharePointQueryable,\n    SharePointQueryableInstance,\n    SharePointQueryableCollection,\n} from \"./sharepointqueryable\";\n\nimport {\n    spODataEntity,\n} from \"./odata\";\n\nimport {\n    Util,\n} from \"@pnp/common\";\n\n/**\n * Describes regional settings ODada object\n */\nexport class RegionalSettings extends SharePointQueryableInstance {\n\n    /**\n     * Creates a new instance of the RegionalSettings class\n     *\n     * @param baseUrl The url or SharePointQueryable which forms the parent of this regional settings collection\n     */\n\n    constructor(baseUrl: string | SharePointQueryable, path = \"regionalsettings\") {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Gets the collection of languages used in a server farm.\n     */\n    public get installedLanguages(): InstalledLanguages {\n        return new InstalledLanguages(this);\n    }\n\n    /**\n     * Gets the collection of language packs that are installed on the server.\n     */\n    public get globalInstalledLanguages(): InstalledLanguages {\n        return new InstalledLanguages(this, \"globalinstalledlanguages\");\n    }\n\n    /**\n     * Gets time zone\n     */\n    public get timeZone(): TimeZone {\n        return new TimeZone(this);\n    }\n\n    /**\n     * Gets time zones\n     */\n    public get timeZones(): TimeZones {\n        return new TimeZones(this);\n    }\n}\n\n/**\n * Describes installed languages ODada queriable collection\n */\nexport class InstalledLanguages extends SharePointQueryableCollection {\n    constructor(baseUrl: string | SharePointQueryable, path = \"installedlanguages\") {\n        super(baseUrl, path);\n    }\n}\n\n/**\n * Describes TimeZone ODada object\n */\nexport class TimeZone extends SharePointQueryableInstance {\n    constructor(baseUrl: string | SharePointQueryable, path = \"timezone\") {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Gets an Local Time by UTC Time\n     *\n     * @param utcTime UTC Time as Date or ISO String\n     */\n    public utcToLocalTime(utcTime: string | Date): Promise<string> {\n        let dateIsoString: string;\n        if (typeof utcTime === \"string\") {\n            dateIsoString = utcTime;\n        } else {\n            dateIsoString = utcTime.toISOString();\n        }\n\n        return this.clone(TimeZone, `utctolocaltime('${dateIsoString}')`)\n            .postCore()\n            .then(res => res.hasOwnProperty(\"UTCToLocalTime\") ? res.UTCToLocalTime : res);\n    }\n\n    /**\n     * Gets an UTC Time by Local Time\n     *\n     * @param localTime Local Time as Date or ISO String\n     */\n    public localTimeToUTC(localTime: string | Date): Promise<string> {\n        let dateIsoString: string;\n\n        if (typeof localTime === \"string\") {\n            dateIsoString = localTime;\n        } else {\n            dateIsoString = Util.dateAdd(localTime, \"minute\", localTime.getTimezoneOffset() * -1).toISOString();\n        }\n\n        return this.clone(TimeZone, `localtimetoutc('${dateIsoString}')`)\n            .postCore()\n            .then(res => res.hasOwnProperty(\"LocalTimeToUTC\") ? res.LocalTimeToUTC : res);\n    }\n}\n\n/**\n * Describes time zones queriable collection\n */\nexport class TimeZones extends SharePointQueryableCollection {\n    constructor(baseUrl: string | SharePointQueryable, path = \"timezones\") {\n        super(baseUrl, path);\n    }\n\n    // https://msdn.microsoft.com/en-us/library/office/jj247008.aspx - timezones ids\n    /**\n     * Gets an TimeZone by id\n     *\n     * @param id The integer id of the timezone to retrieve\n     */\n    public getById(id: number): Promise<TimeZone> {\n        // do the post and merge the result into a TimeZone instance so the data and methods are available\n        return this.clone(TimeZones, `GetById(${id})`).postCore({}, spODataEntity(TimeZone));\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ../../../../packages/sp/src/regionalsettings.ts","import { SharePointQueryable, SharePointQueryableInstance } from \"./sharepointqueryable\";\nimport { Util, Dictionary } from \"@pnp/common\";\n\n/**\n * Allows for the fluent construction of search queries\n */\nexport class SearchQueryBuilder {\n\n    constructor(queryText = \"\", private _query = {}) {\n\n        if (typeof queryText === \"string\" && queryText.length > 0) {\n\n            this.extendQuery({ Querytext: queryText });\n        }\n    }\n\n    public static create(queryText = \"\", queryTemplate: SearchQuery = {}): SearchQueryBuilder {\n        return new SearchQueryBuilder(queryText, queryTemplate);\n    }\n\n    public text(queryText: string): this {\n        return this.extendQuery({ Querytext: queryText });\n    }\n\n    public template(template: string): this {\n        return this.extendQuery({ QueryTemplate: template });\n    }\n\n    public sourceId(id: string): this {\n        return this.extendQuery({ SourceId: id });\n    }\n\n    public get enableInterleaving(): this {\n        return this.extendQuery({ EnableInterleaving: true });\n    }\n\n    public get enableStemming(): this {\n        return this.extendQuery({ EnableStemming: true });\n    }\n\n    public get trimDuplicates(): this {\n        return this.extendQuery({ TrimDuplicates: true });\n    }\n\n    public trimDuplicatesIncludeId(n: number): this {\n        return this.extendQuery({ TrimDuplicatesIncludeId: n });\n    }\n\n    public get enableNicknames(): this {\n        return this.extendQuery({ EnableNicknames: true });\n    }\n\n    public get enableFql(): this {\n        return this.extendQuery({ EnableFQL: true });\n    }\n\n    public get enablePhonetic(): this {\n        return this.extendQuery({ EnablePhonetic: true });\n    }\n\n    public get bypassResultTypes(): this {\n        return this.extendQuery({ BypassResultTypes: true });\n    }\n\n    public get processBestBets(): this {\n        return this.extendQuery({ ProcessBestBets: true });\n    }\n\n    public get enableQueryRules(): this {\n        return this.extendQuery({ EnableQueryRules: true });\n    }\n\n    public get enableSorting(): this {\n        return this.extendQuery({ EnableSorting: true });\n    }\n\n    public get generateBlockRankLog(): this {\n        return this.extendQuery({ GenerateBlockRankLog: true });\n    }\n\n    public rankingModelId(id: string): this {\n        return this.extendQuery({ RankingModelId: id });\n    }\n\n    public startRow(n: number): this {\n        return this.extendQuery({ StartRow: n });\n    }\n\n    public rowLimit(n: number): this {\n        return this.extendQuery({ RowLimit: n });\n    }\n\n    public rowsPerPage(n: number): this {\n        return this.extendQuery({ RowsPerPage: n });\n    }\n\n    public selectProperties(...properties: string[]): this {\n        return this.extendQuery({ SelectProperties: properties });\n    }\n\n    public culture(culture: number): this {\n        return this.extendQuery({ Culture: culture });\n    }\n\n    public timeZoneId(id: number): this {\n        return this.extendQuery({ TimeZoneId: id });\n    }\n\n    public refinementFilters(...filters: string[]): this {\n        return this.extendQuery({ RefinementFilters: filters });\n    }\n\n    public refiners(refiners: string): this {\n        return this.extendQuery({ Refiners: refiners });\n    }\n\n    public hiddenConstraints(constraints: string): this {\n        return this.extendQuery({ HiddenConstraints: constraints });\n    }\n\n    public sortList(...sorts: Sort[]): this {\n        return this.extendQuery({ SortList: sorts });\n    }\n\n    public timeout(milliseconds: number): this {\n        return this.extendQuery({ Timeout: milliseconds });\n    }\n\n    public hithighlightedProperties(...properties: string[]): this {\n        return this.extendQuery({ HitHighlightedProperties: properties });\n    }\n\n    public clientType(clientType: string): this {\n        return this.extendQuery({ ClientType: clientType });\n    }\n\n    public personalizationData(data: string): this {\n        return this.extendQuery({ PersonalizationData: data });\n    }\n\n    public resultsURL(url: string): this {\n        return this.extendQuery({ ResultsUrl: url });\n    }\n\n    public queryTag(...tags: string[]): this {\n        return this.extendQuery({ QueryTag: tags });\n    }\n\n    public properties(...properties: SearchProperty[]): this {\n        return this.extendQuery({ Properties: properties });\n    }\n\n    public get processPersonalFavorites(): this {\n        return this.extendQuery({ ProcessPersonalFavorites: true });\n    }\n\n    public queryTemplatePropertiesUrl(url: string): this {\n        return this.extendQuery({ QueryTemplatePropertiesUrl: url });\n    }\n\n    public reorderingRules(...rules: ReorderingRule[]): this {\n        return this.extendQuery({ ReorderingRules: rules });\n    }\n\n    public hitHighlightedMultivaluePropertyLimit(limit: number): this {\n        return this.extendQuery({ HitHighlightedMultivaluePropertyLimit: limit });\n    }\n\n    public get enableOrderingHitHighlightedProperty(): this {\n        return this.extendQuery({ EnableOrderingHitHighlightedProperty: true });\n    }\n\n    public collapseSpecification(spec: string): this {\n        return this.extendQuery({ CollapseSpecification: spec });\n    }\n\n    public uiLanguage(lang: number): this {\n        return this.extendQuery({ UILanguage: lang });\n    }\n\n    public desiredSnippetLength(len: number): this {\n        return this.extendQuery({ DesiredSnippetLength: len });\n    }\n\n    public maxSnippetLength(len: number): this {\n        return this.extendQuery({ MaxSnippetLength: len });\n    }\n\n    public summaryLength(len: number): this {\n        return this.extendQuery({ SummaryLength: len });\n    }\n\n    public toSearchQuery(): SearchQuery {\n        return <SearchQuery>this._query;\n    }\n\n    private extendQuery(part: any): this {\n\n        this._query = Util.extend(this._query, part);\n        return this;\n    }\n}\n\n/**\n * Describes the search API\n *\n */\nexport class Search extends SharePointQueryableInstance {\n\n    /**\n     * Creates a new instance of the Search class\n     *\n     * @param baseUrl The url for the search context\n     * @param query The SearchQuery object to execute\n     */\n    constructor(baseUrl: string | SharePointQueryable, path = \"_api/search/postquery\") {\n        super(baseUrl, path);\n    }\n\n    /**\n     * .......\n     * @returns Promise\n     */\n    public execute(query: SearchQuery): Promise<SearchResults> {\n\n        let formattedBody: any;\n        formattedBody = query;\n\n        if (formattedBody.SelectProperties) {\n            formattedBody.SelectProperties = this.fixupProp(query.SelectProperties);\n        }\n\n        if (formattedBody.RefinementFilters) {\n            formattedBody.RefinementFilters = this.fixupProp(query.RefinementFilters);\n        }\n\n        if (formattedBody.SortList) {\n            formattedBody.SortList = this.fixupProp(query.SortList);\n        }\n\n        if (formattedBody.HithighlightedProperties) {\n            formattedBody.HithighlightedProperties = this.fixupProp(query.HitHighlightedProperties);\n        }\n\n        if (formattedBody.ReorderingRules) {\n            formattedBody.ReorderingRules = this.fixupProp(query.ReorderingRules);\n        }\n\n        if (formattedBody.Properties) {\n            formattedBody.Properties = this.fixupProp(query.Properties);\n        }\n\n        const postBody = JSON.stringify({\n            request: Util.extend({\n                \"__metadata\": { \"type\": \"Microsoft.Office.Server.Search.REST.SearchRequest\" },\n            }, formattedBody),\n        });\n\n        return this.postCore({ body: postBody }).then((data) => new SearchResults(data, this.toUrl(), query));\n    }\n\n    /**\n     * Fixes up properties that expect to consist of a \"results\" collection when needed\n     *\n     * @param prop property to fixup for container struct\n     */\n    private fixupProp(prop: any): any {\n\n        if (prop.hasOwnProperty(\"results\")) {\n            return prop;\n        }\n\n        return { results: prop };\n    }\n}\n\n/**\n * Describes the SearchResults class, which returns the formatted and raw version of the query response\n */\nexport class SearchResults {\n\n    /**\n     * Creates a new instance of the SearchResult class\n     *\n     */\n    constructor(rawResponse: any,\n        private _url: string,\n        private _query: SearchQuery,\n        private _raw: SearchResponse = null,\n        private _primary: SearchResult[] = null) {\n\n        this._raw = rawResponse.postquery ? rawResponse.postquery : rawResponse;\n    }\n\n    public get ElapsedTime(): number {\n        return this.RawSearchResults.ElapsedTime;\n    }\n\n    public get RowCount(): number {\n        return this.RawSearchResults.PrimaryQueryResult.RelevantResults.RowCount;\n    }\n\n    public get TotalRows(): number {\n        return this.RawSearchResults.PrimaryQueryResult.RelevantResults.TotalRows;\n    }\n\n    public get TotalRowsIncludingDuplicates(): number {\n        return this.RawSearchResults.PrimaryQueryResult.RelevantResults.TotalRowsIncludingDuplicates;\n    }\n\n    public get RawSearchResults(): SearchResponse {\n        return this._raw;\n    }\n\n    public get PrimarySearchResults(): SearchResult[] {\n        if (this._primary === null) {\n            this._primary = this.formatSearchResults(this._raw.PrimaryQueryResult.RelevantResults.Table.Rows);\n        }\n        return this._primary;\n    }\n\n    /**\n     * Gets a page of results\n     *\n     * @param pageNumber Index of the page to return. Used to determine StartRow\n     * @param pageSize Optional, items per page (default = 10)\n     */\n    public getPage(pageNumber: number, pageSize?: number): Promise<SearchResults> {\n\n        // if we got all the available rows we don't have another page\n        if (this.TotalRows < this.RowCount) {\n            return Promise.resolve(null);\n        }\n\n        // if pageSize is supplied, then we use that regardless of any previous values\n        // otherwise get the previous RowLimit or default to 10\n        const rows = typeof pageSize !== \"undefined\" ? pageSize : this._query.hasOwnProperty(\"RowLimit\") ? this._query.RowLimit : 10;\n\n        const query: SearchQuery = Util.extend(this._query, {\n            RowLimit: rows,\n            StartRow: rows * (pageNumber - 1),\n        });\n\n        // we have reached the end\n        if (query.StartRow > this.TotalRows) {\n            return Promise.resolve(null);\n        }\n\n        const search = new Search(this._url, null);\n        return search.execute(query);\n    }\n\n    /**\n     * Formats a search results array\n     *\n     * @param rawResults The array to process\n     */\n    protected formatSearchResults(rawResults: any): SearchResult[] {\n\n        const results = new Array<SearchResult>();\n        const tempResults = rawResults.results ? rawResults.results : rawResults;\n\n        for (const tempResult of tempResults) {\n\n            const cells: { Key: string, Value: any }[] = tempResult.Cells.results ? tempResult.Cells.results : tempResult.Cells;\n\n            results.push(cells.reduce((res, cell) => {\n\n                Object.defineProperty(res, cell.Key,\n                    {\n                        configurable: false,\n                        enumerable: false,\n                        value: cell.Value,\n                        writable: false,\n                    });\n\n                return res;\n\n            }, {}));\n        }\n\n        return results;\n    }\n}\n\n/**\n * Describes the SearchQuery interface\n */\nexport interface SearchQuery {\n\n    /**\n     * A string that contains the text for the search query.\n     */\n    Querytext?: string;\n\n    /**\n     * A string that contains the text that replaces the query text, as part of a query transform.\n     */\n    QueryTemplate?: string;\n\n    /**\n     * A Boolean value that specifies whether the result tables that are returned for\n     * the result block are mixed with the result tables that are returned for the original query.\n     */\n    EnableInterleaving?: boolean;\n\n    /**\n     * A Boolean value that specifies whether stemming is enabled.\n     */\n    EnableStemming?: boolean;\n\n    /**\n     * A Boolean value that specifies whether duplicate items are removed from the results.\n     */\n    TrimDuplicates?: boolean;\n\n    /**\n     * A Boolean value that specifies whether the exact terms in the search query are used to find matches, or if nicknames are used also.\n     */\n    EnableNicknames?: boolean;\n\n    /**\n     * A Boolean value that specifies whether the query uses the FAST Query Language (FQL).\n     */\n    EnableFQL?: boolean;\n\n    /**\n     * A Boolean value that specifies whether the phonetic forms of the query terms are used to find matches.\n     */\n    EnablePhonetic?: boolean;\n\n    /**\n     * A Boolean value that specifies whether to perform result type processing for the query.\n     */\n    BypassResultTypes?: boolean;\n\n    /**\n     * A Boolean value that specifies whether to return best bet results for the query.\n     * This parameter is used only when EnableQueryRules is set to true, otherwise it is ignored.\n     */\n    ProcessBestBets?: boolean;\n\n    /**\n     * A Boolean value that specifies whether to enable query rules for the query.\n     */\n    EnableQueryRules?: boolean;\n\n    /**\n     * A Boolean value that specifies whether to sort search results.\n     */\n    EnableSorting?: boolean;\n\n    /**\n     * Specifies whether to return block rank log information in the BlockRankLog property of the interleaved result table.\n     * A block rank log contains the textual information on the block score and the documents that were de-duplicated.\n     */\n    GenerateBlockRankLog?: boolean;\n\n    /**\n     * The result source ID to use for executing the search query.\n     */\n    SourceId?: string;\n\n    /**\n     * The ID of the ranking model to use for the query.\n     */\n    RankingModelId?: string;\n\n    /**\n     * The first row that is included in the search results that are returned.\n     * You use this parameter when you want to implement paging for search results.\n     */\n    StartRow?: number;\n\n    /**\n     * The maximum number of rows overall that are returned in the search results.\n     * Compared to RowsPerPage, RowLimit is the maximum number of rows returned overall.\n     */\n    RowLimit?: number;\n\n    /**\n     * The maximum number of rows to return per page.\n     * Compared to RowLimit, RowsPerPage refers to the maximum number of rows to return per page,\n     * and is used primarily when you want to implement paging for search results.\n     */\n    RowsPerPage?: number;\n\n    /**\n     * The managed properties to return in the search results.\n     */\n    SelectProperties?: string[];\n\n    /**\n     * The locale ID (LCID) for the query.\n     */\n    Culture?: number;\n\n    /**\n     * The set of refinement filters used when issuing a refinement query (FQL)\n     */\n    RefinementFilters?: string[];\n\n    /**\n     * The set of refiners to return in a search result.\n     */\n    Refiners?: string;\n\n    /**\n     * The additional query terms to append to the query.\n     */\n    HiddenConstraints?: string;\n\n    /**\n     * The list of properties by which the search results are ordered.\n     */\n    SortList?: Sort[];\n\n    /**\n     * The amount of time in milliseconds before the query request times out.\n     */\n    Timeout?: number;\n\n    /**\n     * The properties to highlight in the search result summary when the property value matches the search terms entered by the user.\n     */\n    HitHighlightedProperties?: string[];\n\n    /**\n     * The type of the client that issued the query.\n     */\n    ClientType?: string;\n\n    /**\n     * The GUID for the user who submitted the search query.\n     */\n    PersonalizationData?: string;\n\n    /**\n     * The URL for the search results page.\n     */\n    ResultsUrl?: string;\n\n    /**\n     * Custom tags that identify the query. You can specify multiple query tags\n     */\n    QueryTag?: string[];\n\n    /**\n     * Properties to be used to configure the search query\n     */\n    Properties?: SearchProperty[];\n\n    /**\n     *  A Boolean value that specifies whether to return personal favorites with the search results.\n     */\n    ProcessPersonalFavorites?: boolean;\n\n    /**\n     * The location of the queryparametertemplate.xml file. This file is used to enable anonymous users to make Search REST queries.\n     */\n    QueryTemplatePropertiesUrl?: string;\n\n    /**\n     * Special rules for reordering search results.\n     * These rules can specify that documents matching certain conditions are ranked higher or lower in the results.\n     * This property applies only when search results are sorted based on rank.\n     */\n    ReorderingRules?: ReorderingRule[];\n\n    /**\n     * The number of properties to show hit highlighting for in the search results.\n     */\n    HitHighlightedMultivaluePropertyLimit?: number;\n\n    /**\n     * A Boolean value that specifies whether the hit highlighted properties can be ordered.\n     */\n    EnableOrderingHitHighlightedProperty?: boolean;\n\n    /**\n     * The managed properties that are used to determine how to collapse individual search results.\n     * Results are collapsed into one or a specified number of results if they match any of the individual collapse specifications.\n     * In a collapse specification, results are collapsed if their properties match all individual properties in the collapse specification.\n     */\n    CollapseSpecification?: string;\n\n    /**\n     * The locale identifier (LCID) of the user interface\n     */\n    UIlanguage?: number;\n\n    /**\n     * The preferred number of characters to display in the hit-highlighted summary generated for a search result.\n     */\n    DesiredSnippetLength?: number;\n\n    /**\n     * The maximum number of characters to display in the hit-highlighted summary generated for a search result.\n     */\n    MaxSnippetLength?: number;\n\n    /**\n     * The number of characters to display in the result summary for a search result.\n     */\n    SummaryLength?: number;\n\n}\n\n/**\n * Provides hints at the properties which may be available on the result object\n */\nexport interface SearchResult {\n\n    Rank?: number;\n    DocId?: number;\n    WorkId?: number;\n    Title?: string;\n    Author?: string;\n    Size?: number;\n    Path?: string;\n    Description?: string;\n    Write?: Date;\n    LastModifiedTime?: Date;\n    CollapsingStatus?: number;\n    HitHighlightedSummary?: string;\n    HitHighlightedProperties?: string;\n    contentclass?: string;\n    PictureThumbnailURL?: string;\n    ServerRedirectedURL?: string;\n    ServerRedirectedEmbedURL?: string;\n    ServerRedirectedPreviewURL?: string;\n    FileExtension?: string;\n    ContentTypeId?: string;\n    ParentLink?: string;\n    ViewsLifeTime?: number;\n    ViewsRecent?: number;\n    SectionNames?: string;\n    SectionIndexes?: string;\n    SiteLogo?: string;\n    SiteDescription?: string;\n    importance?: number;\n    SiteName?: string;\n    IsDocument?: boolean;\n    FileType?: string;\n    IsContainer?: boolean;\n    WebTemplate?: string;\n    SPWebUrl?: string;\n    UniqueId?: string;\n    ProgId?: string;\n    OriginalPath?: string;\n    RenderTemplateId?: string;\n    PartitionId?: string;\n    UrlZone?: number;\n    Culture?: string;\n}\n\nexport interface SearchResponse {\n    ElapsedTime: number;\n    Properties?: { Key: string, Value: any, ValueType: string }[];\n    PrimaryQueryResult?: ResultTableCollection;\n    SecondaryQueryResults?: ResultTableCollection;\n    SpellingSuggestion?: string;\n    TriggeredRules?: any[];\n}\n\nexport interface ResultTableCollection {\n\n    QueryErrors?: Dictionary<any>;\n    QueryId?: string;\n    QueryRuleId?: string;\n    CustomResults?: ResultTable;\n    RefinementResults?: ResultTable;\n    RelevantResults?: ResultTable;\n    SpecialTermResults?: ResultTable;\n}\n\nexport interface ResultTable {\n    GroupTemplateId?: string;\n    ItemTemplateId?: string;\n    Properties?: { Key: string, Value: any, ValueType: string }[];\n    Table?: { Rows: { Cells: { Key: string, Value: any, ValueType: string }[] }[] };\n    Refiners?: { Name: string; Entries: { RefinementCount: string; RefinementName: string; RefinementToken: string; RefinementValue: string; }[]; }[];\n    ResultTitle?: string;\n    ResultTitleUrl?: string;\n    RowCount?: number;\n    TableType?: string;\n    TotalRows?: number;\n    TotalRowsIncludingDuplicates?: number;\n}\n\n/**\n * Defines how search results are sorted.\n */\nexport interface Sort {\n\n    /**\n     * The name for a property by which the search results are ordered.\n     */\n    Property: string;\n\n    /**\n     * The direction in which search results are ordered.\n     */\n    Direction: SortDirection;\n}\n\n/**\n * Defines one search property\n */\nexport interface SearchProperty {\n    Name: string;\n    Value: SearchPropertyValue;\n}\n\n/**\n * Defines one search property value. Set only one of StrlVal/BoolVal/IntVal/StrArray.\n */\nexport interface SearchPropertyValue {\n    StrVal?: string;\n    BoolVal?: boolean;\n    Intval?: number;\n    StrArray?: string[];\n    QueryPropertyValueTypeIndex: QueryPropertyValueType;\n}\n\n/**\n * defines the SortDirection enum\n */\nexport enum SortDirection {\n    Ascending = 0,\n    Descending = 1,\n    FQLFormula = 2,\n}\n\n/**\n * Defines how ReorderingRule interface, used for reordering results\n */\nexport interface ReorderingRule {\n\n    /**\n     * The value to match on\n     */\n    MatchValue: string;\n\n    /**\n     * The rank boosting\n     */\n    Boost: number;\n\n    /**\n    * The rank boosting\n    */\n    MatchType: ReorderingRuleMatchType;\n}\n\n/**\n * defines the ReorderingRuleMatchType  enum\n */\nexport enum ReorderingRuleMatchType {\n    ResultContainsKeyword = 0,\n    TitleContainsKeyword = 1,\n    TitleMatchesKeyword = 2,\n    UrlStartsWith = 3,\n    UrlExactlyMatches = 4,\n    ContentTypeIs = 5,\n    FileExtensionMatches = 6,\n    ResultHasTag = 7,\n    ManualCondition = 8,\n}\n\n/**\n * Specifies the type value for the property\n */\nexport enum QueryPropertyValueType {\n    None = 0,\n    StringType = 1,\n    Int32TYpe = 2,\n    BooleanType = 3,\n    StringArrayType = 4,\n    UnSupportedType = 5,\n}\n\nexport class SearchBuiltInSourceId {\n    public static readonly Documents = \"e7ec8cee-ded8-43c9-beb5-436b54b31e84\";\n    public static readonly ItemsMatchingContentType = \"5dc9f503-801e-4ced-8a2c-5d1237132419\";\n    public static readonly ItemsMatchingTag = \"e1327b9c-2b8c-4b23-99c9-3730cb29c3f7\";\n    public static readonly ItemsRelatedToCurrentUser = \"48fec42e-4a92-48ce-8363-c2703a40e67d\";\n    public static readonly ItemsWithSameKeywordAsThisItem = \"5c069288-1d17-454a-8ac6-9c642a065f48\";\n    public static readonly LocalPeopleResults = \"b09a7990-05ea-4af9-81ef-edfab16c4e31\";\n    public static readonly LocalReportsAndDataResults = \"203fba36-2763-4060-9931-911ac8c0583b\";\n    public static readonly LocalSharePointResults = \"8413cd39-2156-4e00-b54d-11efd9abdb89\";\n    public static readonly LocalVideoResults = \"78b793ce-7956-4669-aa3b-451fc5defebf\";\n    public static readonly Pages = \"5e34578e-4d08-4edc-8bf3-002acf3cdbcc\";\n    public static readonly Pictures = \"38403c8c-3975-41a8-826e-717f2d41568a\";\n    public static readonly Popular = \"97c71db1-58ce-4891-8b64-585bc2326c12\";\n    public static readonly RecentlyChangedItems = \"ba63bbae-fa9c-42c0-b027-9a878f16557c\";\n    public static readonly RecommendedItems = \"ec675252-14fa-4fbe-84dd-8d098ed74181\";\n    public static readonly Wiki = \"9479bf85-e257-4318-b5a8-81a180f5faa1\";\n}\n\n\n\n// WEBPACK FOOTER //\n// ../../../../packages/sp/src/search.ts","import { SharePointQueryable, SharePointQueryableInstance } from \"./sharepointqueryable\";\n\n/**\n * Defines a query execute against the search/suggest endpoint (see https://msdn.microsoft.com/en-us/library/office/dn194079.aspx)\n */\nexport interface SearchSuggestQuery {\n\n    /**\n     * A string that contains the text for the search query.\n     */\n    querytext: string;\n\n    /**\n     * The number of query suggestions to retrieve. Must be greater than zero (0). The default value is 5.\n     */\n    count?: number;\n\n\n    /**\n     * The number of personal results to retrieve. Must be greater than zero (0). The default value is 5.\n     */\n    personalCount?: number;\n\n    /**\n     * A Boolean value that specifies whether to retrieve pre-query or post-query suggestions. true to return pre-query suggestions; otherwise, false. The default value is false.\n     */\n    preQuery?: boolean;\n\n    /**\n     * A Boolean value that specifies whether to hit-highlight or format in bold the query suggestions. true to format in bold the terms in the returned query suggestions\n     * that match terms in the specified query; otherwise, false. The default value is true.\n     */\n    hitHighlighting?: boolean;\n\n    /**\n     * A Boolean value that specifies whether to capitalize the first letter in each term in the returned query suggestions. true to capitalize the first letter in each term;\n     * otherwise, false. The default value is false.\n     */\n    capitalize?: boolean;\n\n    /**\n     * The locale ID (LCID) for the query (see https://msdn.microsoft.com/en-us/library/cc233982.aspx).\n     */\n    culture?: string;\n\n    /**\n     * A Boolean value that specifies whether stemming is enabled. true to enable stemming; otherwise, false. The default value is true.\n     */\n    stemming?: boolean;\n\n    /**\n     * A Boolean value that specifies whether to include people names in the returned query suggestions. true to include people names in the returned query suggestions;\n     * otherwise, false. The default value is true.\n     */\n    includePeople?: boolean;\n\n    /**\n     * A Boolean value that specifies whether to turn on query rules for this query. true to turn on query rules; otherwise, false. The default value is true.\n     */\n    queryRules?: boolean;\n\n    /**\n     * A Boolean value that specifies whether to return query suggestions for prefix matches. true to return query suggestions based on prefix matches, otherwise, false when\n     * query suggestions should match the full query word.\n     */\n    prefixMatch?: boolean;\n}\n\nexport class SearchSuggest extends SharePointQueryableInstance {\n\n    constructor(baseUrl: string | SharePointQueryable, path = \"_api/search/suggest\") {\n        super(baseUrl, path);\n    }\n\n    public execute(query: SearchSuggestQuery): Promise<SearchSuggestResult> {\n        this.mapQueryToQueryString(query);\n        return this.get().then(response => new SearchSuggestResult(response));\n    }\n\n    private mapQueryToQueryString(query: SearchSuggestQuery): void {\n\n        this.query.add(\"querytext\", `'${query.querytext}'`);\n\n        if (query.hasOwnProperty(\"count\")) {\n            this.query.add(\"inumberofquerysuggestions\", query.count.toString());\n        }\n\n        if (query.hasOwnProperty(\"personalCount\")) {\n            this.query.add(\"inumberofresultsuggestions\", query.personalCount.toString());\n        }\n\n        if (query.hasOwnProperty(\"preQuery\")) {\n            this.query.add(\"fprequerysuggestions\", query.preQuery.toString());\n        }\n\n        if (query.hasOwnProperty(\"hitHighlighting\")) {\n            this.query.add(\"fhithighlighting\", query.hitHighlighting.toString());\n        }\n\n        if (query.hasOwnProperty(\"capitalize\")) {\n            this.query.add(\"fcapitalizefirstletters\", query.capitalize.toString());\n        }\n\n        if (query.hasOwnProperty(\"culture\")) {\n            this.query.add(\"culture\", query.culture.toString());\n        }\n\n        if (query.hasOwnProperty(\"stemming\")) {\n            this.query.add(\"enablestemming\", query.stemming.toString());\n        }\n\n        if (query.hasOwnProperty(\"includePeople\")) {\n            this.query.add(\"showpeoplenamesuggestions\", query.includePeople.toString());\n        }\n\n        if (query.hasOwnProperty(\"queryRules\")) {\n            this.query.add(\"enablequeryrules\", query.queryRules.toString());\n        }\n\n        if (query.hasOwnProperty(\"prefixMatch\")) {\n            this.query.add(\"fprefixmatchallterms\", query.prefixMatch.toString());\n        }\n    }\n}\n\nexport class SearchSuggestResult {\n\n    public PeopleNames: string[];\n    public PersonalResults: PersonalResultSuggestion[];\n    public Queries: any[];\n\n    constructor(json: any) {\n        if (json.hasOwnProperty(\"suggest\")) {\n            // verbose\n            this.PeopleNames = json.suggest.PeopleNames.results;\n            this.PersonalResults = json.suggest.PersonalResults.results;\n            this.Queries = json.suggest.Queries.results;\n        } else {\n            this.PeopleNames = json.PeopleNames;\n            this.PersonalResults = json.PersonalResults;\n            this.Queries = json.Queries;\n        }\n    }\n}\n\nexport interface PersonalResultSuggestion {\n    HighlightedTitle?: string;\n    IsBestBet?: boolean;\n    Title?: string;\n    TypeId?: string;\n    Url?: string;\n}\n\n\n\n// WEBPACK FOOTER //\n// ../../../../packages/sp/src/searchsuggest.ts","import { ODataBatch } from \"@pnp/odata\";\nimport { Util, mergeHeaders } from \"@pnp/common\";\nimport { Logger, LogLevel } from \"@pnp/logging\";\nimport { SPHttpClient } from \"./net/sphttpclient\";\nimport { SPRuntimeConfig } from \"./config/splibconfig\";\nimport { SPBatchParseException } from \"./exceptions\";\nimport { toAbsoluteUrl } from \"./utils/toabsoluteurl\";\n\n/**\n * Manages a batch of OData operations\n */\nexport class SPBatch extends ODataBatch {\n\n    constructor(private baseUrl: string) {\n        super();\n    }\n\n    /**\n     * Parses the response from a batch request into an array of Response instances\n     *\n     * @param body Text body of the response from the batch request\n     */\n    public static ParseResponse(body: string): Promise<Response[]> {\n        return new Promise((resolve, reject) => {\n            const responses: Response[] = [];\n            const header = \"--batchresponse_\";\n            // Ex. \"HTTP/1.1 500 Internal Server Error\"\n            const statusRegExp = new RegExp(\"^HTTP/[0-9.]+ +([0-9]+) +(.*)\", \"i\");\n            const lines = body.split(\"\\n\");\n            let state = \"batch\";\n            let status: number;\n            let statusText: string;\n            for (let i = 0; i < lines.length; ++i) {\n                const line = lines[i];\n                switch (state) {\n                    case \"batch\":\n                        if (line.substr(0, header.length) === header) {\n                            state = \"batchHeaders\";\n                        } else {\n                            if (line.trim() !== \"\") {\n                                throw new SPBatchParseException(`Invalid response, line ${i}`);\n                            }\n                        }\n                        break;\n                    case \"batchHeaders\":\n                        if (line.trim() === \"\") {\n                            state = \"status\";\n                        }\n                        break;\n                    case \"status\":\n                        const parts = statusRegExp.exec(line);\n                        if (parts.length !== 3) {\n                            throw new SPBatchParseException(`Invalid status, line ${i}`);\n                        }\n                        status = parseInt(parts[1], 10);\n                        statusText = parts[2];\n                        state = \"statusHeaders\";\n                        break;\n                    case \"statusHeaders\":\n                        if (line.trim() === \"\") {\n                            state = \"body\";\n                        }\n                        break;\n                    case \"body\":\n                        responses.push((status === 204) ? new Response() : new Response(line, { status: status, statusText: statusText }));\n                        state = \"batch\";\n                        break;\n                }\n            }\n            if (state !== \"status\") {\n                reject(new SPBatchParseException(\"Unexpected end of input\"));\n            }\n            resolve(responses);\n        });\n    }\n\n    protected executeImpl(): Promise<void> {\n\n        Logger.write(`[${this.batchId}] (${(new Date()).getTime()}) Executing batch with ${this.requests.length} requests.`, LogLevel.Info);\n\n        // if we don't have any requests, don't bother sending anything\n        // this could be due to caching further upstream, or just an empty batch\n        if (this.requests.length < 1) {\n            Logger.write(`Resolving empty batch.`, LogLevel.Info);\n            return Promise.resolve();\n        }\n\n        // creating the client here allows the url to be populated for nodejs client as well as potentially\n        // any other hacks needed for other types of clients. Essentially allows the absoluteRequestUrl\n        // below to be correct\n        const client = new SPHttpClient();\n\n        // due to timing we need to get the absolute url here so we can use it for all the individual requests\n        // and for sending the entire batch\n        return toAbsoluteUrl(this.baseUrl).then(absoluteRequestUrl => {\n\n            // build all the requests, send them, pipe results in order to parsers\n            const batchBody: string[] = [];\n\n            let currentChangeSetId = \"\";\n\n            for (let i = 0; i < this.requests.length; i++) {\n                const reqInfo = this.requests[i];\n\n                if (reqInfo.method === \"GET\") {\n\n                    if (currentChangeSetId.length > 0) {\n                        // end an existing change set\n                        batchBody.push(`--changeset_${currentChangeSetId}--\\n\\n`);\n                        currentChangeSetId = \"\";\n                    }\n\n                    batchBody.push(`--batch_${this.batchId}\\n`);\n\n                } else {\n\n                    if (currentChangeSetId.length < 1) {\n                        // start new change set\n                        currentChangeSetId = Util.getGUID();\n                        batchBody.push(`--batch_${this.batchId}\\n`);\n                        batchBody.push(`Content-Type: multipart/mixed; boundary=\"changeset_${currentChangeSetId}\"\\n\\n`);\n                    }\n\n                    batchBody.push(`--changeset_${currentChangeSetId}\\n`);\n                }\n\n                // common batch part prefix\n                batchBody.push(`Content-Type: application/http\\n`);\n                batchBody.push(`Content-Transfer-Encoding: binary\\n\\n`);\n\n                const headers = new Headers();\n\n                // this is the url of the individual request within the batch\n                const url = Util.isUrlAbsolute(reqInfo.url) ? reqInfo.url : Util.combinePaths(absoluteRequestUrl, reqInfo.url);\n\n                Logger.write(`[${this.batchId}] (${(new Date()).getTime()}) Adding request ${reqInfo.method} ${url} to batch.`, LogLevel.Verbose);\n\n                if (reqInfo.method !== \"GET\") {\n\n                    let method = reqInfo.method;\n\n                    const castHeaders: any = reqInfo.options.headers;\n                    if (reqInfo.hasOwnProperty(\"options\") && reqInfo.options.hasOwnProperty(\"headers\") && typeof castHeaders[\"X-HTTP-Method\"] !== \"undefined\") {\n\n                        method = castHeaders[\"X-HTTP-Method\"];\n                        delete castHeaders[\"X-HTTP-Method\"];\n                    }\n\n                    batchBody.push(`${method} ${url} HTTP/1.1\\n`);\n\n                    headers.set(\"Content-Type\", \"application/json;odata=verbose;charset=utf-8\");\n\n                } else {\n                    batchBody.push(`${reqInfo.method} ${url} HTTP/1.1\\n`);\n                }\n\n                // merge global config headers\n                mergeHeaders(headers, SPRuntimeConfig.headers);\n\n                // merge per-request headers\n                if (reqInfo.options) {\n                    mergeHeaders(headers, reqInfo.options.headers);\n                }\n\n                // lastly we apply any default headers we need that may not exist\n                if (!headers.has(\"Accept\")) {\n                    headers.append(\"Accept\", \"application/json\");\n                }\n\n                if (!headers.has(\"Content-Type\")) {\n                    headers.append(\"Content-Type\", \"application/json;odata=verbose;charset=utf-8\");\n                }\n\n                if (!headers.has(\"X-ClientService-ClientTag\")) {\n                    headers.append(\"X-ClientService-ClientTag\", \"PnPCoreJS:@pnp-$$Version$$\");\n                }\n\n                // write headers into batch body\n                headers.forEach((value: string, name: string) => {\n                    batchBody.push(`${name}: ${value}\\n`);\n                });\n\n                batchBody.push(\"\\n\");\n\n                if (reqInfo.options.body) {\n                    batchBody.push(`${reqInfo.options.body}\\n\\n`);\n                }\n            }\n\n            if (currentChangeSetId.length > 0) {\n                // Close the changeset\n                batchBody.push(`--changeset_${currentChangeSetId}--\\n\\n`);\n                currentChangeSetId = \"\";\n            }\n\n            batchBody.push(`--batch_${this.batchId}--\\n`);\n\n            const batchOptions = {\n                \"body\": batchBody.join(\"\"),\n                \"headers\": {\n                    \"Content-Type\": `multipart/mixed; boundary=batch_${this.batchId}`,\n                },\n                \"method\": \"POST\",\n            };\n\n            Logger.write(`[${this.batchId}] (${(new Date()).getTime()}) Sending batch request.`, LogLevel.Info);\n\n            return client.fetch(Util.combinePaths(absoluteRequestUrl, \"/_api/$batch\"), batchOptions)\n                .then(r => r.text())\n                .then(SPBatch.ParseResponse)\n                .then((responses: Response[]) => {\n\n                    if (responses.length !== this.requests.length) {\n                        throw new SPBatchParseException(\"Could not properly parse responses to match requests in batch.\");\n                    }\n\n                    Logger.write(`[${this.batchId}] (${(new Date()).getTime()}) Resolving batched requests.`, LogLevel.Info);\n\n                    return responses.reduce((chain, response, index) => {\n\n                        const request = this.requests[index];\n\n                        Logger.write(`[${this.batchId}] (${(new Date()).getTime()}) Resolving batched request ${request.method} ${request.url}.`, LogLevel.Verbose);\n\n                        return chain.then(_ => request.parser.parse(response).then(request.resolve).catch(request.reject));\n\n                    }, Promise.resolve());\n                });\n        });\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ../../../../packages/sp/src/batch.ts","import { SharePointQueryable, SharePointQueryableInstance, SharePointQueryableCollection } from \"./sharepointqueryable\";\n\n/**\n * Describes a collection of List objects\n *\n */\nexport class Features extends SharePointQueryableCollection {\n\n    /**\n     * Creates a new instance of the Lists class\n     *\n     * @param baseUrl The url or SharePointQueryable which forms the parent of this fields collection\n     */\n    constructor(baseUrl: string | SharePointQueryable, path = \"features\") {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Gets a list from the collection by guid id\n     *\n     * @param id The Id of the feature (GUID)\n     */\n    public getById(id: string): Feature {\n        const feature = new Feature(this);\n        feature.concat(`('${id}')`);\n        return feature;\n    }\n\n    /**\n     * Adds a new list to the collection\n     *\n     * @param id The Id of the feature (GUID)\n     * @param force If true the feature activation will be forced\n     */\n    public add(id: string, force = false): Promise<FeatureAddResult> {\n\n        return this.clone(Features, \"add\").postCore({\n            body: JSON.stringify({\n                featdefScope: 0,\n                featureId: id,\n                force: force,\n            }),\n        }).then(data => {\n            return {\n                data: data,\n                feature: this.getById(id),\n            };\n        });\n    }\n\n    /**\n     * Removes (deactivates) a feature from the collection\n     *\n     * @param id The Id of the feature (GUID)\n     * @param force If true the feature deactivation will be forced\n     */\n    public remove(id: string, force = false): Promise<any> {\n\n        return this.clone(Features, \"remove\").postCore({\n            body: JSON.stringify({\n                featureId: id,\n                force: force,\n            }),\n        });\n    }\n}\n\nexport class Feature extends SharePointQueryableInstance {\n\n    /**\n     * Removes (deactivates) a feature from the collection\n     *\n     * @param force If true the feature deactivation will be forced\n     */\n    public deactivate(force = false): Promise<any> {\n\n        const removeDependency = this.addBatchDependency();\n\n        const idGet = new Feature(this).select(\"DefinitionId\");\n\n        return idGet.get<{ DefinitionId: string }>().then(feature => {\n\n            const promise = this.getParent(Features, this.parentUrl, \"\", this.batch).remove(feature.DefinitionId, force);\n\n            removeDependency();\n\n            return promise;\n        });\n    }\n}\n\nexport interface FeatureAddResult {\n    data: any;\n    feature: Feature;\n}\n\n\n\n// WEBPACK FOOTER //\n// ../../../../packages/sp/src/features.ts","import { SharePointQueryable } from \"./sharepointqueryable\";\n\nexport interface RelatedItem {\n    ListId: string;\n    ItemId: number;\n    Url: string;\n    Title: string;\n    WebId: string;\n    IconUrl: string;\n}\n\nexport interface RelatedItemManger {\n\n    getRelatedItems(sourceListName: string, sourceItemId: number): Promise<RelatedItem[]>;\n\n    getPageOneRelatedItems(sourceListName: string, sourceItemId: number): Promise<RelatedItem[]>;\n\n    addSingleLink(sourceListName: string,\n        sourceItemId: number,\n        sourceWebUrl: string,\n        targetListName: string,\n        targetItemID: number,\n        targetWebUrl: string,\n        tryAddReverseLink?: boolean): Promise<void>;\n\n    /**\n     * Adds a related item link from an item specified by list name and item id, to an item specified by url\n     *\n     * @param sourceListName The source list name or list id\n     * @param sourceItemId The source item id\n     * @param targetItemUrl The target item url\n     * @param tryAddReverseLink If set to true try to add the reverse link (will not return error if it fails)\n     */\n    addSingleLinkToUrl(sourceListName: string, sourceItemId: number, targetItemUrl: string, tryAddReverseLink?: boolean): Promise<void>;\n\n    /**\n     * Adds a related item link from an item specified by url, to an item specified by list name and item id\n     *\n     * @param sourceItemUrl The source item url\n     * @param targetListName The target list name or list id\n     * @param targetItemId The target item id\n     * @param tryAddReverseLink If set to true try to add the reverse link (will not return error if it fails)\n     */\n    addSingleLinkFromUrl(sourceItemUrl: string, targetListName: string, targetItemId: number, tryAddReverseLink?: boolean): Promise<void>;\n\n    deleteSingleLink(sourceListName: string,\n        sourceItemId: number,\n        sourceWebUrl: string,\n        targetListName: string,\n        targetItemId: number,\n        targetWebUrl: string,\n        tryDeleteReverseLink?: boolean): Promise<void>;\n}\n\nexport class RelatedItemManagerImpl extends SharePointQueryable implements RelatedItemManger {\n\n    constructor(baseUrl: string | SharePointQueryable, path = \"_api/SP.RelatedItemManager\") {\n        super(baseUrl, path);\n    }\n\n    public static FromUrl(url: string): RelatedItemManagerImpl {\n\n        if (url === null) {\n            return new RelatedItemManagerImpl(\"\");\n        }\n\n        const index = url.indexOf(\"_api/\");\n\n        if (index > -1) {\n            return new RelatedItemManagerImpl(url.substr(0, index));\n        }\n\n        return new RelatedItemManagerImpl(url);\n    }\n\n    public getRelatedItems(sourceListName: string, sourceItemId: number): Promise<RelatedItem[]> {\n\n        const query = this.clone(RelatedItemManagerImpl, null);\n        query.concat(\".GetRelatedItems\");\n\n        return query.postCore({\n            body: JSON.stringify({\n                SourceItemID: sourceItemId,\n                SourceListName: sourceListName,\n            }),\n        });\n    }\n\n    public getPageOneRelatedItems(sourceListName: string, sourceItemId: number): Promise<RelatedItem[]> {\n\n        const query = this.clone(RelatedItemManagerImpl, null);\n        query.concat(\".GetPageOneRelatedItems\");\n\n        return query.postCore({\n            body: JSON.stringify({\n                SourceItemID: sourceItemId,\n                SourceListName: sourceListName,\n            }),\n        });\n    }\n\n    public addSingleLink(sourceListName: string,\n        sourceItemId: number,\n        sourceWebUrl: string,\n        targetListName: string,\n        targetItemID: number,\n        targetWebUrl: string,\n        tryAddReverseLink = false): Promise<void> {\n\n        const query = this.clone(RelatedItemManagerImpl, null);\n        query.concat(\".AddSingleLink\");\n\n        return query.postCore({\n            body: JSON.stringify({\n                SourceItemID: sourceItemId,\n                SourceListName: sourceListName,\n                SourceWebUrl: sourceWebUrl,\n                TargetItemID: targetItemID,\n                TargetListName: targetListName,\n                TargetWebUrl: targetWebUrl,\n                TryAddReverseLink: tryAddReverseLink,\n            }),\n        });\n    }\n\n    /**\n     * Adds a related item link from an item specified by list name and item id, to an item specified by url\n     *\n     * @param sourceListName The source list name or list id\n     * @param sourceItemId The source item id\n     * @param targetItemUrl The target item url\n     * @param tryAddReverseLink If set to true try to add the reverse link (will not return error if it fails)\n     */\n    public addSingleLinkToUrl(sourceListName: string, sourceItemId: number, targetItemUrl: string, tryAddReverseLink = false): Promise<void> {\n\n        const query = this.clone(RelatedItemManagerImpl, null);\n        query.concat(\".AddSingleLinkToUrl\");\n\n        return query.postCore({\n            body: JSON.stringify({\n                SourceItemID: sourceItemId,\n                SourceListName: sourceListName,\n                TargetItemUrl: targetItemUrl,\n                TryAddReverseLink: tryAddReverseLink,\n            }),\n        });\n    }\n\n    /**\n     * Adds a related item link from an item specified by url, to an item specified by list name and item id\n     *\n     * @param sourceItemUrl The source item url\n     * @param targetListName The target list name or list id\n     * @param targetItemId The target item id\n     * @param tryAddReverseLink If set to true try to add the reverse link (will not return error if it fails)\n     */\n    public addSingleLinkFromUrl(sourceItemUrl: string, targetListName: string, targetItemId: number, tryAddReverseLink = false): Promise<void> {\n\n        const query = this.clone(RelatedItemManagerImpl, null);\n        query.concat(\".AddSingleLinkFromUrl\");\n\n        return query.postCore({\n            body: JSON.stringify({\n                SourceItemUrl: sourceItemUrl,\n                TargetItemID: targetItemId,\n                TargetListName: targetListName,\n                TryAddReverseLink: tryAddReverseLink,\n            }),\n        });\n    }\n\n    public deleteSingleLink(sourceListName: string,\n        sourceItemId: number,\n        sourceWebUrl: string,\n        targetListName: string,\n        targetItemId: number,\n        targetWebUrl: string,\n        tryDeleteReverseLink = false): Promise<void> {\n\n        const query = this.clone(RelatedItemManagerImpl, null);\n        query.concat(\".DeleteSingleLink\");\n\n        return query.postCore({\n            body: JSON.stringify({\n                SourceItemID: sourceItemId,\n                SourceListName: sourceListName,\n                SourceWebUrl: sourceWebUrl,\n                TargetItemID: targetItemId,\n                TargetListName: targetListName,\n                TargetWebUrl: targetWebUrl,\n                TryDeleteReverseLink: tryDeleteReverseLink,\n            }),\n        });\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ../../../../packages/sp/src/relateditems.ts","import { Util, TypedHash } from \"@pnp/common\";\nimport { SharePointQueryable, SharePointQueryableCollection } from \"./sharepointqueryable\";\nimport { SharePointQueryableShareableWeb } from \"./sharepointqueryableshareable\";\nimport { Folders, Folder } from \"./folders\";\nimport { Lists, List } from \"./lists\";\nimport { Fields } from \"./fields\";\nimport { Navigation } from \"./navigation\";\nimport { SiteGroups, SiteGroup } from \"./sitegroups\";\nimport { ContentTypes } from \"./contenttypes\";\nimport { RoleDefinitions } from \"./roles\";\nimport { File } from \"./files\";\nimport { extractWebUrl } from \"./utils/extractweburl\";\nimport { ChangeQuery } from \"./types\";\nimport { SiteUsers, SiteUser, CurrentUser, SiteUserProps } from \"./siteusers\";\nimport { UserCustomActions } from \"./usercustomactions\";\nimport { spExtractODataId } from \"./odata\";\nimport { SPBatch } from \"./batch\";\nimport { Features } from \"./features\";\nimport { RelatedItemManger, RelatedItemManagerImpl } from \"./relateditems\";\nimport { AppCatalog } from \"./appcatalog\";\nimport { RegionalSettings } from \"./regionalsettings\";\nimport { ClientSidePage, ClientSidePageComponent } from \"./clientsidepages\";\n\n/**\n * Describes a collection of webs\n *\n */\nexport class Webs extends SharePointQueryableCollection {\n\n    /**\n     * Creates a new instance of the Webs class\n     *\n     * @param baseUrl The url or SharePointQueryable which forms the parent of this web collection\n     */\n    constructor(baseUrl: string | SharePointQueryable, webPath = \"webs\") {\n        super(baseUrl, webPath);\n    }\n\n    /**\n     * Adds a new web to the collection\n     *\n     * @param title The new web's title\n     * @param url The new web's relative url\n     * @param description The new web's description\n     * @param template The new web's template internal name (default = STS)\n     * @param language The locale id that specifies the new web's language (default = 1033 [English, US])\n     * @param inheritPermissions When true, permissions will be inherited from the new web's parent (default = true)\n     */\n    public add(\n        title: string,\n        url: string,\n        description = \"\",\n        template = \"STS\",\n        language = 1033,\n        inheritPermissions = true): Promise<WebAddResult> {\n\n        const props = {\n            Description: description,\n            Language: language,\n            Title: title,\n            Url: url,\n            UseSamePermissionsAsParentSite: inheritPermissions,\n            WebTemplate: template,\n        };\n\n        const postBody = JSON.stringify({\n            \"parameters\":\n                Util.extend({\n                    \"__metadata\": { \"type\": \"SP.WebCreationInformation\" },\n                }, props),\n        });\n\n        return this.clone(Webs, \"add\").postCore({ body: postBody }).then((data) => {\n            return {\n                data: data,\n                web: new Web(spExtractODataId(data).replace(/_api\\/web\\/?/i, \"\")),\n            };\n        });\n    }\n}\n\n/**\n * Describes a collection of web infos\n *\n */\nexport class WebInfos extends SharePointQueryableCollection {\n\n    /**\n     * Creates a new instance of the WebInfos class\n     *\n     * @param baseUrl The url or SharePointQueryable which forms the parent of this web infos collection\n     */\n    constructor(baseUrl: string | SharePointQueryable, webPath = \"webinfos\") {\n        super(baseUrl, webPath);\n    }\n}\n\n/**\n * Describes a web\n *\n */\nexport class Web extends SharePointQueryableShareableWeb {\n\n    /**\n     * Creates a new instance of the Web class\n     *\n     * @param baseUrl The url or SharePointQueryable which forms the parent of this web\n     */\n    constructor(baseUrl: string | SharePointQueryable, path = \"_api/web\") {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Creates a new web instance from the given url by indexing the location of the /_api/\n     * segment. If this is not found the method creates a new web with the entire string as\n     * supplied.\n     *\n     * @param url\n     */\n    public static fromUrl(url: string, path?: string) {\n        return new Web(extractWebUrl(url), path);\n    }\n\n    /**\n     * Gets this web's subwebs\n     *\n     */\n    public get webs(): Webs {\n        return new Webs(this);\n    }\n\n    /**\n    * Returns a collection of objects that contain metadata about subsites of the current site in which the current user is a member.\n    *\n    * @param nWebTemplateFilter Specifies the site definition (default = -1)\n    * @param nConfigurationFilter A 16-bit integer that specifies the identifier of a configuration (default = -1)\n    */\n    public getSubwebsFilteredForCurrentUser(nWebTemplateFilter = -1, nConfigurationFilter = -1): Webs {\n        return this.clone(Webs, `getSubwebsFilteredForCurrentUser(nWebTemplateFilter=${nWebTemplateFilter},nConfigurationFilter=${nConfigurationFilter})`);\n    }\n\n    /**\n     * Allows access to the web's all properties collection\n     */\n    public get allProperties(): SharePointQueryableCollection {\n        return this.clone(SharePointQueryableCollection, \"allproperties\");\n    }\n\n    /**\n     * Gets a collection of WebInfos for this web's subwebs\n     *\n     */\n    public get webinfos(): WebInfos {\n        return new WebInfos(this);\n    }\n\n    /**\n     * Gets the content types available in this web\n     *\n     */\n    public get contentTypes(): ContentTypes {\n        return new ContentTypes(this);\n    }\n\n    /**\n     * Gets the lists in this web\n     *\n     */\n    public get lists(): Lists {\n        return new Lists(this);\n    }\n\n    /**\n     * Gets the fields in this web\n     *\n     */\n    public get fields(): Fields {\n        return new Fields(this);\n    }\n\n    /**\n     * Gets the active features for this web\n     *\n     */\n    public get features(): Features {\n        return new Features(this);\n    }\n\n    /**\n     * Gets the available fields in this web\n     *\n     */\n    public get availablefields(): Fields {\n        return new Fields(this, \"availablefields\");\n    }\n\n    /**\n     * Gets the navigation options in this web\n     *\n     */\n    public get navigation(): Navigation {\n        return new Navigation(this);\n    }\n\n    /**\n     * Gets the site users\n     *\n     */\n    public get siteUsers(): SiteUsers {\n        return new SiteUsers(this);\n    }\n\n    /**\n     * Gets the site groups\n     *\n     */\n    public get siteGroups(): SiteGroups {\n        return new SiteGroups(this);\n    }\n\n    /**\n     * Gets site user info list\n     *\n     */\n    public get siteUserInfoList(): List {\n        return new List(this, \"siteuserinfolist\");\n    }\n\n    /**\n     * Gets regional settings\n     *\n     */\n    public get regionalSettings(): RegionalSettings {\n        return new RegionalSettings(this);\n    }\n\n    /**\n     * Gets the current user\n     */\n    public get currentUser(): CurrentUser {\n        return new CurrentUser(this);\n    }\n\n    /**\n     * Gets the top-level folders in this web\n     *\n     */\n    public get folders(): Folders {\n        return new Folders(this);\n    }\n\n    /**\n     * Gets all user custom actions for this web\n     *\n     */\n    public get userCustomActions(): UserCustomActions {\n        return new UserCustomActions(this);\n    }\n\n    /**\n     * Gets the collection of RoleDefinition resources\n     *\n     */\n    public get roleDefinitions(): RoleDefinitions {\n        return new RoleDefinitions(this);\n    }\n\n    /**\n     * Provides an interface to manage related items\n     *\n     */\n    public get relatedItems(): RelatedItemManger {\n        return RelatedItemManagerImpl.FromUrl(this.toUrl());\n    }\n\n    /**\n     * Creates a new batch for requests within the context of this web\n     *\n     */\n    public createBatch(): SPBatch {\n        return new SPBatch(this.parentUrl);\n    }\n\n    /**\n     * Gets the root folder of this web\n     *\n     */\n    public get rootFolder(): Folder {\n        return new Folder(this, \"rootFolder\");\n    }\n\n    /**\n     * Gets the associated owner group for this web\n     *\n     */\n    public get associatedOwnerGroup(): SiteGroup {\n        return new SiteGroup(this, \"associatedownergroup\");\n    }\n\n    /**\n     * Gets the associated member group for this web\n     *\n     */\n    public get associatedMemberGroup(): SiteGroup {\n        return new SiteGroup(this, \"associatedmembergroup\");\n    }\n\n    /**\n     * Gets the associated visitor group for this web\n     *\n     */\n    public get associatedVisitorGroup(): SiteGroup {\n        return new SiteGroup(this, \"associatedvisitorgroup\");\n    }\n\n    /**\n     * Gets a folder by server relative url\n     *\n     * @param folderRelativeUrl The server relative path to the folder (including /sites/ if applicable)\n     */\n    public getFolderByServerRelativeUrl(folderRelativeUrl: string): Folder {\n        return new Folder(this, `getFolderByServerRelativeUrl('${folderRelativeUrl}')`);\n    }\n\n    /**\n     * Gets a folder by server relative relative path if your folder name contains # and % characters\n     * you need to first encode the file name using encodeURIComponent() and then pass the url\n     * let url = \"/sites/test/Shared Documents/\" + encodeURIComponent(\"%123\");    \n     * This works only in SharePoint online.\n     *\n     * @param folderRelativeUrl The server relative path to the folder (including /sites/ if applicable)\n     */\n    public getFolderByServerRelativePath(folderRelativeUrl: string): Folder {\n        return new Folder(this, `getFolderByServerRelativePath(decodedUrl='${folderRelativeUrl}')`);\n    }\n\n    /**\n     * Gets a file by server relative url\n     *\n     * @param fileRelativeUrl The server relative path to the file (including /sites/ if applicable)\n     */\n    public getFileByServerRelativeUrl(fileRelativeUrl: string): File {\n        return new File(this, `getFileByServerRelativeUrl('${fileRelativeUrl}')`);\n    }\n\n    /**\n     * Gets a file by server relative url if your file name contains # and % characters\n     * you need to first encode the file name using encodeURIComponent() and then pass the url\n     * let url = \"/sites/test/Shared Documents/\" + encodeURIComponent(\"%123.docx\");\n     * \n     * @param fileRelativeUrl The server relative path to the file (including /sites/ if applicable)\n     */\n    public getFileByServerRelativePath(fileRelativeUrl: string): File {\n        return new File(this, `getFileByServerRelativePath(decodedUrl='${fileRelativeUrl}')`);\n    }\n\n    /**\n     * Gets a list by server relative url (list's root folder)\n     *\n     * @param listRelativeUrl The server relative path to the list's root folder (including /sites/ if applicable)\n     */\n    public getList(listRelativeUrl: string): List {\n        return new List(this, `getList('${listRelativeUrl}')`);\n    }\n\n    /**\n     * Updates this web instance with the supplied properties\n     *\n     * @param properties A plain object hash of values to update for the web\n     */\n    public update(properties: TypedHash<string | number | boolean>): Promise<WebUpdateResult> {\n\n        const postBody = JSON.stringify(Util.extend({\n            \"__metadata\": { \"type\": \"SP.Web\" },\n        }, properties));\n\n        return this.postCore({\n            body: postBody,\n            headers: {\n                \"X-HTTP-Method\": \"MERGE\",\n            },\n        }).then((data) => {\n            return {\n                data: data,\n                web: this,\n            };\n        });\n    }\n\n    /**\n     * Deletes this web\n     *\n     */\n    public delete(): Promise<void> {\n        return super.deleteCore();\n    }\n\n    /**\n     * Applies the theme specified by the contents of each of the files specified in the arguments to the site\n     *\n     * @param colorPaletteUrl The server-relative URL of the color palette file\n     * @param fontSchemeUrl The server-relative URL of the font scheme\n     * @param backgroundImageUrl The server-relative URL of the background image\n     * @param shareGenerated When true, the generated theme files are stored in the root site. When false, they are stored in this web\n     */\n    public applyTheme(colorPaletteUrl: string, fontSchemeUrl: string, backgroundImageUrl: string, shareGenerated: boolean): Promise<void> {\n\n        const postBody = JSON.stringify({\n            backgroundImageUrl: backgroundImageUrl,\n            colorPaletteUrl: colorPaletteUrl,\n            fontSchemeUrl: fontSchemeUrl,\n            shareGenerated: shareGenerated,\n        });\n\n        return this.clone(Web, \"applytheme\").postCore({ body: postBody });\n    }\n\n    /**\n     * Applies the specified site definition or site template to the Web site that has no template applied to it\n     *\n     * @param template Name of the site definition or the name of the site template\n     */\n    public applyWebTemplate(template: string): Promise<void> {\n\n        const q = this.clone(Web, \"applywebtemplate\");\n        q.concat(`(@t)`);\n        q.query.add(\"@t\", template);\n        return q.postCore();\n    }\n\n    /**\n     * Checks whether the specified login name belongs to a valid user in the web. If the user doesn't exist, adds the user to the web.\n     *\n     * @param loginName The login name of the user (ex: i:0#.f|membership|user@domain.onmicrosoft.com)\n     */\n    public ensureUser(loginName: string): Promise<WebEnsureUserResult> {\n        const postBody = JSON.stringify({\n            logonName: loginName,\n        });\n\n        return this.clone(Web, \"ensureuser\").postCore({ body: postBody }).then((data: any) => {\n            return {\n                data: data,\n                user: new SiteUser(spExtractODataId(data)),\n            };\n        });\n    }\n\n    /**\n     * Returns a collection of site templates available for the site\n     *\n     * @param language The locale id of the site templates to retrieve (default = 1033 [English, US])\n     * @param includeCrossLanguage When true, includes language-neutral site templates; otherwise false (default = true)\n     */\n    public availableWebTemplates(language = 1033, includeCrossLanugage = true): SharePointQueryableCollection {\n        return new SharePointQueryableCollection(this, `getavailablewebtemplates(lcid=${language}, doincludecrosslanguage=${includeCrossLanugage})`);\n    }\n\n    /**\n     * Returns the list gallery on the site\n     *\n     * @param type The gallery type - WebTemplateCatalog = 111, WebPartCatalog = 113 ListTemplateCatalog = 114,\n     * MasterPageCatalog = 116, SolutionCatalog = 121, ThemeCatalog = 123, DesignCatalog = 124, AppDataCatalog = 125\n     */\n    public getCatalog(type: number): Promise<List> {\n        return this.clone(Web, `getcatalog(${type})`).select(\"Id\").get().then((data) => {\n            return new List(spExtractODataId(data));\n        });\n    }\n\n    /**\n     * Returns the collection of changes from the change log that have occurred within the list, based on the specified query\n     *\n     * @param query The change query\n     */\n    public getChanges(query: ChangeQuery): Promise<any> {\n\n        const postBody = JSON.stringify({ \"query\": Util.extend({ \"__metadata\": { \"type\": \"SP.ChangeQuery\" } }, query) });\n        return this.clone(Web, \"getchanges\").postCore({ body: postBody });\n    }\n\n    /**\n     * Gets the custom list templates for the site\n     *\n     */\n    public get customListTemplate(): SharePointQueryableCollection {\n        return new SharePointQueryableCollection(this, \"getcustomlisttemplates\");\n    }\n\n    /**\n     * Returns the user corresponding to the specified member identifier for the current site\n     *\n     * @param id The id of the user\n     */\n    public getUserById(id: number): SiteUser {\n        return new SiteUser(this, `getUserById(${id})`);\n    }\n\n    /**\n     * Returns the name of the image file for the icon that is used to represent the specified file\n     *\n     * @param filename The file name. If this parameter is empty, the server returns an empty string\n     * @param size The size of the icon: 16x16 pixels = 0, 32x32 pixels = 1 (default = 0)\n     * @param progId The ProgID of the application that was used to create the file, in the form OLEServerName.ObjectName\n     */\n    public mapToIcon(filename: string, size = 0, progId = \"\"): Promise<string> {\n        return this.clone(Web, `maptoicon(filename='${filename}', progid='${progId}', size=${size})`).get();\n    }\n\n    /**\n     * Returns the tenant property corresponding to the specified key in the app catalog site\n     * \n     * @param key \n     */\n    public getStorageEntity(key: string): Promise<string> {\n        return this.clone(Web, `getStorageEntity('${key}')`).get();\n    }\n\n    /**\n     * Gets the app catalog for this web\n     * \n     * @param url Optional url or web containing the app catalog (default: current web)\n     */\n    public getAppCatalog(url?: string | Web) {\n        return new AppCatalog(url || this);\n    }\n\n    /**\n     * Gets the collection of available client side web parts for this web instance\n     */\n    public getClientSideWebParts(): Promise<ClientSidePageComponent[]> {\n        return this.clone(SharePointQueryableCollection, \"GetClientSideWebParts\").get();\n    }\n\n    /**\n     * Creates a new client side page\n     * \n     * @param pageName Name of the new page\n     * @param title Display title of the new page\n     * @param libraryTitle Title of the library in which to create the new page. Default: \"Site Pages\"\n     */\n    public addClientSidePage(pageName: string, title = pageName.replace(/\\.[^/.]+$/, \"\"), libraryTitle = \"Site Pages\"): Promise<ClientSidePage> {\n        return ClientSidePage.create(this.lists.getByTitle(libraryTitle), pageName, title);\n    }\n}\n\n/**\n * Result from adding a web\n *\n */\nexport interface WebAddResult {\n    data: any;\n    web: Web;\n}\n\n/**\n * Result from updating a web\n *\n */\nexport interface WebUpdateResult {\n    data: any;\n    web: Web;\n}\n\n/**\n * Result from retrieving a catalog\n *\n */\nexport interface GetCatalogResult {\n    data: any;\n    list: List;\n}\n\n/**\n * Result from ensuring a user\n *\n */\nexport interface WebEnsureUserResult {\n    data: SiteUserProps;\n    user: SiteUser;\n}\n\n\n\n// WEBPACK FOOTER //\n// ../../../../packages/sp/src/webs.ts","import { SharePointQueryable, SharePointQueryableInstance } from \"./sharepointqueryable\";\nimport { Web } from \"./webs\";\nimport { UserCustomActions } from \"./usercustomactions\";\nimport { ContextInfo, DocumentLibraryInformation } from \"./types\";\nimport { spExtractODataId } from \"./odata\";\nimport { SPBatch } from \"./batch\";\nimport { Features } from \"./features\";\n\n/**\n * Describes a site collection\n *\n */\nexport class Site extends SharePointQueryableInstance {\n\n    /**\n     * Creates a new instance of the Site class\n     *\n     * @param baseUrl The url or SharePointQueryable which forms the parent of this site collection\n     */\n    constructor(baseUrl: string | SharePointQueryable, path = \"_api/site\") {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Gets the root web of the site collection\n     *\n     */\n    public get rootWeb(): Web {\n        return new Web(this, \"rootweb\");\n    }\n\n    /**\n     * Gets the active features for this site collection\n     *\n     */\n    public get features(): Features {\n        return new Features(this);\n    }\n\n    /**\n     * Gets all custom actions for this site collection\n     *\n     */\n    public get userCustomActions(): UserCustomActions {\n        return new UserCustomActions(this);\n    }\n\n    /**\n     * Gets the context information for this site collection\n     */\n    public getContextInfo(): Promise<ContextInfo> {\n        const q = new Site(this.parentUrl, \"_api/contextinfo\");\n        return q.postCore().then(data => {\n            if (data.hasOwnProperty(\"GetContextWebInformation\")) {\n                const info = data.GetContextWebInformation;\n                info.SupportedSchemaVersions = info.SupportedSchemaVersions.results;\n                return info;\n            } else {\n                return data;\n            }\n        });\n    }\n\n    /**\n     * Gets the document libraries on a site. Static method. (SharePoint Online only)\n     *\n     * @param absoluteWebUrl The absolute url of the web whose document libraries should be returned\n     */\n    public getDocumentLibraries(absoluteWebUrl: string): Promise<DocumentLibraryInformation[]> {\n        const q = new SharePointQueryable(\"\", \"_api/sp.web.getdocumentlibraries(@v)\");\n        q.query.add(\"@v\", \"'\" + absoluteWebUrl + \"'\");\n        return q.get().then(data => {\n            if (data.hasOwnProperty(\"GetDocumentLibraries\")) {\n                return data.GetDocumentLibraries;\n            } else {\n                return data;\n            }\n        });\n    }\n\n    /**\n     * Gets the site url from a page url\n     *\n     * @param absolutePageUrl The absolute url of the page\n     */\n    public getWebUrlFromPageUrl(absolutePageUrl: string): Promise<string> {\n        const q = new SharePointQueryable(\"\", \"_api/sp.web.getweburlfrompageurl(@v)\");\n        q.query.add(\"@v\", \"'\" + absolutePageUrl + \"'\");\n        return q.get().then(data => {\n            if (data.hasOwnProperty(\"GetWebUrlFromPageUrl\")) {\n                return data.GetWebUrlFromPageUrl;\n            } else {\n                return data;\n            }\n        });\n    }\n\n    /**\n     * Creates a new batch for requests within the context of this site collection\n     *\n     */\n    public createBatch(): SPBatch {\n        return new SPBatch(this.parentUrl);\n    }\n\n    /**\n     * Opens a web by id (using POST)\n     *\n     * @param webId The GUID id of the web to open\n     */\n    public openWebById(webId: string): Promise<OpenWebByIdResult> {\n\n        return this.clone(Site, `openWebById('${webId}')`).postCore().then(d => {\n\n            return {\n                data: d,\n                web: Web.fromUrl(spExtractODataId(d)),\n            };\n        });\n    }\n}\n\n/**\n * The result of opening a web by id: contains the data returned as well as a chainable web instance\n */\nexport interface OpenWebByIdResult {\n    data: any;\n    web: Web;\n}\n\n\n\n// WEBPACK FOOTER //\n// ../../../../packages/sp/src/site.ts","import { SharePointQueryable, SharePointQueryableInstance, SharePointQueryableCollection } from \"./sharepointqueryable\";\nimport { HashTagCollection, UserProfile } from \"./types\";\nimport { readBlobAsArrayBuffer } from \"@pnp/common\";\n\nexport class UserProfileQuery extends SharePointQueryableInstance {\n\n    private profileLoader: ProfileLoader;\n\n    /**\n     * Creates a new instance of the UserProfileQuery class\n     *\n     * @param baseUrl The url or SharePointQueryable which forms the parent of this user profile query\n     */\n    constructor(baseUrl: string | SharePointQueryable, path = \"_api/sp.userprofiles.peoplemanager\") {\n        super(baseUrl, path);\n\n        this.profileLoader = new ProfileLoader(baseUrl);\n    }\n\n    /**\n     * The url of the edit profile page for the current user\n     */\n    public get editProfileLink(): Promise<string> {\n        return this.clone(UserProfileQuery, \"EditProfileLink\").get();\n    }\n\n    /**\n     * A boolean value that indicates whether the current user's \"People I'm Following\" list is public\n     */\n    public get isMyPeopleListPublic(): Promise<boolean> {\n        return this.clone(UserProfileQuery, \"IsMyPeopleListPublic\").get();\n    }\n\n    /**\n     * A boolean value that indicates whether the current user is being followed by the specified user\n     *\n     * @param loginName The account name of the user\n     */\n    public amIFollowedBy(loginName: string): Promise<boolean> {\n        const q = this.clone(UserProfileQuery, \"amifollowedby(@v)\");\n        q.query.add(\"@v\", `'${encodeURIComponent(loginName)}'`);\n        return q.get();\n    }\n\n    /**\n     * A boolean value that indicates whether the current user is following the specified user\n     *\n     * @param loginName The account name of the user\n     */\n    public amIFollowing(loginName: string): Promise<boolean> {\n        const q = this.clone(UserProfileQuery, \"amifollowing(@v)\");\n        q.query.add(\"@v\", `'${encodeURIComponent(loginName)}'`);\n        return q.get();\n    }\n\n    /**\n     * Gets tags that the current user is following\n     *\n     * @param maxCount The maximum number of tags to retrieve (default is 20)\n     */\n    public getFollowedTags(maxCount = 20): Promise<string[]> {\n        return this.clone(UserProfileQuery, `getfollowedtags(${maxCount})`).get();\n    }\n\n    /**\n     * Gets the people who are following the specified user\n     *\n     * @param loginName The account name of the user\n     */\n    public getFollowersFor(loginName: string): Promise<any[]> {\n        const q = this.clone(UserProfileQuery, \"getfollowersfor(@v)\");\n        q.query.add(\"@v\", `'${encodeURIComponent(loginName)}'`);\n        return q.get();\n    }\n\n    /**\n     * Gets the people who are following the current user\n     *\n     */\n    public get myFollowers(): SharePointQueryableCollection {\n        return new SharePointQueryableCollection(this, \"getmyfollowers\");\n    }\n\n    /**\n     * Gets user properties for the current user\n     *\n     */\n    public get myProperties(): SharePointQueryableInstance {\n        return new UserProfileQuery(this, \"getmyproperties\");\n    }\n\n    /**\n     * Gets the people who the specified user is following\n     *\n     * @param loginName The account name of the user.\n     */\n    public getPeopleFollowedBy(loginName: string): Promise<any[]> {\n        const q = this.clone(UserProfileQuery, \"getpeoplefollowedby(@v)\");\n        q.query.add(\"@v\", `'${encodeURIComponent(loginName)}'`);\n        return q.get();\n    }\n\n    /**\n     * Gets user properties for the specified user.\n     *\n     * @param loginName The account name of the user.\n     */\n    public getPropertiesFor(loginName: string): Promise<any[]> {\n        const q = this.clone(UserProfileQuery, \"getpropertiesfor(@v)\");\n        q.query.add(\"@v\", `'${encodeURIComponent(loginName)}'`);\n        return q.get();\n    }\n\n    /**\n     * Gets the 20 most popular hash tags over the past week, sorted so that the most popular tag appears first\n     *\n     */\n    public get trendingTags(): Promise<HashTagCollection> {\n        const q = this.clone(UserProfileQuery, null);\n        q.concat(\".gettrendingtags\");\n        return q.get();\n    }\n\n    /**\n     * Gets the specified user profile property for the specified user\n     *\n     * @param loginName The account name of the user\n     * @param propertyName The case-sensitive name of the property to get\n     */\n    public getUserProfilePropertyFor(loginName: string, propertyName: string): Promise<string> {\n        const q = this.clone(UserProfileQuery, `getuserprofilepropertyfor(accountname=@v, propertyname='${propertyName}')`);\n        q.query.add(\"@v\", `'${encodeURIComponent(loginName)}'`);\n        return q.get();\n    }\n\n    /**\n     * Removes the specified user from the user's list of suggested people to follow\n     *\n     * @param loginName The account name of the user\n     */\n    public hideSuggestion(loginName: string): Promise<void> {\n        const q = this.clone(UserProfileQuery, \"hidesuggestion(@v)\");\n        q.query.add(\"@v\", `'${encodeURIComponent(loginName)}'`);\n        return q.postCore();\n    }\n\n    /**\n     * A boolean values that indicates whether the first user is following the second user\n     *\n     * @param follower The account name of the user who might be following the followee\n     * @param followee The account name of the user who might be followed by the follower\n     */\n    public isFollowing(follower: string, followee: string): Promise<boolean> {\n        const q = this.clone(UserProfileQuery, null);\n        q.concat(`.isfollowing(possiblefolloweraccountname=@v, possiblefolloweeaccountname=@y)`);\n        q.query.add(\"@v\", `'${encodeURIComponent(follower)}'`);\n        q.query.add(\"@y\", `'${encodeURIComponent(followee)}'`);\n        return q.get();\n    }\n\n    /**\n     * Uploads and sets the user profile picture (Users can upload a picture to their own profile only). Not supported for batching.\n     *\n     * @param profilePicSource Blob data representing the user's picture in BMP, JPEG, or PNG format of up to 4.76MB\n     */\n    public setMyProfilePic(profilePicSource: Blob): Promise<void> {\n\n        return new Promise<void>((resolve, reject) => {\n            readBlobAsArrayBuffer(profilePicSource).then((buffer) => {\n                const request = new UserProfileQuery(this, \"setmyprofilepicture\");\n                request.postCore({\n                    body: String.fromCharCode.apply(null, new Uint16Array(buffer)),\n                }).then(_ => resolve());\n            }).catch(e => reject(e));\n        });\n    }\n\n    /**\n     * Sets single value User Profile property\n     *\n     * @param accountName The account name of the user\n     * @param propertyName Property name\n     * @param propertyValue Property value\n     */\n    public setSingleValueProfileProperty(accountName: string, propertyName: string, propertyValue: string): Promise<void> {\n        const postBody: string = JSON.stringify({\n            accountName: accountName,\n            propertyName: propertyName,\n            propertyValue: propertyValue,\n        });\n\n        return this.clone(UserProfileQuery, \"SetSingleValueProfileProperty\")\n            .postCore({ body: postBody });\n    }\n\n    /**\n     * Sets multi valued User Profile property\n     *\n     * @param accountName The account name of the user\n     * @param propertyName Property name\n     * @param propertyValues Property values\n     */\n    public setMultiValuedProfileProperty(accountName: string, propertyName: string, propertyValues: string[]): Promise<void> {\n        const postBody: string = JSON.stringify({\n            accountName: accountName,\n            propertyName: propertyName,\n            propertyValues: propertyValues,\n        });\n\n        return this.clone(UserProfileQuery, \"SetMultiValuedProfileProperty\")\n            .postCore({ body: postBody });\n    }\n\n    /**\n     * Provisions one or more users' personal sites. (My Site administrator on SharePoint Online only)\n     *\n     * @param emails The email addresses of the users to provision sites for\n     */\n    public createPersonalSiteEnqueueBulk(...emails: string[]): Promise<void> {\n        return this.profileLoader.createPersonalSiteEnqueueBulk(emails);\n    }\n\n    /**\n     * Gets the user profile of the site owner\n     *\n     */\n    public get ownerUserProfile(): Promise<UserProfile> {\n        return this.profileLoader.ownerUserProfile;\n    }\n\n    /**\n     * Gets the user profile for the current user\n     */\n    public get userProfile(): Promise<any> {\n        return this.profileLoader.userProfile;\n    }\n\n    /**\n     * Enqueues creating a personal site for this user, which can be used to share documents, web pages, and other files\n     *\n     * @param interactiveRequest true if interactively (web) initiated request, or false (default) if non-interactively (client) initiated request\n     */\n    public createPersonalSite(interactiveRequest = false): Promise<void> {\n        return this.profileLoader.createPersonalSite(interactiveRequest);\n    }\n\n    /**\n     * Sets the privacy settings for this profile\n     *\n     * @param share true to make all social data public; false to make all social data private\n     */\n    public shareAllSocialData(share: boolean): Promise<void> {\n        return this.profileLoader.shareAllSocialData(share);\n    }\n}\n\nclass ProfileLoader extends SharePointQueryable {\n\n    /**\n   * Creates a new instance of the ProfileLoader class\n   *\n   * @param baseUrl The url or SharePointQueryable which forms the parent of this profile loader\n   */\n    constructor(baseUrl: string | SharePointQueryable, path = \"_api/sp.userprofiles.profileloader.getprofileloader\") {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Provisions one or more users' personal sites. (My Site administrator on SharePoint Online only) Doesn't support batching\n     *\n     * @param emails The email addresses of the users to provision sites for\n     */\n    public createPersonalSiteEnqueueBulk(emails: string[]): Promise<void> {\n\n        return this.clone(ProfileLoader, \"createpersonalsiteenqueuebulk\", false).postCore({\n            body: JSON.stringify({ \"emailIDs\": emails }),\n        });\n    }\n\n    /**\n     * Gets the user profile of the site owner.\n     *\n     */\n    public get ownerUserProfile(): Promise<UserProfile> {\n        let q = this.getParent(ProfileLoader, this.parentUrl, \"_api/sp.userprofiles.profileloader.getowneruserprofile\");\n\n        if (this.hasBatch) {\n            q = q.inBatch(this.batch);\n        }\n\n        return q.postCore<UserProfile>();\n    }\n\n    /**\n     * Gets the user profile of the current user.\n     *\n     */\n    public get userProfile(): Promise<UserProfile> {\n        return this.clone(ProfileLoader, \"getuserprofile\").postCore<UserProfile>();\n    }\n\n    /**\n     * Enqueues creating a personal site for this user, which can be used to share documents, web pages, and other files.\n     *\n     * @param interactiveRequest true if interactively (web) initiated request, or false (default) if non-interactively (client) initiated request\n     */\n    public createPersonalSite(interactiveRequest = false): Promise<void> {\n        return this.clone(ProfileLoader, `getuserprofile/createpersonalsiteenque(${interactiveRequest})`).postCore();\n    }\n\n    /**\n     * Sets the privacy settings for this profile\n     *\n     * @param share true to make all social data public; false to make all social data private.\n     */\n    public shareAllSocialData(share: boolean): Promise<void> {\n        return this.clone(ProfileLoader, `getuserprofile/shareallsocialdata(${share})`).postCore();\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ../../../../packages/sp/src/userprofiles.ts","import {\n    SharePointQueryable,\n    SharePointQueryableInstance,\n} from \"./sharepointqueryable\";\n\nimport { Util } from \"@pnp/common\";\n\nexport interface SocialMethods {\n    my: MySocialQueryMethods;\n    getFollowedSitesUri(): Promise<string>;\n    getFollowedDocumentsUri(): Promise<string>;\n    follow(actorInfo: SocialActorInfo): Promise<SocialFollowResult>;\n    isFollowed(actorInfo: SocialActorInfo): Promise<boolean>;\n    stopFollowing(actorInfo: SocialActorInfo): Promise<void>;\n}\n\n/**\n * Exposes social following methods\n */\nexport class SocialQuery extends SharePointQueryableInstance implements SocialMethods {\n\n    /**\n     * Creates a new instance of the SocialQuery class\n     *\n     * @param baseUrl The url or SharePointQueryable which forms the parent of this social query\n     */\n    constructor(baseUrl: string | SharePointQueryable, path = \"_api/social.following\") {\n        super(baseUrl, path);\n    }\n\n    public get my(): MySocialQueryMethods {\n        return new MySocialQuery(this);\n    }\n\n    /**\n     * Gets a URI to a site that lists the current user's followed sites.\n     */\n    public getFollowedSitesUri(): Promise<string> {\n        return this.clone(SocialQuery, \"FollowedSitesUri\").get().then(r => {\n            return r.FollowedSitesUri || r;\n        });\n    }\n\n    /**\n     * Gets a URI to a site that lists the current user's followed documents.\n     */\n    public getFollowedDocumentsUri(): Promise<string> {\n        return this.clone(SocialQuery, \"FollowedDocumentsUri\").get().then(r => {\n            return r.FollowedDocumentsUri || r;\n        });\n    }\n\n    /**\n     * Makes the current user start following a user, document, site, or tag\n     *\n     * @param actorInfo The actor to start following\n     */\n    public follow(actorInfo: SocialActorInfo): Promise<SocialFollowResult> {\n        return this.clone(SocialQuery, \"follow\").postCore({ body: this.createSocialActorInfoRequestBody(actorInfo) });\n    }\n\n    /**\n     * Indicates whether the current user is following a specified user, document, site, or tag\n     *\n     * @param actorInfo The actor to find the following status for\n     */\n    public isFollowed(actorInfo: SocialActorInfo): Promise<boolean> {\n        return this.clone(SocialQuery, \"isfollowed\").postCore({ body: this.createSocialActorInfoRequestBody(actorInfo) });\n    }\n\n    /**\n     * Makes the current user stop following a user, document, site, or tag\n     *\n     * @param actorInfo The actor to stop following\n     */\n    public stopFollowing(actorInfo: SocialActorInfo): Promise<void> {\n        return this.clone(SocialQuery, \"stopfollowing\").postCore({ body: this.createSocialActorInfoRequestBody(actorInfo) });\n    }\n\n    /**\n     * Creates SocialActorInfo request body\n     *\n     * @param actorInfo The actor to create request body\n     */\n    private createSocialActorInfoRequestBody(actorInfo: SocialActorInfo): string {\n        return JSON.stringify({\n            \"actor\":\n                Util.extend({\n                    Id: null,\n                    \"__metadata\": { \"type\": \"SP.Social.SocialActorInfo\" },\n                }, actorInfo),\n        });\n    }\n}\n\n/**\n * Defines the public methods exposed by the my endpoint\n */\nexport interface MySocialQueryMethods {\n    /**\n     * Gets this user's data\n     */\n    get(): Promise<MySocialData>;\n    /**\n     * Gets users, documents, sites, and tags that the current user is following.\n     * \n     * @param types Bitwise set of SocialActorTypes to retrieve\n     */\n    followed(types: SocialActorTypes): Promise<any[]>;\n    /**\n     * Gets the count of users, documents, sites, and tags that the current user is following.\n     * \n     * @param types Bitwise set of SocialActorTypes to retrieve\n     */\n    followedCount(types: SocialActorTypes): Promise<number>;\n    /**\n     * Gets the users who are following the current user.\n     */\n    followers(): Promise<SocialActor[]>;\n    /**\n     * Gets users who the current user might want to follow.\n     */\n    suggestions(): Promise<SocialActor[]>;\n}\n\nexport class MySocialQuery extends SharePointQueryableInstance implements MySocialQueryMethods {\n    /**\n     * Creates a new instance of the SocialQuery class\n     *\n     * @param baseUrl The url or SharePointQueryable which forms the parent of this social query\n     */\n    constructor(baseUrl: string | SharePointQueryable, path = \"my\") {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Gets users, documents, sites, and tags that the current user is following.\n     * \n     * @param types Bitwise set of SocialActorTypes to retrieve\n     */\n    public followed(types: SocialActorTypes): Promise<SocialActor[]> {\n        return this.clone(MySocialQuery, `followed(types=${types})`).get().then(r => {\n            return r.hasOwnProperty(\"Followed\") ? r.Followed.results : r;\n        });\n    }\n\n    /**\n     * Gets the count of users, documents, sites, and tags that the current user is following.\n     * \n     * @param types Bitwise set of SocialActorTypes to retrieve\n     */\n    public followedCount(types: SocialActorTypes): Promise<number> {\n        return this.clone(MySocialQuery, `followedcount(types=${types})`).get().then(r => {\n            return r.FollowedCount || r;\n        });\n    }\n\n    /**\n     * Gets the users who are following the current user.\n     */\n    public followers(): Promise<SocialActor[]> {\n        return this.clone(MySocialQuery, \"followers\").get().then(r => {\n            return r.hasOwnProperty(\"Followers\") ? r.Followers.results : r;\n        });\n    }\n\n    /**\n     * Gets users who the current user might want to follow.\n     */\n    public suggestions(): Promise<SocialActor[]> {\n        return this.clone(MySocialQuery, \"suggestions\").get().then(r => {\n            return r.hasOwnProperty(\"Suggestions\") ? r.Suggestions.results : r;\n        });\n    }\n}\n\n/**\n * Social actor info\n *\n */\nexport interface SocialActorInfo {\n    AccountName?: string;\n    ActorType: SocialActorType;\n    ContentUri?: string;\n    Id?: string;\n    TagGuid?: string;\n}\n\n/**\n * Social actor type\n *\n */\nexport const enum SocialActorType {\n    User,\n    Document,\n    Site,\n    Tag,\n}\n\n/**\n * Social actor type\n *\n */\n/* tslint:disable:no-bitwise */\nexport const enum SocialActorTypes {\n    None = 0,\n    User = 1 << SocialActorType.User,\n    Document = 1 << SocialActorType.Document,\n    Site = 1 << SocialActorType.Site,\n    Tag = 1 << SocialActorType.Tag,\n    /**\n     * The set excludes documents and sites that do not have feeds.\n     */\n    ExcludeContentWithoutFeeds = 268435456,\n    /**\n     * The set includes group sites\n     */\n    IncludeGroupsSites = 536870912,\n    /**\n     * The set includes only items created within the last 24 hours\n     */\n    WithinLast24Hours = 1073741824,\n}\n/* tslint:enable */\n\n/**\n * Result from following\n *\n */\nexport const enum SocialFollowResult {\n    Ok = 0,\n    AlreadyFollowing = 1,\n    LimitReached = 2,\n    InternalError = 3,\n}\n\n/**\n * Specifies an exception or status code.\n */\nexport const enum SocialStatusCode {\n    /**\n     * The operation completed successfully\n     */\n    OK,\n    /**\n     * The request is invalid.\n     */\n    InvalidRequest,\n    /**\n     *  The current user is not authorized to perform the operation.\n     */\n    AccessDenied,\n    /**\n     * The target of the operation was not found.\n     */\n    ItemNotFound,\n    /**\n     * The operation is invalid for the target's current state. \n     */\n    InvalidOperation,\n    /**\n     * The operation completed without modifying the target.\n     */\n    ItemNotModified,\n    /**\n     * The operation failed because an internal error occurred.\n     */\n    InternalError,\n    /**\n     * The operation failed because the server could not access the distributed cache.\n     */\n    CacheReadError,\n    /**\n     * The operation succeeded but the server could not update the distributed cache.\n     */\n    CacheUpdateError,\n    /**\n     * No personal site exists for the current user, and no further information is available.\n     */\n    PersonalSiteNotFound,\n    /**\n     * No personal site exists for the current user, and a previous attempt to create one failed.\n     */\n    FailedToCreatePersonalSite,\n    /**\n     * No personal site exists for the current user, and a previous attempt to create one was not authorized.\n     */\n    NotAuthorizedToCreatePersonalSite,\n    /**\n     * No personal site exists for the current user, and no attempt should be made to create one.\n     */\n    CannotCreatePersonalSite,\n    /**\n     * The operation was rejected because an internal limit had been reached.\n     */\n    LimitReached,\n    /**\n     * The operation failed because an error occurred during the processing of the specified attachment.\n     */\n    AttachmentError,\n    /**\n     * The operation succeeded with recoverable errors; the returned data is incomplete.\n     */\n    PartialData,\n    /**\n     * A required SharePoint feature is not enabled.\n     */\n    FeatureDisabled,\n    /**\n     * The site's storage quota has been exceeded.\n     */\n    StorageQuotaExceeded,\n    /**\n     * The operation failed because the server could not access the database.\n     */\n    DatabaseError,\n}\n\nexport interface SocialActor {\n    /**\n     * Gets the actor type.\n     */\n    ActorType: SocialActorType;\n    /**\n     * Gets the actor's unique identifier.\n     */\n    Id: string;\n    /**\n     * Gets the actor's canonical URI.\n     */\n    Uri: string;\n    /**\n     * Gets the actor's display name.\n     */\n    Name: string;\n    /**\n     * Returns true if the current user is following the actor, false otherwise.\n     */\n    IsFollowed: boolean;\n    /**\n     * Gets a code that indicates recoverable errors that occurred during actor retrieval\n     */\n    Status: SocialStatusCode;\n    /**\n     * Returns true if the Actor can potentially be followed, false otherwise.\n     */\n    CanFollow: boolean;\n    /**\n     * Gets the actor's image URI. Only valid when ActorType is User, Document, or Site\n     */\n    ImageUri: string;\n    /**\n     * Gets the actor's account name. Only valid when ActorType is User\n     */\n    AccountName: string;\n    /**\n     * Gets the actor's email address. Only valid when ActorType is User\n     */\n    EmailAddress: string;\n    /**\n     * Gets the actor's title. Only valid when ActorType is User\n     */\n    Title: string;\n    /**\n     * Gets the text of the actor's most recent post. Only valid when ActorType is User\n     */\n    StatusText: string;\n    /**\n     * Gets the URI of the actor's personal site. Only valid when ActorType is User\n     */\n    PersonalSiteUri: string;\n    /**\n     * Gets the URI of the actor's followed content folder. Only valid when this represents the current user\n     */\n    FollowedContentUri: string;\n    /**\n     * Gets the actor's content URI. Only valid when ActorType is Document, or Site\n     */\n    ContentUri: string;\n    /**\n     * Gets the actor's library URI. Only valid when ActorType is Document\n     */\n    LibraryUri: string;\n    /**\n     * Gets the actor's tag GUID. Only valid when ActorType is Tag\n     */\n    TagGuid: string;\n}\n\n/**\n * Defines the properties retrurned from the my endpoint\n */\nexport interface MySocialData {\n    SocialActor: SocialActor;\n    MyFollowedDocumentsUri: string;\n    MyFollowedSitesUri: string;\n}\n\n\n\n// WEBPACK FOOTER //\n// ../../../../packages/sp/src/social.ts","import { SharePointQueryable } from \"./sharepointqueryable\";\nimport { Util } from \"@pnp/common\";\nimport { EmailProperties } from \"./types\";\nimport { SPBatch } from \"./batch\";\nimport { ICachingOptions } from \"@pnp/odata\";\nimport { File } from \"./files\";\nimport { spExtractODataId } from \"./odata\";\nimport { PrincipalInfo, PrincipalType, PrincipalSource, WikiPageCreationInformation } from \"./types\";\n\n/**\n * Public interface for the utility methods to limit SharePointQueryable method exposure\n */\nexport interface UtilityMethods {\n    usingCaching(options?: ICachingOptions): this;\n    inBatch(batch: SPBatch): this;\n    sendEmail(props: EmailProperties): Promise<void>;\n    getCurrentUserEmailAddresses(): Promise<string>;\n    resolvePrincipal(email: string,\n        scopes: PrincipalType,\n        sources: PrincipalSource,\n        inputIsEmailOnly: boolean,\n        addToUserInfoList: boolean,\n        matchUserInfoList?: boolean): Promise<PrincipalInfo>;\n    searchPrincipals(input: string,\n        scopes: PrincipalType,\n        sources: PrincipalSource,\n        groupName: string,\n        maxCount: number): Promise<PrincipalInfo[]>;\n    createEmailBodyForInvitation(pageAddress: string): Promise<string>;\n    expandGroupsToPrincipals(inputs: string[], maxCount?: number): Promise<PrincipalInfo[]>;\n    createWikiPage(info: WikiPageCreationInformation): Promise<CreateWikiPageResult>;\n}\n\n/**\n * Allows for calling of the static SP.Utilities.Utility methods by supplying the method name\n */\nexport class UtilityMethod extends SharePointQueryable implements UtilityMethods {\n\n    /**\n     * Creates a new instance of the Utility method class\n     *\n     * @param baseUrl The parent url provider\n     * @param methodName The static method name to call on the utility class\n     */\n    constructor(baseUrl: string | SharePointQueryable, methodName: string) {\n\n        super(UtilityMethod.getBaseUrl(baseUrl), `_api/SP.Utilities.Utility.${methodName}`);\n    }\n\n    private static getBaseUrl(candidate: string | SharePointQueryable) {\n\n        if (typeof candidate === \"string\") {\n            return candidate;\n        }\n\n        const c = candidate as SharePointQueryable;\n        const url = c.toUrl();\n        const index = url.indexOf(\"_api/\");\n        if (index < 0) {\n            return url;\n        }\n\n        return url.substr(0, index);\n    }\n\n    public excute<T>(props: any): Promise<T> {\n\n        return this.postCore<T>({\n            body: JSON.stringify(props),\n        });\n    }\n\n    /**\n     * Sends an email based on the supplied properties\n     *\n     * @param props The properties of the email to send\n     */\n    public sendEmail(props: EmailProperties): Promise<void> {\n\n        const params = {\n            properties: {\n                Body: props.Body,\n                From: props.From,\n                Subject: props.Subject,\n                \"__metadata\": { \"type\": \"SP.Utilities.EmailProperties\" },\n            },\n        };\n\n        if (props.To && props.To.length > 0) {\n\n            params.properties = Util.extend(params.properties, {\n                To: { results: props.To },\n            });\n        }\n\n        if (props.CC && props.CC.length > 0) {\n\n            params.properties = Util.extend(params.properties, {\n                CC: { results: props.CC },\n            });\n        }\n\n        if (props.BCC && props.BCC.length > 0) {\n\n            params.properties = Util.extend(params.properties, {\n                BCC: { results: props.BCC },\n            });\n        }\n\n        if (props.AdditionalHeaders) {\n            params.properties = Util.extend(params.properties, {\n                AdditionalHeaders: props.AdditionalHeaders,\n            });\n        }\n\n        return this.clone(UtilityMethod, \"SendEmail\", true).excute<void>(params);\n    }\n\n    public getCurrentUserEmailAddresses(): Promise<string> {\n\n        return this.clone(UtilityMethod, \"GetCurrentUserEmailAddresses\", true).excute<string>({});\n    }\n\n    public resolvePrincipal(input: string,\n        scopes: PrincipalType,\n        sources: PrincipalSource,\n        inputIsEmailOnly: boolean,\n        addToUserInfoList: boolean,\n        matchUserInfoList = false): Promise<PrincipalInfo> {\n\n        const params = {\n            addToUserInfoList: addToUserInfoList,\n            input: input,\n            inputIsEmailOnly: inputIsEmailOnly,\n            matchUserInfoList: matchUserInfoList,\n            scopes: scopes,\n            sources: sources,\n        };\n\n        return this.clone(UtilityMethod, \"ResolvePrincipalInCurrentContext\", true).excute<PrincipalInfo>(params);\n    }\n\n    public searchPrincipals(input: string,\n        scopes: PrincipalType,\n        sources: PrincipalSource,\n        groupName: string,\n        maxCount: number): Promise<PrincipalInfo[]> {\n\n        const params = {\n            groupName: groupName,\n            input: input,\n            maxCount: maxCount,\n            scopes: scopes,\n            sources: sources,\n        };\n\n        return this.clone(UtilityMethod, \"SearchPrincipalsUsingContextWeb\", true).excute<PrincipalInfo[]>(params);\n    }\n\n    public createEmailBodyForInvitation(pageAddress: string): Promise<string> {\n\n        const params = {\n            pageAddress: pageAddress,\n        };\n\n        return this.clone(UtilityMethod, \"CreateEmailBodyForInvitation\", true).excute<string>(params);\n    }\n\n    public expandGroupsToPrincipals(inputs: string[], maxCount = 30): Promise<PrincipalInfo[]> {\n\n        const params = {\n            inputs: inputs,\n            maxCount: maxCount,\n        };\n\n        return this.clone(UtilityMethod, \"ExpandGroupsToPrincipals\", true).excute<PrincipalInfo[]>(params);\n    }\n\n    public createWikiPage(info: WikiPageCreationInformation): Promise<CreateWikiPageResult> {\n\n        return this.clone(UtilityMethod, \"CreateWikiPageInContextWeb\", true).excute<CreateWikiPageResult>({\n            parameters: info,\n        }).then(r => {\n            return {\n                data: r,\n                file: new File(spExtractODataId(r)),\n            };\n        });\n    }\n}\n\nexport interface CreateWikiPageResult {\n    data: any;\n    file: File;\n}\n\n\n\n// WEBPACK FOOTER //\n// ../../../../packages/sp/src/utilities.ts","import { Search, SearchQuery, SearchResults, SearchQueryBuilder } from \"./search\";\nimport { SearchSuggest, SearchSuggestQuery, SearchSuggestResult } from \"./searchsuggest\";\nimport { Site } from \"./site\";\nimport { Web } from \"./webs\";\nimport { ConfigOptions } from \"@pnp/common\";\nimport { UserProfileQuery } from \"./userprofiles\";\nimport { INavigationService, NavigationService } from \"./navigation\";\nimport { SPBatch } from \"./batch\";\nimport { SocialQuery, SocialMethods } from \"./social\";\nimport { UtilityMethod, UtilityMethods } from \"./utilities\";\nimport { SharePointQueryableConstructor, SharePointQueryable } from \"./sharepointqueryable\";\nimport {\n    setup as _setup,\n    SPConfiguration,\n} from \"./config/splibconfig\";\n\n/**\n * Root of the SharePoint REST module\n */\nexport class SPRest {\n\n    /** \n     * Creates a new instance of the SPRest class\n     * \n     * @param options Additional options\n     * @param baseUrl A string that should form the base part of the url\n     */\n    constructor(protected _options: ConfigOptions = {}, protected _baseUrl = \"\") { }\n\n    /**\n     * Configures instance with additional options and baseUrl.\n     * Provided configuration used by other objects in a chain\n     * \n     * @param options Additional options\n     * @param baseUrl A string that should form the base part of the url\n     */\n    public configure(options: ConfigOptions, baseUrl = \"\"): SPRest {\n        return new SPRest(options, baseUrl);\n    }\n\n    /**\n     * Global SharePoint configuration options\n     * \n     * @param config The SharePoint configuration to apply\n     */\n    public setup(config: SPConfiguration) {\n        _setup(config);\n    }\n\n    /**\n     * Executes a search against this web context\n     *\n     * @param query The SearchQuery definition\n     */\n    public searchSuggest(query: string | SearchSuggestQuery): Promise<SearchSuggestResult> {\n\n        let finalQuery: SearchSuggestQuery;\n\n        if (typeof query === \"string\") {\n            finalQuery = { querytext: query };\n        } else {\n            finalQuery = query;\n        }\n\n        return this.create(SearchSuggest).execute(finalQuery);\n    }\n\n    /**\n     * Executes a search against this web context\n     *\n     * @param query The SearchQuery definition\n     */\n    public search(query: string | SearchQuery | SearchQueryBuilder): Promise<SearchResults> {\n\n        let finalQuery: SearchQuery;\n\n        if (typeof query === \"string\") {\n            finalQuery = { Querytext: query };\n        } else if (query instanceof SearchQueryBuilder) {\n            finalQuery = (query as SearchQueryBuilder).toSearchQuery();\n        } else {\n            finalQuery = query;\n        }\n\n        return this.create(Search).execute(finalQuery);\n    }\n\n    /**\n     * Begins a site collection scoped REST request\n     *\n     */\n    public get site(): Site {\n        return this.create(Site);\n    }\n\n    /**\n     * Begins a web scoped REST request\n     *\n     */\n    public get web(): Web {\n        return this.create(Web);\n    }\n\n    /**\n     * Access to user profile methods\n     *\n     */\n    public get profiles(): UserProfileQuery {\n        return this.create(UserProfileQuery);\n    }\n\n    /**\n     * Access to social methods\n     */\n    public get social(): SocialMethods {\n        return this.create(SocialQuery);\n    }\n\n    /**\n     * Access to the site collection level navigation service\n     */\n    public get navigation(): INavigationService {\n        return new NavigationService();\n    }\n\n    /**\n     * Creates a new batch object for use with the SharePointQueryable.addToBatch method\n     *\n     */\n    public createBatch(): SPBatch {\n        return this.web.createBatch();\n    }\n\n    /**\n     * Static utilities methods from SP.Utilities.Utility\n     */\n    public get utility(): UtilityMethods {\n        return this.create(UtilityMethod, \"\");\n    }\n\n    /**\n     * Handles creating and configuring the objects returned from this class\n     * \n     * @param fm The factory method used to create the instance\n     * @param path Optional additional path information to pass to the factory method\n     */\n    private create<T extends SharePointQueryable>(fm: SharePointQueryableConstructor<T>, path?: string): T {\n        return new fm(this._baseUrl, path).configure(this._options);\n    }\n}\n\nexport const sp = new SPRest();\n\n\n\n// WEBPACK FOOTER //\n// ../../../../packages/sp/src/rest.ts","import { ODataParser } from \"./core\";\nimport { RuntimeConfig, Util, PnPClientStore, PnPClientStorage } from \"@pnp/common\";\n\nexport interface ICachingOptions {\n    expiration?: Date;\n    storeName?: \"session\" | \"local\";\n    key: string;\n}\n\nexport class CachingOptions implements ICachingOptions {\n\n    protected static storage = new PnPClientStorage();\n\n    public expiration = Util.dateAdd(new Date(), \"second\", RuntimeConfig.defaultCachingTimeoutSeconds);\n\n    public storeName: \"session\" | \"local\" = RuntimeConfig.defaultCachingStore;\n\n    constructor(public key: string) { }\n\n    public get store(): PnPClientStore {\n        if (this.storeName === \"local\") {\n            return CachingOptions.storage.local;\n        } else {\n            return CachingOptions.storage.session;\n        }\n    }\n}\n\nexport class CachingParserWrapper<T> implements ODataParser<T> {\n\n    constructor(\n        private _parser: ODataParser<T>,\n        private _cacheOptions: CachingOptions) { }\n\n    public parse(response: Response): Promise<T> {\n\n        // add this to the cache based on the options\n        return this._parser.parse(response).then(data => {\n\n            if (this._cacheOptions.store !== null) {\n                this._cacheOptions.store.put(this._cacheOptions.key, data, this._cacheOptions.expiration);\n            }\n\n            return data;\n        });\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ../../../../packages/odata/src/caching.ts","import { Logger, LogLevel } from \"@pnp/logging\";\n\n/**\n * Represents an exception with an HttpClient request\n *\n */\nexport class ProcessHttpClientResponseException extends Error {\n\n    constructor(public readonly status: number, public readonly statusText: string, public readonly data: any) {\n        super(`Error making HttpClient request in queryable: [${status}] ${statusText}`);\n        this.name = \"ProcessHttpClientResponseException\";\n        Logger.log({ data: this.data, level: LogLevel.Error, message: this.message });\n    }\n}\n\nexport interface ODataParser<T> {\n    hydrate?: (d: any) => T;\n    parse(r: Response): Promise<T>;\n}\n\nexport abstract class ODataParserBase<T> implements ODataParser<T> {\n\n    public parse(r: Response): Promise<T> {\n\n        return new Promise<T>((resolve, reject) => {\n\n            if (this.handleError(r, reject)) {\n                // handle all requests as text, then parse if they are not empty\n                r.text()\n                    .then(txt => txt.replace(/\\s/ig, \"\").length > 0 ? JSON.parse(txt) : {})\n                    .then(json => resolve(this.parseODataJSON<T>(json)))\n                    .catch(e => reject(e));\n            }\n        });\n    }\n\n    /**\n     * Handles a response with ok === false by parsing the body and creating a ProcessHttpClientResponseException\n     * which is passed to the reject delegate. This method returns true if there is no error, otherwise false\n     *\n     * @param r Current response object\n     * @param reject reject delegate for the surrounding promise\n     */\n    protected handleError(r: Response, reject: (reason?: any) => void): boolean {\n        if (!r.ok) {\n\n            // read the response as text, it may not be valid json\n            r.json().then(json => {\n\n                // include the headers as they contain diagnostic information\n                const data = {\n                    responseBody: json,\n                    responseHeaders: r.headers,\n                };\n\n                reject(new ProcessHttpClientResponseException(r.status, r.statusText, data));\n\n            }).catch(e => {\n\n                // we failed to read the body - possibly it is empty. Let's report the original status that caused\n                // the request to fail and log the error without parsing the body if anyone needs it for debugging\n                Logger.log({\n                    data: e,\n                    level: LogLevel.Warning,\n                    message: \"There was an error parsing the error response body. See data for details.\",\n                });\n\n                // include the headers as they contain diagnostic information\n                const data = {\n                    responseBody: \"[[body not available]]\",\n                    responseHeaders: r.headers,\n                };\n\n                reject(new ProcessHttpClientResponseException(r.status, r.statusText, data));\n            });\n        }\n\n        return r.ok;\n    }\n\n    /**\n     * Normalizes the json response by removing the various nested levels\n     *\n     * @param json json object to parse\n     */\n    protected parseODataJSON<U>(json: any): U {\n        let result = json;\n        if (json.hasOwnProperty(\"d\")) {\n            if (json.d.hasOwnProperty(\"results\")) {\n                result = json.d.results;\n            } else {\n                result = json.d;\n            }\n        } else if (json.hasOwnProperty(\"value\")) {\n            result = json.value;\n        }\n        return result;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ../../../../packages/odata/src/core.ts","import { ODataParser, ODataParserBase } from \"./core\";\nimport { Util } from \"@pnp/common\";\n\nexport class ODataDefaultParser extends ODataParserBase<any> {\n}\n\nexport class TextParser implements ODataParser<string> {\n\n    public parse(r: Response): Promise<string> {\n        return r.text();\n    }\n}\n\nexport class BlobParser implements ODataParser<Blob> {\n\n    public parse(r: Response): Promise<Blob> {\n        return r.blob();\n    }\n}\n\nexport class JSONParser implements ODataParser<any> {\n\n    public parse(r: Response): Promise<any> {\n        return r.json();\n    }\n}\n\nexport class BufferParser implements ODataParser<ArrayBuffer> {\n\n    public parse(r: any): Promise<ArrayBuffer> {\n\n        if (Util.isFunc(r.arrayBuffer)) {\n            return r.arrayBuffer();\n        }\n\n        return r.buffer();\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ../../../../packages/odata/src/parsers.ts","import { ODataParser } from \"./core\";\nimport { ODataBatch } from \"./odatabatch\";\nimport { ICachingOptions, CachingParserWrapper, CachingOptions } from \"./caching\";\nimport { Logger, LogLevel } from \"@pnp/logging\";\nimport { Util, FetchOptions, RequestClient } from \"@pnp/common\";\n\n/**\n * Defines the context for a given request to be processed in the pipeline\n */\nexport interface RequestContext<T> {\n    batch: ODataBatch;\n    batchDependency: () => void;\n    cachingOptions: ICachingOptions;\n    hasResult?: boolean;\n    isBatched: boolean;\n    isCached: boolean;\n    options: FetchOptions;\n    parser: ODataParser<T>;\n    pipeline: Array<(c: RequestContext<T>) => Promise<RequestContext<T>>>;\n    requestAbsoluteUrl: string;\n    requestId: string;\n    result?: T;\n    verb: string;\n    clientFactory: () => RequestClient;\n}\n\n/**\n * Resolves the context's result value\n *\n * @param context The current context\n */\nfunction returnResult<T>(context: RequestContext<T>): Promise<T | null> {\n\n    Logger.log({\n        data: context.result,\n        level: LogLevel.Verbose,\n        message: `[${context.requestId}] (${(new Date()).getTime()}) Returning result, see data property for value.`,\n    });\n\n    return Promise.resolve(context.result || null);\n}\n\n/**\n * Sets the result on the context\n */\nexport function setResult<T>(context: RequestContext<T>, value: any): Promise<RequestContext<T>> {\n\n    return new Promise<RequestContext<T>>((resolve) => {\n\n        context.result = value;\n        context.hasResult = true;\n        resolve(context);\n    });\n}\n\n/**\n * Invokes the next method in the provided context's pipeline\n *\n * @param c The current request context\n */\nfunction next<T>(c: RequestContext<T>): Promise<RequestContext<T>> {\n\n    if (c.pipeline.length > 0) {\n        return c.pipeline.shift()(c);\n    } else {\n        return Promise.resolve(c);\n    }\n}\n\n/**\n * Executes the current request context's pipeline\n *\n * @param context Current context\n */\nexport function pipe<T>(context: RequestContext<T>): Promise<T | null> {\n\n    if (context.pipeline.length < 1) {\n        Logger.write(`[${context.requestId}] (${(new Date()).getTime()}) Request pipeline contains no methods!`, LogLevel.Warning);\n    }\n\n    return next(context)\n        .then(ctx => returnResult(ctx))\n        .catch((e: Error) => {\n            Logger.error(e);\n            throw e;\n        });\n}\n\n/**\n * decorator factory applied to methods in the pipeline to control behavior\n */\nexport function requestPipelineMethod(alwaysRun = false) {\n\n    return (target: any, propertyKey: string, descriptor: PropertyDescriptor) => {\n\n        const method = descriptor.value;\n\n        descriptor.value = function (...args: any[]) {\n\n            // if we have a result already in the pipeline, pass it along and don't call the tagged method\n            if (!alwaysRun && args.length > 0 && args[0].hasOwnProperty(\"hasResult\") && args[0].hasResult) {\n                Logger.write(`[${args[0].requestId}] (${(new Date()).getTime()}) Skipping request pipeline method ${propertyKey}, existing result in pipeline.`, LogLevel.Verbose);\n                return Promise.resolve(args[0]);\n            }\n\n            // apply the tagged method\n            Logger.write(`[${args[0].requestId}] (${(new Date()).getTime()}) Calling request pipeline method ${propertyKey}.`, LogLevel.Verbose);\n\n            // then chain the next method in the context's pipeline - allows for dynamic pipeline\n            return method.apply(target, args).then((ctx: RequestContext<any>) => next(ctx));\n        };\n    };\n}\n\n/**\n * Contains the methods used within the request pipeline\n */\nexport class PipelineMethods {\n\n    /**\n     * Logs the start of the request\n     */\n    @requestPipelineMethod(true)\n    public static logStart<T>(context: RequestContext<T>): Promise<RequestContext<T>> {\n\n        return new Promise<RequestContext<T>>(resolve => {\n\n            Logger.log({\n                data: Logger.activeLogLevel === LogLevel.Info ? {} : context,\n                level: LogLevel.Info,\n                message: `[${context.requestId}] (${(new Date()).getTime()}) Beginning ${context.verb} request (${context.requestAbsoluteUrl})`,\n            });\n\n            resolve(context);\n        });\n    }\n\n    /**\n     * Handles caching of the request\n     */\n    @requestPipelineMethod()\n    public static caching<T>(context: RequestContext<T>): Promise<RequestContext<T>> {\n\n        return new Promise<RequestContext<T>>(resolve => {\n\n            // handle caching, if applicable\n            if (context.verb === \"GET\" && context.isCached) {\n\n                Logger.write(`[${context.requestId}] (${(new Date()).getTime()}) Caching is enabled for request, checking cache...`, LogLevel.Info);\n\n                let cacheOptions = new CachingOptions(context.requestAbsoluteUrl.toLowerCase());\n                if (typeof context.cachingOptions !== \"undefined\") {\n                    cacheOptions = Util.extend(cacheOptions, context.cachingOptions);\n                }\n\n                // we may not have a valid store\n                if (cacheOptions.store !== null) {\n                    // check if we have the data in cache and if so resolve the promise and return\n                    let data = cacheOptions.store.get(cacheOptions.key);\n                    if (data !== null) {\n                        // ensure we clear any help batch dependency we are resolving from the cache\n                        Logger.log({\n                            data: Logger.activeLogLevel === LogLevel.Info ? {} : data,\n                            level: LogLevel.Info,\n                            message: `[${context.requestId}] (${(new Date()).getTime()}) Value returned from cache.`,\n                        });\n                        context.batchDependency();\n                        // handle the case where a parser needs to take special actions with a cached result (such as getAs)\n                        if (context.parser.hasOwnProperty(\"hydrate\")) {\n                            data = context.parser.hydrate!(data);\n                        }\n                        return setResult(context, data).then(ctx => resolve(ctx));\n                    }\n                }\n\n                Logger.write(`[${context.requestId}] (${(new Date()).getTime()}) Value not found in cache.`, LogLevel.Info);\n\n                // if we don't then wrap the supplied parser in the caching parser wrapper\n                // and send things on their way\n                context.parser = new CachingParserWrapper(context.parser, cacheOptions);\n            }\n\n            return resolve(context);\n        });\n    }\n\n    /**\n     * Sends the request\n     */\n    @requestPipelineMethod()\n    public static send<T>(context: RequestContext<T>): Promise<RequestContext<T>> {\n\n        return new Promise<RequestContext<T>>((resolve, reject) => {\n            // send or batch the request\n            if (context.isBatched) {\n\n                // we are in a batch, so add to batch, remove dependency, and resolve with the batch's promise\n                const p = context.batch.add(context.requestAbsoluteUrl, context.verb, context.options, context.parser);\n\n                // we release the dependency here to ensure the batch does not execute until the request is added to the batch\n                context.batchDependency();\n\n                Logger.write(`[${context.requestId}] (${(new Date()).getTime()}) Batching request in batch ${context.batch.batchId}.`, LogLevel.Info);\n\n                // we set the result as the promise which will be resolved by the batch's execution\n                resolve(setResult(context, p));\n\n            } else {\n\n                Logger.write(`[${context.requestId}] (${(new Date()).getTime()}) Sending request.`, LogLevel.Info);\n\n                // we are not part of a batch, so proceed as normal\n                const client = context.clientFactory();\n                const opts = Util.extend(context.options || {}, { method: context.verb });\n                client.fetch(context.requestAbsoluteUrl, opts)\n                    .then(response => context.parser.parse(response))\n                    .then(result => setResult(context, result))\n                    .then(ctx => resolve(ctx))\n                    .catch(e => reject(e));\n            }\n        });\n    }\n\n    /**\n     * Logs the end of the request\n     */\n    @requestPipelineMethod(true)\n    public static logEnd<T>(context: RequestContext<T>): Promise<RequestContext<T>> {\n\n        return new Promise<RequestContext<T>>(resolve => {\n\n            if (context.isBatched) {\n\n                Logger.log({\n                    data: Logger.activeLogLevel === LogLevel.Info ? {} : context,\n                    level: LogLevel.Info,\n                    message: `[${context.requestId}] (${(new Date()).getTime()}) ${context.verb} request will complete in batch ${context.batch.batchId}.`,\n                });\n\n            } else {\n\n                Logger.log({\n                    data: Logger.activeLogLevel === LogLevel.Info ? {} : context,\n                    level: LogLevel.Info,\n                    message: `[${context.requestId}] (${(new Date()).getTime()}) Completing ${context.verb} request.`,\n                });\n            }\n\n            resolve(context);\n        });\n    }\n}\n\nexport function getDefaultPipeline() {\n    return [\n        PipelineMethods.logStart,\n        PipelineMethods.caching,\n        PipelineMethods.send,\n        PipelineMethods.logEnd,\n    ].slice(0);\n}\n\n\n\n// WEBPACK FOOTER //\n// ../../../../packages/odata/src/pipeline.ts","import {\n    Util,\n    Dictionary,\n    RuntimeConfig,\n    FetchOptions,\n    ConfigOptions,\n    mergeOptions,\n} from \"@pnp/common\";\nimport { Logger } from \"@pnp/logging\";\nimport { ODataParser } from \"./core\";\nimport { ODataDefaultParser } from \"./parsers\";\nimport { ICachingOptions } from \"./caching\";\nimport { ODataBatch } from \"./odatabatch\";\nimport {\n    RequestContext,\n    getDefaultPipeline,\n    pipe,\n} from \"./pipeline\";\n\nexport class AlreadyInBatchException extends Error {\n\n    constructor(msg = \"This query is already part of a batch.\") {\n        super(msg);\n        this.name = \"AlreadyInBatchException\";\n        Logger.error(this);\n    }\n}\n\nexport abstract class ODataQueryable<BatchType extends ODataBatch, GetType = any> {\n\n    /**\n     * Tracks the batch of which this query may be part\n     */\n    protected _batch: BatchType | null;\n\n    /**\n     * Additional options to be set before sending actual http request\n     */\n    protected _options: ConfigOptions;\n\n    /**\n     * Tracks the query parts of the url\n     */\n    protected _query: Dictionary<string>;\n\n    /**\n     * Tracks the url as it is built\n     */\n    protected _url: string;\n\n    /**\n     * Stores the parent url used to create this instance, for recursing back up the tree if needed\n     */\n    protected _parentUrl: string;\n\n    /**\n     * Explicitly tracks if we are using caching for this request\n     */\n    protected _useCaching: boolean;\n\n    /**\n     * Any options that were supplied when caching was enabled\n     */\n    protected _cachingOptions: ICachingOptions | null;\n\n    constructor() {\n        this._batch = null;\n        this._query = new Dictionary<string>();\n        this._options = {};\n        this._url = \"\";\n        this._parentUrl = \"\";\n        this._useCaching = false;\n        this._cachingOptions = null;\n    }\n\n    /**\n     * Directly concatonates the supplied string to the current url, not normalizing \"/\" chars\n     *\n     * @param pathPart The string to concatonate to the url\n     */\n    public concat(pathPart: string): this {\n        this._url += pathPart;\n        return this;\n    }\n\n    /**\n     * Provides access to the query builder for this url\n     *\n     */\n    public get query(): Dictionary<string> {\n        return this._query;\n    }\n\n    /**\n     * Sets custom options for current object and all derived objects accessible via chaining\n     * \n     * @param options custom options\n     */\n    public configure(options: ConfigOptions): this {\n        mergeOptions(this._options, options);\n        return this;\n    }\n\n    /**\n     * Enables caching for this request\n     *\n     * @param options Defines the options used when caching this request\n     */\n    public usingCaching(options?: ICachingOptions): this {\n        if (!RuntimeConfig.globalCacheDisable) {\n            this._useCaching = true;\n            if (typeof options !== \"undefined\") {\n                this._cachingOptions = options;\n            }\n        }\n        return this;\n    }\n\n    /**\n     * Adds this query to the supplied batch\n     *\n     * @example\n     * ```\n     *\n     * let b = pnp.sp.createBatch();\n     * pnp.sp.web.inBatch(b).get().then(...);\n     * b.execute().then(...)\n     * ```\n     */\n    public inBatch(batch: BatchType): this {\n\n        if (this.batch !== null) {\n            throw new AlreadyInBatchException();\n        }\n\n        this._batch = batch;\n\n        return this;\n    }\n\n    /**\n     * Gets the currentl url\n     *\n     */\n    public toUrl(): string {\n        return this._url;\n    }\n\n    /**\n     * Gets the full url with query information\n     *\n     */\n    public abstract toUrlAndQuery(): string;\n\n    /**\n     * Executes the currently built request\n     *\n     * @param parser Allows you to specify a parser to handle the result\n     * @param getOptions The options used for this request\n     */\n    public get<T = GetType>(parser: ODataParser<T> = new ODataDefaultParser(), options: FetchOptions = {}): Promise<T> {\n        return this.toRequestContext(\"GET\", options, parser, getDefaultPipeline()).then(context => pipe(context));\n    }\n\n    protected postCore<T = any>(options: FetchOptions = {}, parser: ODataParser<T> = new ODataDefaultParser()): Promise<T> {\n        return this.toRequestContext(\"POST\", options, parser, getDefaultPipeline()).then(context => pipe(context));\n    }\n\n    protected patchCore<T = any>(options: FetchOptions = {}, parser: ODataParser<T> = new ODataDefaultParser()): Promise<T> {\n        return this.toRequestContext(\"PATCH\", options, parser, getDefaultPipeline()).then(context => pipe(context));\n    }\n\n    protected deleteCore<T = any>(options: FetchOptions = {}, parser: ODataParser<T> = new ODataDefaultParser()): Promise<T> {\n        return this.toRequestContext(\"DELETE\", options, parser, getDefaultPipeline()).then(context => pipe(context));\n    }\n\n    /**\n     * Blocks a batch call from occuring, MUST be cleared by calling the returned function\n    */\n    protected addBatchDependency(): () => void {\n        if (this._batch !== null) {\n            return this._batch.addDependency();\n        }\n\n        return () => null;\n    }\n\n    /**\n     * Indicates if the current query has a batch associated\n     *\n     */\n    protected get hasBatch(): boolean {\n        return Util.objectDefinedNotNull(this._batch);\n    }\n\n    /**\n     * The batch currently associated with this query or null\n     *\n     */\n    protected get batch(): BatchType | null {\n        return this.hasBatch ? this._batch : null;\n    }\n\n    /**\n     * Appends the given string and normalizes \"/\" chars\n     *\n     * @param pathPart The string to append\n     */\n    protected append(pathPart: string) {\n        this._url = Util.combinePaths(this._url, pathPart);\n    }\n\n    /**\n     * Gets the parent url used when creating this instance\n     *\n     */\n    protected get parentUrl(): string {\n        return this._parentUrl;\n    }\n\n    /**\n     * Converts the current instance to a request context\n     *\n     * @param verb The request verb\n     * @param options The set of supplied request options\n     * @param parser The supplied ODataParser instance\n     * @param pipeline Optional request processing pipeline\n     */\n    protected abstract toRequestContext<T>(\n        verb: string,\n        options: FetchOptions,\n        parser: ODataParser<T>,\n        pipeline: Array<(c: RequestContext<T>) => Promise<RequestContext<T>>>): Promise<RequestContext<T>>;\n}\n\n\n\n// WEBPACK FOOTER //\n// ../../../../packages/odata/src/queryable.ts","import { ODataParser } from \"./core\";\nimport { Util, FetchOptions } from \"@pnp/common\";\n\nexport interface ODataBatchRequestInfo {\n    url: string;\n    method: string;\n    options: FetchOptions;\n    parser: ODataParser<any>;\n    resolve: ((d: any) => void) | null;\n    reject: ((error: any) => void) | null;\n}\n\nexport abstract class ODataBatch {\n\n    protected _dependencies: Promise<void>[];\n    protected _requests: ODataBatchRequestInfo[];\n\n    constructor(private _batchId = Util.getGUID()) {\n        this._requests = [];\n        this._dependencies = [];\n    }\n\n    public get batchId(): string {\n        return this._batchId;\n    }\n\n    /**\n     * The requests contained in this batch\n     */\n    protected get requests(): ODataBatchRequestInfo[] {\n        return this._requests;\n    }\n\n    /**\n     * \n     * @param url Request url\n     * @param method Request method (GET, POST, etc)\n     * @param options Any request options\n     * @param parser The parser used to handle the eventual return from the query\n     */\n    public add<T>(url: string, method: string, options: FetchOptions, parser: ODataParser<T>): Promise<T> {\n\n        const info: ODataBatchRequestInfo = {\n            method: method.toUpperCase(),\n            options: options,\n            parser: parser,\n            reject: null,\n            resolve: null,\n            url: url,\n        };\n\n        const p = new Promise<T>((resolve, reject) => {\n            info.resolve = resolve;\n            info.reject = reject;\n        });\n\n        this._requests.push(info);\n\n        return p;\n    }\n\n    /**\n     * Adds a dependency insuring that some set of actions will occur before a batch is processed.\n     * MUST be cleared using the returned resolve delegate to allow batches to run\n     */\n    public addDependency(): () => void {\n\n        let resolver: () => void = () => void (0);\n        const promise = new Promise<void>((resolve) => {\n            resolver = resolve;\n        });\n\n        this._dependencies.push(promise);\n\n        return resolver;\n    }\n\n    /**\n     * Execute the current batch and resolve the associated promises\n     *\n     * @returns A promise which will be resolved once all of the batch's child promises have resolved\n     */\n    public execute(): Promise<void> {\n\n        // we need to check the dependencies twice due to how different engines handle things.\n        // We can get a second set of promises added during the first set resolving\n        return Promise.all(this._dependencies).then(() => Promise.all(this._dependencies)).then(() => this.executeImpl());\n    }\n\n    protected abstract executeImpl(): Promise<void>;\n}\n\n\n\n// WEBPACK FOOTER //\n// ../../../../packages/odata/src/odatabatch.ts"],"sourceRoot":""}